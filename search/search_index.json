{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Redirect","text":""},{"location":"client_libraries/","title":"Client Libraries","text":""},{"location":"support_systems/","title":"Support Systems","text":""},{"location":"api/primitives/","title":"Primitives","text":""},{"location":"api/primitives/#address","title":"Address","text":"<p>A string representation of a network address. An address can be a version 4 IP address, a version 6 IP address, DNS name or MAC address.</p>"},{"location":"api/primitives/#addresstype","title":"AddressType","text":"<p>String value of a network address type. Could be only <code>HOSTNAME</code>, <code>IPV4</code>, <code>IPV6</code> or <code>MAC</code>.</p>"},{"location":"api/primitives/#boolean","title":"Boolean","text":"<p>One out of <code>true</code> or <code>false</code>.</p>"},{"location":"api/primitives/#datetime","title":"DateTime","text":"<p>Pinpoints a moment in time in the format of ISO8601 standard <code>yyyy-mm-ddThh:MM:ssZ</code>, where \u201dyyyy\u201d denotes year (4 digits), \u201dmm\u201d denotes month starting from 01, \u201ddd\u201d denotes day starting from 01, \u201dT\u201d is the separator between date and time part, \u201dhh\u201d denotes hour in the 24-hour format (00-23), \u201dMM\u201d denotes minute (00-59), \u201dss\u201d denotes second (00-59). \u201dZ\u201d indicates that the time is in UTC. An example of a valid date/time string is \u201d2024-12-05T12:00:00Z\u201d</p>"},{"location":"api/primitives/#errortype","title":"ErrorType","text":"<p>String value of the error type. Could be <code>ARROWHEAD</code>, <code>INVALID_PARAMETER</code>, <code>AUTH</code>, <code>FORBIDDEN</code>, <code>DATA_NOT_FOUND</code>, <code>TIMEOUT</code>, <code>LOCKED</code>, <code>INTERNAL_SERVER_ERROR</code> or <code>EXTERNAL_SERVER_ERROR</code>.</p>"},{"location":"api/primitives/#mqttqos","title":"MQTTQoS","text":"<p>QoS in MQTT refers to the level of guarantee for message delivery between the publisher and the subscriber. It can be <code>0</code>, <code>1</code> or <code>2</code> (learn more).</p>"},{"location":"api/primitives/#name","title":"Name","text":"<p>A String indentifier that is intended to be both human and machine-readable.</p>"},{"location":"api/primitives/#number","title":"Number","text":"<p>Decimal number.</p>"},{"location":"api/primitives/#version","title":"Version","text":"<p>Specifies a system version. Version must follow the Semantic Versioning, which means, it consists of three numbers separated by dots. These numbers represent the <code>MAJOR</code>, <code>MINOR</code> and <code>PATCH</code> version. An example: 5.0.0</p>"},{"location":"api/data-models/address-descriptor/","title":"AddressDescriptor","text":"Field Type Description type AddressType Network address type. address Address Address."},{"location":"api/data-models/device-descriptor/","title":"DeviceDescriptor","text":"Field Type Description name Name Unique identifier of the device. metadata Metadata Additional information about the device. addresses List&lt;AddressDescriptor&gt; Different kind of addresses of the device. createdAt DateTime Device was registered at this timestamp. updatedAt DateTime Device was modified at this timestamp."},{"location":"api/data-models/device-lookup-request/","title":"DeviceLookupRequest","text":"Field Type Mandatory Description deviceNames List&lt;Name&gt; no Requester is looking for devices with any of the specified names. addresses List&lt;Address&gt; no Requester is looking for devices with any of the specified addresses. addressType AddressType no Requester is looking for devices with the specified type of address. metadataRequirementsList List&lt;MetadataRequirements&gt; no Requester is looking for devices that are matching any of the specified metadata requirements"},{"location":"api/data-models/device-lookup-response/","title":"DeviceLookupResponse","text":"Field Type Description entries List&lt;DeviceLookupResult&gt; List of device results. count Long Number of returned devices."},{"location":"api/data-models/device-lookup-result/","title":"DeviceLookupResult","text":"Field Type Description name Name Unique identifier of the device. metadata Metadata Additional information about the device. addresses List&lt;AddressDescriptor&gt; Different kind of addresses of the device. createdAt DateTime Device was registered at this timestamp. updatedAt DateTime Device was modified at this timestamp."},{"location":"api/data-models/device-registration-request/","title":"DeviceRegistrationRequest","text":"Field Type Mandatory Description name Name yes Unique identifier of the device. metadata Metadata no Additional information about the device. addresses List&lt;Address&gt; yes Different kind of addresses of the device."},{"location":"api/data-models/device-registration-response/","title":"DeviceRegistrationResponse","text":"Field Type Description name Name Unique identifier of the device. metadata Metadata Additional information about the device. addresses List&lt;AddressDescriptor&gt; Different kind of addresses of the registered device. createdAt DateTime Device was registered at this timestamp. updatedAt DateTime Device was modified at this timestamp."},{"location":"api/data-models/error-response/","title":"ErrorResponse","text":"Field Type Description errorMessage String Description of the error. errorCode Integer Numerical code of the error. exceptionType ErrorType Type value of the error. origin String Origin of the error."},{"location":"api/data-models/metadata-requirements/","title":"MetadataRequirements","text":"<p>A special Object which maps String keys to Object, primitive or list values, where</p> <ul> <li> <p>Keys can be paths (or multi-level keys) which access a specific value in a Metadata structure, where parts of the path are delimited with dot character (e.g. in case of \u201dkey.subkey\u201d path we are looking for the key named \u201dkey\u201d in the metadata, which is associated with an embedded object and in this object we are looking for the key named \u201dsubkey\u201d).</p> </li> <li> <p>Values are special Objects with two fields: an \"operation\" (e.g. less than) and an actual value (e.g. a number). A metadata is matching a requirement if the specified operation returns true using the metadata value referenced by a key path as first and the actual value as second operands.</p> </li> <li> <p>Alternatively, values can be ordinary primitives, lists or Objects. In this case the \"operation\" is equals by default.</p> </li> </ul>"},{"location":"api/data-models/metadata-requirements/#operations","title":"Operations","text":"<p>all kind of values (any) - all kind of values (any)</p> <p><code>EQUALS</code>, <code>NOT_EQUALS</code></p> <p>text-text</p> <p><code>EQUALS_IGNORE_CASE</code>, <code>NOT_EQUALS_IGNORE_CASE</code>, <code>INCLUDES</code>, <code>NOT_INCLUDES</code>, <code>INCLUDES_IGNORE_CASE</code>, <code>NOT_INCLUDES_IGNORE_CASE</code>, <code>STARTS_WITH</code>, <code>NOT_STARTS_WITH</code>, <code>STARTS_WITH_IGNORE_CASE</code>, <code>NOT_STARTS_WITH_IGNORE_CASE</code>, <code>ENDS_WITH</code>, <code>NOT_ENDS_WITH</code>, <code>ENDS_WITH_IGNORE_CASE</code>, <code>NOT_ENDS_WITH_IGNORE_CASE</code>, <code>REGEXP</code></p> <p>number-number</p> <p><code>LESS_THAN</code>, <code>LESS_THAN_OR_EQUALS_TO</code>, <code>GREATER_THAN</code>, <code>GREATER_THAN_OR_EQUALS_TO</code></p> <p>text or list - number</p> <p><code>SIZE_EQUALS</code>, <code>SIZE_NOT_EQUALS</code></p> <p>list - any</p> <p><code>CONTAINS</code>, <code>NOT_CONTAINS</code></p> <p>any - list</p> <p><code>IN</code>, <code>NOT_IN</code></p>"},{"location":"api/data-models/metadata/","title":"Metadata","text":"<p>An Object which maps String keys to primitive, Object or List values.</p>"},{"location":"api/data-models/mqtt-request-template/","title":"MqttRequestTemplate","text":"Field Type Mandatory Description traceId String no Any kind of string choosen by the requester. authentication String yes Authenticanon related data. responseTopic String yes The topic on which the response is expected. qosRequirement MQTTQoS no Required response MQTT Quality ofService. params Map no Request parameters as string key-value pairs. payload Object no Any kind of data object."},{"location":"api/data-models/mqtt-response-template/","title":"MqttResponseTemplate","text":"Field Type Description status Integer Response status code. traceId String The string identifier given by the requester. receiver Name Unique identifier of the system to which the response message is addressed. payload Object Any kind of data object."},{"location":"api/data-models/system-lookup-request/","title":"SystemLookupRequest","text":"Field Type Mandatory Description systemNames List&lt;Name&gt; no Requester is looking for systems with any of the specified names. addresses List&lt;Address&gt; no Requester is looking for systems with any of the specified addresses. addressType AddressType no Requester is looking for systems with the specified type of address. metadataRequirementsList List&lt;MetadataRequirements&gt; no Requester is looking for systems that are matching any of the specified metadata requirements. versions List&lt;Version&gt; no Requester is looking for systems with any of the specified versions. deviceNames List&lt;Name&gt; no Requester is looking for systems that are running on any of the specified devices."},{"location":"api/data-models/system-lookup-response/","title":"SystemLookupResponse","text":"Field Type Description entries List&lt;SystemLookupResult&gt; List of system results. count Number Number of returned systems."},{"location":"api/data-models/system-lookup-result/","title":"SystemLookupResult","text":"Field Type Description name Name Unique identifier of the system. metadata Metadata Additional information about the system. version Version Version of the system. addresses List&lt;AddressDescriptor&gt; Different kind of addresses of the system. device DeviceDescriptor Information about the device on which the system is running createdAt DateTime System was registered at this timestamp. updatedAt DateTime System was modified at this timestamp."},{"location":"api/data-models/system-registration-request/","title":"SystemRegistrationRequest","text":"Field Type Mandatory Description metadata Metadata no Additional information about the system. version Version no Version of the system. addresses List&lt;Address&gt; yes Different kind of addresses of the system. deviceName Name no Unique identifier of the device on which the system is running."},{"location":"api/data-models/system-registration-response/","title":"SystemRegistrationResponse","text":"Field Type Description name Name Unique identifier of the registered system. metadata Metadata Additional information about the registered system. version Version Version of the registered system. addresses List&lt;AddressDescriptor&gt; Different kind of addresses of the registered system. device DeviceDescriptor Information about the device on which the system is running. createdAt DateTime System was registered at this timestamp. updatedAt DateTime System was modified at this timestamp."},{"location":"api/serviceregistry/device-discovery-generic-http/","title":"device-discovery IDD","text":"<p>GENERIC-HTTP &amp; GENERIC-HTTPS</p>"},{"location":"api/serviceregistry/device-discovery-generic-http/#overview","title":"Overview","text":"<p>This page describes the GENERIC-HTTP and GENERIC-HTTPS service interface of device-discovery, which enables both application and core/support systems to lookup, register and revoke devices on which the Local Cloud\u2019s systems are running. Device representation is not necessary for the base functionalities of a Local Cloud but in certain use cases (e.g. enabling onboarding) is needed. It\u2019s implemented using protocol, encoding as stated in the following tables:</p> <p>GENERIC-HTTP</p> Profile type type Version Transfer protocol HTTP 1.1 Data encryption N/A - Encoding JSON RFC 8259 Compression N/A - <p>GENERIC-HTTPS</p> Profile type type Version Transfer protocol HTTPS 1.1 Data encryption TLS - Encoding JSON RFC 8259 Compression N/A - <p>Hereby the Interface Design Description (IDD) is provided to the device-discovery \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/serviceregistry/device-discovery-generic-http/#interface-description","title":"Interface Description","text":""},{"location":"api/serviceregistry/device-discovery-generic-http/#register","title":"register","text":"<p>The service operation request requires an authorization bearer header and a DeviceRegistrationRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/device-registry/register HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n   \"name\":\"thermometer2\",\n   \"metadata\":{\n      \"scales\":[\n         \"Kelvin\",\n         \"Celsius\"\n      ],\n      \"max-temperature\":{\n         \"Kelvin\":310,\n         \"Celsius\":40\n      },\n      \"min-temperature\":{\n         \"Kelvin\":260,\n         \"Celsius\":-10\n      }\n   },\n   \"addresses\":[      \n      \"81:ef:1a:44:7a:f5\"\n   ]\n}\n</code></pre> <p>The service operation responses with the status code <code>200</code> if called successfully and the device entity is already existing or <code>201</code> if the entity was newly created. The response also contains a DeviceRegistrationResponse JSON encoded body.</p> <pre><code>{\n   \"name\":\"thermometer2\",\n   \"metadata\":{\n      \"scales\":[\n         \"Kelvin\",\n         \"Celsius\"\n      ],\n      \"max-temperature\":{\n         \"Kelvin\":310,\n         \"Celsius\":40\n      },\n      \"min-temperature\":{\n         \"Kelvin\":260,\n         \"Celsius\":-10\n      }\n   },\n   \"addresses\":[\n      {\n         \"type\":\"MAC\",\n         \"address\":\"81:ef:1a:44:7a:f5\"\n      }\n   ],\n   \"createdAt\":\"2024-11-04T01:53:02Z\",\n   \"updatedAt\":\"2024-11-04T01:53:02Z\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n    \"errorMessage\": \"Device name is missing.\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"POST /serviceregistry/device-discovery/register\"\n}\n</code></pre>"},{"location":"api/serviceregistry/device-discovery-generic-http/#lookup","title":"lookup","text":"<p>The service operation request requires an authorization bearer header and may optionally include a DeviceLookupRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/device-registry/lookup HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n   \"deviceNames\":[\n      \"thermometer2\"\n   ],\n   \"addresses\":[\n      \"81:ef:1a:44:7a:f5\"\n   ],\n   \"addressType\":\"MAC\",\n   \"metadataRequirementList\":[\n      {\n         \"max-temperature.Celsius\":{\n            \"op\":\"LESS_THAN\",\n            \"value\":50\n         }\n      }\n   ]\n}\n</code></pre> <p>The service operation responses with the status code <code>200</code> if called successfully and with a DeviceLookupResponse JSON encoded body.</p> <pre><code>{\n   \"entries\":[\n      {\n         \"name\":\"thermometer2\",\n         \"metadata\":{\n            \"scales\":[\n               \"Kelvin\",\n               \"Celsius\"\n            ],\n            \"max-temperature\":{\n               \"Kelvin\":310,\n               \"Celsius\":40\n            },\n            \"min-temperature\":{\n               \"Kelvin\":260,\n               \"Celsius\":-10\n            }\n         },\n         \"addresses\":[\n            {\n               \"type\":\"MAC\",\n               \"address\":\"81:ef:1a:44:7a:f5\"\n            }\n         ],\n         \"createdAt\":\"2024-11-04T01:53:02Z\",\n         \"updatedAt\":\"2024-11-04T01:53:02Z\"\n      }\n   ],\n   \"count\":1\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> Error if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n    \"errorMessage\": \"Database operation error.\",\n    \"errorCode\": 500,\n    \"exceptionType\": \"INTERNAL_SERVER_ERROR\",\n    \"origin\": \"POST /serviceregistry/device-discovery/lookup\"\n}\n</code></pre>"},{"location":"api/serviceregistry/device-discovery-generic-http/#revoke","title":"revoke","text":"<p>The service operation request requires an authorization bearer header and a device <code>name</code> as path parameter.</p> <pre><code>DELETE /serviceregistry/device-discovery/revoke/thermometer2 HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n</code></pre> <p>The service operation responses with the status code <code>200</code> if called successfully and an existing device entity was removed and <code>204</code> if no matching entity was found. The success response does not contain any response body.</p> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission, <code>423</code> if entity is not removable and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n    \"errorMessage\": \"Database operation error.\",\n    \"errorCode\": 500,\n    \"exceptionType\": \"INTERNAL_SERVER_ERROR\",\n    \"origin\": \"DELETE /serviceregistry/device-discovery/lookup\"\n}\n</code></pre>"},{"location":"api/serviceregistry/device-discovery-generic-mqtt/","title":"device-discovery IDD","text":"<p>GENERIC-MQTT &amp; GENERIC-MQTTS </p>"},{"location":"api/serviceregistry/device-discovery-generic-mqtt/#overview","title":"Overview","text":"<p>This page describes the GENERIC-MQTT and GENERIC-MQTTS service interface of device-discovery, which enables both application and core/support systems to lookup, register and revoke devices on which the Local Cloud\u2019s systems are running. Device representation is not necessary for the base functionalities of a Local Cloud but in certain use cases (e.g. enabling onboarding) is needed. It\u2019s implemented using protocol, encoding as stated in the following tables:</p> <p>GENERIC-HTTP</p> Profile type type Version Transfer protocol MQTT 3.1 and 3.1.1 Data encryption N/A - Encoding JSON RFC 8259 Compression N/A - <p>GENERIC-HTTPS</p> Profile type type Version Transfer protocol MQTT 3.1 and 3.1.1 Data encryption TLS - Encoding JSON RFC 8259 Compression N/A - <p>Hereby the Interface Design Description (IDD) is provided to the device-discovery \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/serviceregistry/device-discovery-generic-mqtt/#interface-description","title":"Interface Description","text":""},{"location":"api/serviceregistry/device-discovery-generic-mqtt/#register","title":"register","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the payload is a DeviceRegistrationRequest.</p> <pre><code>Topic: arrowhead/serviceregistry/device-discovery/register\n\n{\n   \"traceId\":\"&lt;trace-id&gt;\",\n   \"authentication\":\"&lt;authentication-data&gt;\",\n   \"responseTopic\":\"&lt;response-topic&gt;\",\n   \"qosRequirement\":\"&lt;0|1|2&gt;\",\n   \"payload\":{\n      \"name\":\"thermometer2\",\n      \"metadata\":{\n         \"scales\":[\n            \"Kelvin\",\n            \"Celsius\"\n         ],\n         \"max-temperature\":{\n            \"Kelvin\":310,\n            \"Celsius\":40\n         },\n         \"min-temperature\":{\n            \"Kelvin\":260,\n            \"Celsius\":-10\n         }\n      },\n      \"addresses\":[\n         \"81:ef:1a:44:7a:f5\"\n      ]\n   }\n}\n</code></pre> <p>The service operation responses with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully and the device entity is already existing or <code>201</code> if the entity was newly created. The response template payload is a DeviceRegistrationResponse.</p> <pre><code>{\n   \"status\":\"&lt;status-code&gt;\",\n   \"traceId\":\"&lt;trace-id&gt;\",\n   \"receiver\":\"&lt;receiver-system-identifier&gt;\",\n   \"payload\":{\n      \"name\":\"thermometer2\",\n      \"metadata\":{\n         \"scales\":[\n            \"Kelvin\",\n            \"Celsius\"\n         ],\n         \"max-temperature\":{\n            \"Kelvin\":310,\n            \"Celsius\":40\n         },\n         \"min-temperature\":{\n            \"Kelvin\":260,\n            \"Celsius\":-10\n         }\n      },\n      \"addresses\":[\n         {\n            \"type\":\"MAC\",\n            \"address\":\"81:ef:1a:44:7a:f5\"\n         }\n      ],\n      \"createdAt\":\"2024-11-04T01:53:02Z\",\n      \"updatedAt\":\"2024-11-04T01:53:02Z\"\n   }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\":\"&lt;status-code&gt;\",\n   \"traceId\":\"&lt;trace-id&gt;\",\n   \"receiver\":\"&lt;receiver-system-identifier&gt;\",\n   \"payload\":{\n      \"errorMessage\":\"Device name is missing.\",\n      \"errorCode\":400,\n      \"exceptionType\":\"INVALID_PARAMETER\",\n      \"origin\":\"arrowhead/serviceregistry/device-discovery/register\"\n   }\n}\n</code></pre>"},{"location":"api/serviceregistry/device-discovery-generic-mqtt/#lookup","title":"lookup","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the payload is a  DeviceLookupRequest.</p> <pre><code>Topic: arrowhead/serviceregistry/device-discovery/lookup\n\n{\n   \"traceId\":\"&lt;trace-id&gt;\",\n   \"authentication\":\"&lt;authentication-data&gt;\",\n   \"responseTopic\":\"&lt;response-topic&gt;\",\n   \"qosRequirement\":\"&lt;0|1|2&gt;\",\n   \"payload\":{\n      \"deviceNames\":[\n         \"thermometer2\"\n      ],\n      \"addresses\":[\n         \"81:ef:1a:44:7a:f5\"\n      ],\n      \"addressType\":\"MAC\",\n      \"metadataRequirementList\":[\n         {\n            \"max-temperature.Celsius\":{\n               \"op\":\"LESS_THAN\",\n               \"value\":50\n            }\n         }\n      ]\n   }\n}\n</code></pre> <p>The service operation responses with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is a DeviceLookupResponse.</p> <pre><code>{\n   \"status\":\"&lt;status-code&gt;\",\n   \"traceId\":\"&lt;trace-id&gt;\",\n   \"receiver\":\"&lt;receiver-system-identifier&gt;\",\n   \"payload\":{\n      \"entries\":[\n         {\n            \"name\":\"thermometer2\",\n            \"metadata\":{\n               \"scales\":[\n                  \"Kelvin\",\n                  \"Celsius\"\n               ],\n               \"max-temperature\":{\n                  \"Kelvin\":310,\n                  \"Celsius\":40\n               },\n               \"min-temperature\":{\n                  \"Kelvin\":260,\n                  \"Celsius\":-10\n               }\n            },\n            \"addresses\":[\n               {\n                  \"type\":\"MAC\",\n                  \"address\":\"81:ef:1a:44:7a:f5\"\n               }\n            ],\n            \"createdAt\":\"2024-11-04T01:53:02Z\",\n            \"updatedAt\":\"2024-11-04T01:53:02Z\"\n         }\n      ],\n      \"count\":1\n   }\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens.  In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\":\"&lt;status-code&gt;\",\n   \"traceId\":\"&lt;trace-id&gt;\",\n   \"receiver\":\"&lt;receiver-system-identifier&gt;\",\n   \"payload\":{\n      \"errorMessage\":\"Database operation error.\",\n      \"errorCode\":500,\n      \"exceptionType\":\"INTERNAL_SERVER_ERROR\",\n      \"origin\":\"arrowhead/serviceregistry/device-discovery/lookup\"\n   }\n}\n</code></pre>"},{"location":"api/serviceregistry/device-discovery-generic-mqtt/#revoke","title":"revoke","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the payload is the <code>device name</code>.</p> <pre><code>Topic: arrowhead/serviceregistry/device-discovery/revoke\n\n{\n   \"traceId\":\"&lt;trace-id&gt;\",\n   \"authentication\":\"&lt;authentication-data&gt;\",\n   \"responseTopic\":\"&lt;response-topic&gt;\",\n   \"qosRequirement\":\"&lt;0|1|2&gt;\",\n   \"payload\":\"thermometer2\"\n}\n</code></pre> <p>The service operation responses with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully and an existing device entity was removed and <code>204</code> if no matching entity was found. </p> <pre><code>{\n   \"status\":\"&lt;status-code&gt;\",\n   \"traceId\":\"&lt;trace-id&gt;\",\n   \"receiver\":\"&lt;receiver-system-identifier&gt;\"\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission, <code>423</code> if the entity is not removable and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\":\"&lt;status-code&gt;\",\n   \"traceId\":\"&lt;trace-id&gt;\",\n   \"receiver\":\"&lt;receiver-system-identifier&gt;\",\n   \"payload\":{\n      \"errorMessage\":\"Database operation error.\",\n      \"errorCode\":500,\n      \"exceptionType\":\"INTERNAL_SERVER_ERROR\",\n      \"origin\":\"arrowhead/serviceregistry/device-discovery/revoke\"\n   }\n}\n</code></pre>"},{"location":"api/serviceregistry/system-discovery-generic-http/","title":"system-discovery GENERIC-HTTP","text":""},{"location":"api/serviceregistry/system-discovery-generic-http/#overview","title":"Overview","text":"<p>This page describes the GENERIC-HTTP and GENERIC-HTTPS service interface of system-discovery, which enables both application and core/support systems to lookup, register and revoke systems that are part of the Local Cloud.  System representation is mandatory for the base functionalities of a Local Cloud, e.g. the systems have to be registered in order to interact with each other.  The interfaces are implemented using protocol, encoding as stated in the following tables:</p>"},{"location":"api/serviceregistry/system-discovery-generic-http/#interface-description","title":"Interface Description","text":"<p>GENERIC-HTTP</p> Profile type type Version Transfer protocol HTTP 1.1 Data encryption N/A - Encoding JSON RFC 8259 Compression N/A - <p>GENERIC-HTTPS</p> Profile type type Version Transfer protocol HTTPS 1.1 Data encryption TLS - Encoding JSON RFC 8259 Compression N/A - <p>Hereby the Interface Design Description (IDD) is provided to the system-discovery \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/serviceregistry/system-discovery-generic-http/#register","title":"register","text":"<p>The service operation request requires an authorization bearer header and a SystemRegistrationRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/system-discovery/register HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"metadata\": {\n    \"scales\": [\"Kelvin\", \"Celsius\"],\n    \"location\": {\"side\": \"North\", \"block\": 2},\n    \"indoor\": true\n  },\n  \"version\": \"\",\n  \"addresses\": [\n    \"192.168.56.116\",\n    \"tp2.greenhouse.com\"\n  ],\n  \"deviceName\": \"thermometer2\"\n}\n</code></pre> <p>The service operation responses with the status code <code>200</code> if called successfully and the system entity is already existing or <code>201</code> if the entity was newly created. The response also contains a SystemRegistrationResponse JSON encoded body.</p> <pre><code>{\n  \"name\": \"temperature-provider2\",\n  \"metadata\": {\n    \"scales\": [\n      \"Kelvin\",\n      \"Celsius\"\n    ],\n    \"location\": {\n      \"side\": \"North\",\n      \"block\": 2\n    },\n    \"indoor\": true\n  },\n  \"version\": \"1.0.0\",\n  \"addresses\": [\n    {\n      \"type\": \"IPV4\",\n      \"address\": \"192.168.56.116\"\n    },\n    {\n      \"type\": \"HOSTNAME\",\n      \"address\": \"tp2.greenhouse.com\"\n    }\n  ],\n  \"device\": {\n    \"name\": \"thermometer2\",\n    \"metadata\": {\n      \"scales\": [\n        \"Kelvin\",\n        \"Celsius\"\n      ],\n      \"max-temperature\": {\n        \"Kelvin\": 310,\n        \"Celsius\": 40\n      },\n      \"min-temperature\": {\n        \"Kelvin\": 260,\n        \"Celsius\": -10\n      }\n    },\n    \"addresses\": [\n      {\n        \"type\": \"MAC\",\n        \"address\": \"81:ef:1a:44:7a:f5\"\n      }\n    ],\n    \"createdAt\": \"2024-11-04T01:53:02Z\",\n    \"updatedAt\": \"2024-11-04T01:53:02Z\"\n  },\n  \"createdAt\": \"2024-11-08T10:21:10.950683800Z\",\n  \"updatedAt\": \"2024-11-08T10:21:10.950683800Z\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Device names do not exist: thermometer2\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceregistry/system-discovery/register\"\n}\n</code></pre>"},{"location":"api/serviceregistry/system-discovery-generic-http/#lookup","title":"lookup","text":"<p>The service operation request requires an authorization bearer header. The URI can contain an optional query parameter with the key \"verbose\" and a Boolean value. If verbose is true, detailed device information also returns (only if the provider supports it). The request may optionally include a SystemLookupRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/system-discovery/lookup?verbose=&lt;verbose-value&gt; HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"systemNames\": [\n  ],\n  \"addresses\": [\n  ],\n  \"addressType\": \"\",\n  \"metadataRequirementList\": [\n  ],\n  \"versions\": [\n  ],\n  \"deviceNames\": [\n    \"thermometer2\"\n  ]\n}\n</code></pre> <p>The service operation responses with the status code <code>200</code> if called successfully and with a SystemLookupResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"name\": \"temperature-provider1\",\n      \"metadata\": {\n        \"scales\": [\n          \"Kelvin\",\n          \"Celsius\"\n        ],\n        \"location\": {\n          \"side\": \"North\",\n          \"block\": 2\n        },\n        \"indoor\": true\n      },\n      \"version\": \"1.0.0\",\n      \"addresses\": [\n        {\n          \"type\": \"IPV4\",\n          \"address\": \"192.168.56.116\"\n        },\n        {\n          \"type\": \"HOSTNAME\",\n          \"address\": \"tp2.greenhouse.com\"\n        }\n      ],\n      \"device\": {\n        \"name\": \"thermometer2\"\n      },\n      \"createdAt\": \"2025-02-27T18:32:45Z\",\n      \"updatedAt\": \"2025-02-27T18:32:45Z\"\n    }\n  ],\n  \"count\": 1\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> Error if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Invalid address type: IPV5\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceregistry/system-discovery/lookup\"\n}\n</code></pre>"},{"location":"api/serviceregistry/system-discovery-generic-http/#revoke","title":"revoke","text":"<p>The service operation request only requires an authorization bearer header. The name of the system to be revoked will be identified during authentication.</p> <pre><code>DELETE /serviceregistry/system-discovery/revoke HTTP1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n</code></pre> <p>The service operation responses with the status code <code>200</code> if called successfully and an existing system entity was removed and <code>204</code> if no matching entity was found. The success response does not contain any response body.</p> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"No authorization header has been provided\",\n  \"errorCode\": 401,\n  \"exceptionType\": \"AUTH\"\n}\n</code></pre>"},{"location":"api/serviceregistry/system-discovery-generic-mqtt/","title":"system-discovery GENERIC-MQTT","text":""},{"location":"api/serviceregistry/system-discovery-generic-mqtt/#overview","title":"Overview","text":"<p>TODO</p>"},{"location":"api/serviceregistry/system-discovery-generic-mqtt/#interface-description","title":"Interface Description","text":"<p>TODO</p>"},{"location":"api/serviceregistry/system-discovery-generic-mqtt/#register","title":"register","text":"<p>TODO</p>"},{"location":"api/serviceregistry/system-discovery-generic-mqtt/#lookup","title":"lookup","text":"<p>TODO</p>"},{"location":"api/serviceregistry/system-discovery-generic-mqtt/#revoke","title":"revoke","text":"<p>TODO</p>"},{"location":"api/serviceregistry/system-discovery-generic-mqtt/#data-models","title":"Data Models","text":"<p>TODO</p>"},{"location":"core_systems/service_authorization/","title":"Service Authorization","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum congue neque, in lobortis felis mattis et. Sed tincidunt non urna eleifend posuere. Sed consequat nulla felis, non ultricies massa blandit eu. Nam in eros ac nunc viverra accumsan eu id risus.</p>"},{"location":"core_systems/service_authorization/#services","title":"Services","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum congue neque, in lobortis felis mattis et. Sed tincidunt non urna eleifend posuere. Sed consequat nulla felis, non ultricies massa blandit eu. Nam in eros ac nunc viverra accumsan eu id risus.</p>"},{"location":"core_systems/service_authorization/#configuration","title":"Configuration","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum congue neque, in lobortis felis mattis et. Sed tincidunt non urna eleifend posuere. Sed consequat nulla felis, non ultricies massa blandit eu. Nam in eros ac nunc viverra accumsan eu id risus.</p>"},{"location":"core_systems/service_orchestration/","title":"Service Orchestration","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum congue neque, in lobortis felis mattis et. Sed tincidunt non urna eleifend posuere. Sed consequat nulla felis, non ultricies massa blandit eu. Nam in eros ac nunc viverra accumsan eu id risus.</p>"},{"location":"core_systems/service_orchestration/#services","title":"Services","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum congue neque, in lobortis felis mattis et. Sed tincidunt non urna eleifend posuere. Sed consequat nulla felis, non ultricies massa blandit eu. Nam in eros ac nunc viverra accumsan eu id risus.</p>"},{"location":"core_systems/service_orchestration/#configuration","title":"Configuration","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum congue neque, in lobortis felis mattis et. Sed tincidunt non urna eleifend posuere. Sed consequat nulla felis, non ultricies massa blandit eu. Nam in eros ac nunc viverra accumsan eu id risus.</p>"},{"location":"core_systems/service_registry/","title":"Service Registry","text":"<p>This core system provides the data storage functionality for the information related to the currently and actively offered services within the Local Cloud. It also stores information about the systems that offer and/or can use the previously mentioned services, and optionally data about the devices on which those systems are running.</p> <p>Learn more:  Abstract System Description (SysD)</p>"},{"location":"core_systems/service_registry/#services","title":"Services","text":""},{"location":"core_systems/service_registry/#service-discovery","title":"service-discovery","text":"<p>The purpose of this service is to lookup, register and revoke provided services. The service is offered for both application and core/support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic-http (IDD) | generic-https (IDD) generic-mqtt (IDD) | generic-mqtts (IDD)  since: v5.0.0 </p> <p>register</p> <p>This service operation adds new service instance to the Local Cloud.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p> <p>revoke</p> <p>This service operation removes a service instance from the Local Cloud.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p> <p>lookup</p> <p>This service operation lists the service instances that match the filtering requirements.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p>"},{"location":"core_systems/service_registry/#system-discovery","title":"system-discovery","text":"<p>The purpose of this service is to lookup, register and revoke systems that are part of (or want to be part of) the Local Cloud. The service is offered for both application and core/support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic-http (IDD) | generic-https (IDD) generic-mqtt (IDD) | generic-mqtts (IDD)  since: v5.0.0 </p> <p>register</p> <p>This service operation adds new system to the Local Cloud.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p> <p>revoke</p> <p>This service operation removes a system from the Local Cloud.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p> <p>lookup</p> <p>This service operation lists the systems that match the filtering requirements.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p>"},{"location":"core_systems/service_registry/#device-discovery","title":"device-discovery","text":"<p>The purpose of this service is to lookup, register and revoke devices on which the Local Cloud\u2019s systems can run. The service is offered for both application and core/support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic-http (IDD) | generic-https (IDD) generic-mqtt (IDD) | generic-mqtts (IDD)  since: v5.0.0 </p> <p>register</p> <p>This service operation adds a new device to the Local Cloud.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p> <p>revoke</p> <p>This service operation removes a device from the Local Cloud.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p> <p>lookup</p> <p>This service operation lists the devices that match the filtering requirements.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p>"},{"location":"core_systems/service_registry/#service-registry-management","title":"service-registry-management","text":"<p>Its purpose is to manage service definitions, service instances, interfaces, systems and devices in bulk. The different operations provide querying, registering, updating and unregistering functionalities. The service is offered for administrative support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic-http (IDD) | generic-https (IDD) generic-mqtt (IDD) | generic-mqtts (IDD)  since: v5.0.0 </p> <p>TODO</p>"},{"location":"core_systems/service_registry/#configuration","title":"Configuration","text":"<p>The system configuration properties can be found in the <code>application.properties</code> file located at <code>/src/main/resources</code> folder.</p> <p>Note: During the build process this file is going to be built into the executable JAR, but also going to be copied next to the JAR file. Any modification in the configuration file located next to the executable JAR file will override the built in configuration property value.</p>"},{"location":"core_systems/service_registry/#general-parameters","title":"General parameters","text":"<p> server.address</p> <p>IP address of the server.</p> <p> server.port</p> <p>Port number of the server</p>"},{"location":"core_systems/service_registry/#database-parameters","title":"Database parameters","text":"<p> spring.datasource.url</p> <p>URL to the database.</p> <p> spring.datasource.username</p> <p>Username to the database.</p> <p> spring.datasource.password</p> <p>Password to the database.</p> <p> spring.datasource.driver-class-name</p> <p>The driver provides the connection to the database and implements the protocol for transferring the query and result between client and database.</p> <p> spring.jpa.show-sql</p> <p>Set to true in order to log out the SQL queries.</p> <p> spring.jpa.properties.hibernate.format sql</p> <p>Set to true to log out SQL queries in pretty format. (Effective only when 'spring.jpa.show-sql' is 'true')</p> <p> spring.jpa.hibernate.ddl-auto</p> <p>Auto initialization of database tables. Value must be always 'none'.</p>"},{"location":"core_systems/service_registry/#custom-parameters","title":"Custom parameters","text":"<p>TODO</p>"},{"location":"core_systems/service_registry/#logging-configuration","title":"Logging configuration","text":"<p>The logging configuration properties can be found in the <code>log4j2.xml</code> file located at <code>src/main/resources</code> folder.</p> <p>Note: During the build process this file is going to be built into the executable JAR, but it is also possible to override it by an external file. For that use the following command when starting the system:</p> <pre><code>java -jar arrowhead-serviceregistry-x.x.x\n     -Dlog4j.configurationFile=path-to-external-file\n</code></pre> <p> JDBC_LEVEL</p> <p>Set this to change the level of log messages in the database. Levels: ALL, TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF.</p> <p> CONSOLE FILE LEVEL</p> <p>Set this to change the level of log messages in consol and the log file. Levels: ALL, TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF.</p> <p> LOG_DIR</p> <p>Set this to change the directory of log files.</p>"},{"location":"core_systems/service_registry/#changelog","title":"Changelog","text":""},{"location":"core_systems/service_registry/#v500","title":"v5.0.0","text":"<ul> <li>Initial 5th generation release.</li> </ul>"},{"location":"core_systems/system_authentication/","title":"System Authentication","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum congue neque, in lobortis felis mattis et. Sed tincidunt non urna eleifend posuere. Sed consequat nulla felis, non ultricies massa blandit eu. Nam in eros ac nunc viverra accumsan eu id risus.</p>"},{"location":"core_systems/system_authentication/#services","title":"Services","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum congue neque, in lobortis felis mattis et. Sed tincidunt non urna eleifend posuere. Sed consequat nulla felis, non ultricies massa blandit eu. Nam in eros ac nunc viverra accumsan eu id risus.</p>"},{"location":"core_systems/system_authentication/#configuration","title":"Configuration","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum congue neque, in lobortis felis mattis et. Sed tincidunt non urna eleifend posuere. Sed consequat nulla felis, non ultricies massa blandit eu. Nam in eros ac nunc viverra accumsan eu id risus.</p>"},{"location":"help/certificate-profiles/","title":"X.509 Certificate Profiles","text":"<p>X.509 is a certificate standard produced by the International Telecommunication Union - Telecommunication Standardization Sector (ITU-T) and is famously used by the TLS and DTLS protocols. </p>"},{"location":"help/certificate-profiles/#profile-hierarchy","title":"Profile Hierarchy","text":"<p>In brief, an X.509 certificate represents the identity of its owner. It records required inputs to a secure key exchange algorithm, as well as how the identity it represents is endorsed by a hierarchy of issuers.</p> <p>There are nine arrowhead certificate profiles defined and depicted in the following diagram:</p> <p></p> <p>The certificates must contain their profile identifiers as a Distinguished Name Qualifier (DN).</p> Profile Identifier Master <code>ma</code> Gate <code>ga</code> Organization <code>or</code> Local Cloud <code>lo</code> On-Boarding <code>on</code> Broker <code>br</code> Device <code>de</code> System <code>sy</code> Operator <code>op</code>"},{"location":"help/certificate-profiles/#master-profile","title":"Master Profile","text":"<p>A Master certificate exists to establish trust between organizations that may want to interconnect their Arrowhead systems. It does this by issuing Organization and Gate certificates. The former enables organizations to set up their own certificate hierarchies while sharing a common CA with other organizations. The latter kind enables all those organizations to trust a special kind of relay system, which facilitates negotiating connections between organizations.</p> <p>Issuer</p> <p>May be self-signed or issued by an RFC 5280-compliant CA. </p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>arrowhead.eu</code> DN Qualifier (DN) <code>ma</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Omit field if self-signed. Subject Key Identifier No Hash of subject public key. Basic Constraints Yes <code>cA: true</code>, <code>pathLenConstraint: 2</code> Key Usage Yes Bits <code>keyCertSign</code> and <code>cRLSign</code> must be set."},{"location":"help/certificate-profiles/#gate-profile","title":"Gate Profile","text":"<p>A Gate certificate is associated with a message relay or bus that exists to guarantee delivery of messages between the local clouds of distinct organizations. Its existence means that such messages can be sent over a secure transport.</p> <p>Issuer</p> <p>Must be issued by a Master certificate.</p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>&lt;relay-name&gt;.arrowhead.eu</code> DN Qualifier (DN) <code>ga</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Basic Constraints Yes <code>cA: false</code> Key Usage Yes Bits <code>digitalSignature</code> and <code>keyEncipherment</code> must be set. Extended Key Usage No Purposes <code>serverAuth</code> and <code>clientAuth</code> must be specified. Subject Alternative Name No At least one IP address, DNS name or other identifier through which the system can be reached."},{"location":"help/certificate-profiles/#organization-profile","title":"Organization Profile","text":"<p>An Organization certificate is maintained by a single organization, allowing it to manage the certificates of their own local clouds.</p> <p>Issuer</p> <p>Must be issued by a Master certificate.</p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>&lt;organization-name&gt;.arrowhead.eu</code> DN Qualifier (DN) <code>or</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Subject Key Identifier No Hash of subject public key. Basic Constraints Yes <code>cA: true</code>, <code>pathLenConstraint: 1</code> Key Usage Yes Bits <code>keyCertSign</code> and <code>cRLSign</code> must be set. <p>If the certificate will be used to automatically respond to CSRs (Certificate Signing Request) via a network application interface, the following must also be present:</p> Extension Critical Value Key Usage Yes Bits <code>digitalSignature</code> and <code>keyEncipherment</code> must be set in addititon. Extended Key Usage No Purposes <code>serverAuth</code> and <code>clientAuth</code> must be specified. Subject Alternative Name No At least one IP address, DNS name or other identifier to which CSRs can be sent."},{"location":"help/certificate-profiles/#local-cloud-profile","title":"Local Cloud Profile","text":"<p>A Local Cloud certificate is maintained by a single local cloud, enabling it to issue end entity certificates for on-boarding and on-boarded devices, as well as for systems and operators.</p> <p>Issuer</p> <p>Must be issued by an Organization certificate.</p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>&lt;cloud-name&gt;.&lt;organization-name&gt;.arrowhead.eu</code> DN Qualifier (DN) <code>lo</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Subject Key Identifier No Hash of subject public key. Basic Constraints Yes <code>cA: true</code>, <code>pathLenConstraint: 0</code> Key Usage Yes Bits <code>keyCertSign</code> and <code>cRLSign</code> must be set. <p>If the certificate will be used to automatically respond to CSRs (Certificate Signing Request) via a network application interface, the following must also be present:</p> Extension Critical Value Key Usage Yes Bits <code>digitalSignature</code> and <code>keyEncipherment</code> must be set in addititon. Extended Key Usage No Purposes <code>serverAuth</code> and <code>clientAuth</code> must be specified. Subject Alternative Name No At least one IP address, DNS name or other identifier to which CSRs can be sent."},{"location":"help/certificate-profiles/#on-boarding-profile","title":"On-Boarding Profile","text":"<p>An On-Boarding certificate allows for a device in an Arrowhead local cloud to request a new device certificate. It is used for both, either to provide new devices and/or to facilitate renewal of certificates as they are about to expire. Certificates adhering to this profile must only be provided to devices known or assumed to be trustworthy.</p> <p>Issuer</p> <p>Must be issued by a Local Cloud certificate.</p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>&lt;on-boarding-system-name&gt;.&lt;cloud-name&gt;.&lt;organization-name&gt;.arrowhead.eu</code> DN Qualifier (DN) <code>on</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Basic Constraints Yes <code>cA: false</code> Key Usage Yes Bits <code>digitalSignature</code> and <code>keyEncipherment</code> must be set. Extended Key Usage No Purposes <code>serverAuth</code> and <code>clientAuth</code> must be specified. Subject Alternative Name No At least one IP address, DNS name or other identifier through which the owning device can be reached."},{"location":"help/certificate-profiles/#device-profile","title":"Device Profile","text":"<p>A Device certificate allows for a device in an Arrowhead local cloud to request new system certificates. One system certificate is required for each system a given device intends to run. Certificates adhering to this profile must only be provided to devices known or assumed to be trustworthy.</p> <p>Issuer</p> <p>Must be issued by a Local Cloud certificate.</p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>&lt;device-name&gt;.&lt;cloud-name&gt;.&lt;organization-name&gt;.arrowhead.eu</code> DN Qualifier (DN) <code>de</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Basic Constraints Yes <code>cA: false</code> Key Usage Yes Bits <code>digitalSignature</code> and <code>keyEncipherment</code> must be set. Extended Key Usage No Purposes <code>serverAuth</code> and <code>clientAuth</code> must be specified. Subject Alternative Name No At least one IP address, DNS name or other identifier through which the device can be reached."},{"location":"help/certificate-profiles/#broker-profile","title":"Broker Profile","text":"<p>A Broker certificate is associated with a message broker that exists to guarantee delivery of messages between the systems within a Local Cloud when secured publish-subscribe communication strategy is required (like MQTT protocol).</p> <p>Issuer</p> <p>Must be issued by a Local Cloud certificate.</p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>&lt;broker-name&gt;.&lt;cloud-name&gt;.&lt;organization-name&gt;.arrowhead.eu</code> DN Qualifier (DN) <code>br</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Basic Constraints Yes <code>cA: false</code> Key Usage Yes Bits <code>digitalSignature</code> and <code>keyEncipherment</code> must be set. Extended Key Usage No Purposes <code>serverAuth</code> and <code>clientAuth</code> must be specified. Subject Alternative Name No At least one IP address, DNS name or other identifier through which the system can be reached."},{"location":"help/certificate-profiles/#system-profile","title":"System Profile","text":"<p>A System certificate allows for a device in an Arrowhead local cloud to provide the services associated with a particular system, and/or to act as a service consumer.</p> <p>Issuer</p> <p>Must be issued by a Local Cloud certificate.</p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>&lt;system-name&gt;.&lt;cloud-name&gt;.&lt;organization-name&gt;.arrowhead.eu</code> DN Qualifier (DN) <code>sy</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Basic Constraints Yes <code>cA: false</code> Key Usage Yes Bits <code>digitalSignature</code> and <code>keyEncipherment</code> must be set. Extended Key Usage No Purposes <code>serverAuth</code> and <code>clientAuth</code> must be specified. Subject Alternative Name No At least one IP address, DNS name or other identifier through which the system can be reached."},{"location":"help/certificate-profiles/#operator-profile","title":"Operator Profile","text":"<p>An Operator certificate allows for a human or computer operator to administer a particular Arrowhead Local Cloud.</p> <p>Issuer</p> <p>Must be issued by a Local Cloud certificate.</p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>&lt;system-name&gt;.&lt;cloud-name&gt;.&lt;organization-name&gt;.arrowhead.eu</code> DN Qualifier (DN) <code>sy</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Basic Constraints Yes <code>cA: false</code> Key Usage Yes Bits <code>digitalSignature</code> and <code>keyEncipherment</code> must be set. Extended Key Usage No Purposes <code>serverAuth</code> and <code>clientAuth</code> must be specified. Subject Alternative Name No At least one IP address, DNS name or other identifier through which the system can be reached."},{"location":"help/tutorials/create-certificates/","title":"Create Certificates","text":"<p>TODO</p>"},{"location":"help/tutorials/mosquitto-mqtt-broker/","title":"Mosquitto MQTT Broker","text":"<p>Eclipse Mosquitto is an open source (EPL/EDL licensed) message broker that implements the MQTT protocol and is a good choice to use in an Arrowhead Local Cloud when MQTT is required.</p>"},{"location":"help/tutorials/mosquitto-mqtt-broker/#install","title":"Install","text":"<p>For the installation possibilities please consult with their official site.</p>"},{"location":"help/tutorials/mosquitto-mqtt-broker/#access-control","title":"Access Control","text":"<p>In a properly secured Local Cloud, when MQTT is required, the access to the broker and topics should also be controlled. Connecting clients should be authenticated and reading/writing of topics for service providing should be limited to the actual service provider clients.</p>"},{"location":"help/tutorials/mosquitto-mqtt-broker/#client-authentication","title":"Client authentication","text":"<p>In order to set up client authentication a \"password file\" has to be created which contains user name and password combinations for the clients. </p> <ul> <li>It is recommended that Arrowhead Core Systems have unique credentials.</li> <li>It is recommended that service providing application systems have unique credentials.</li> <li>It is acceptable that application systems with service consumption purpose only, share a common credential.</li> </ul> <p>You can manage the users by using the <code>mosquitto_passwd</code> command (which comes with the broker installation).</p> <p>Create the password file with the first user:</p> <pre><code>mosquitto_passwd -c /etc/mosquitto/users &lt;username&gt;\n</code></pre> <p>You will be prompted to set a password and the <code>users</code> file will be created. Only the hashed version of the password is stored in the file.</p> <p>Add additional users to the file (without overwriting it):</p> <pre><code>mosquitto_passwd /etc/mosquitto/users &lt;username&gt;\n</code></pre> <p>Modify the broker configuration:</p> <p>The Mosquitto configuration file is usually located at <code>/etc/mosquitto/mosquitto.conf</code>. To enable password authentication add the following lines:</p> <pre><code>allow_anonymous false\npassword_file /etc/mosquitto/users\n</code></pre> <p>After making changes, always restart the broker!</p>"},{"location":"help/tutorials/mosquitto-mqtt-broker/#topic-read-control","title":"Topic read control","text":"<p>Having read or write access control on the topics used for service providing ensures that only the actual service providers are allowed</p> <ul> <li>to write to a publish kind service topic, and</li> <li>to read a request-response kind service topic.</li> </ul> <p>Create an access control file</p> <p>Create an <code>accesctrl</code> file under the <code>/etc/mosquitto</code> folder with a similar content:</p> <pre><code># Arrowhead Core Systems\n\nuser serviceregistry\ntopic read arrowhead/serviceregistry/system-discovery\ntopic read arrowhead/serviceregistry/service-discovery\n\n...\n\n# Publish kind service topics\n\nuser &lt;username_a&gt;\ntopic write &lt;its/specific/service/topic/&gt;\n\nuser &lt;username_b&gt;\ntopic write &lt;its/specific/service/topic/&gt;\n\n...\n\n# Request-response kind service topics\n\nuser &lt;username_c&gt;\ntopic read &lt;its/specific/service/topic/&gt;\n\nuser &lt;username_d&gt;\ntopic read &lt;its/specific/service/topic/&gt;\n\n...\n\n</code></pre> <p>Modify the broker configuration:</p> <p>The Mosquitto configuration file is usually located at <code>/etc/mosquitto/mosquitto.conf</code>. To enable topic access control add the following line:</p> <pre><code>acl_file /etc/mosquitto/accesctrl\n</code></pre> <p>After making changes, always restart the broker!</p>"},{"location":"help/tutorials/mosquitto-mqtt-broker/#ssl-with-arrowhead-certificate","title":"SSL with Arrowhead Certificate","text":"<p>Using Arrowhead compliant broker certificate makes your MQTT Broker part of your Local Cloud when secure network communication (SSL) is required. However the certificates in the default <code>PKCS#12</code> format (<code>broker.p12</code> file for example) can't be directly utilized by the Eclipse Mosquitto. It requires a separated CA certificate file, a public certificate file and a private key file what you can extract from your <code>PKCS#12</code> file with the help of the following openssl library commands:</p> <p>Extract the CA certificate:</p> <pre><code>openssl pkcs12 -in your-broker-certificate.p12 -cacerts -nokeys -out ca.crt\n</code></pre> <p>Now you can configure the <code>ca.crt</code> file as your broker's CA certificate.</p> <p>Extract the public certificate:</p> <pre><code>openssl pkcs12 -in your-broker-certificate.p12 -clcerts -nokeys -out public.crt\n</code></pre> <p>Now you can configure the <code>public.crt</code> file as your broker's public certificate.</p> <p>Extract the private key:</p> <pre><code>openssl pkcs12 -in your-broker-certificate.p12 -nocerts -out private.key\n</code></pre> <ul> <li>You may be prompted to enter the password for the <code>.p12</code> file.</li> <li>You will be prompted to add a passphrase to the extracted key.</li> </ul> <p>Now you can configure the <code>private.key</code> file as your broker's private key.</p> <p>Mosquitto will prompt for the private key password on startup. To avoid this (in secure environments), re-export the private key without a password:</p> <pre><code>openssl rsa -in private.key -out private.key\n</code></pre> <p>At the end of this process your Mosquitto configuration file should contain something similar:</p> <pre><code>cafile /path/to/ca.crt\ncertfile /path/to/public.crt\nkeyfile /path/to/private.key\n</code></pre> <p>After making changes, always restart the broker!</p>"},{"location":"help/tutorials/serviceregistry-http-demo/","title":"Service Registry HTTP Demo","text":""},{"location":"help/tutorials/serviceregistry-http-demo/#recap","title":"Recap","text":"<p>In this demo, we will demonstrate through a concrete example how a system should use the Service Registry endpoints.</p> <p></p> <p>Let's say, we have a greenhouse. Inside the greenhouse, there are plantations  divided into blocks, and close to the blocks, thermometers are placed. We can monitor the temperature of the blocks, using the systems that run on the thermometers. If the temperature is too extreme, the systems may send a warning to our office.</p> <p>There are two types of thermometers: indoor and outdoor thermometers, so we can even monitor the temperature outside the greenhouse.</p> <p></p> <p>In our office, there are different weather displayers that can show various data about the weather, such as wind or temperature. The temperature data measured by the thermometers in the greenhouse is sent to these weather displayers. We also have alarms, this way we are immediately informed about extreme temperatures.</p> <p>Thermometers can provide information on temperature in Celsius, Fahrenheit or Kelvin scales, but not all thermometers are capable of sending data at all scales.</p> <p>The concrete entities used in our example can be mapped to Service Registry entities as follows:</p> <p></p> <ul> <li>Devices: thermometers, weather displayers and alarms</li> <li>Systems: temperature providers running on the thermometers, temperature consumers running on the weather displayers, and alert consumers running on the alarms.</li> <li>Services: Fahrenheit info, Kelvin info, Celsius info, and alert service, provided by the temperature providers and consumed by the temperature consumers and the alert consumers</li> </ul> <p>We will demonstrate the usage of the endpoints via two examples: example 1 is about a provider system, and example 2 is about a consumer system.</p>"},{"location":"help/tutorials/serviceregistry-http-demo/#example-1-provider","title":"Example 1: Provider","text":"<p>In the following, we'll see how:</p> <ul> <li>a system called temperature-provider2, </li> <li>running on the device named thermometer2,</li> <li>publishes its services: Kelvin-info, Celsius-info and alert-service</li> </ul> <p>after registering itself into the Local Cloud.</p>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-1-authentication","title":"Step 1: Authentication","text":"<p>First of all, the system should perform some kind of authentication. In Arrowhead 5, there are three ways for a system to authenticate itself: involving an Authentication Core System, using X.509 Certicifates, or telling who they are by themselves. In this example, the last one will be used, which is called self-declared authentication.</p> <p>To perform this type of authentication, the system must provide an authentication header for each request. This should consist of the SYSTEM// prefix, followed by the name of the system. </p> <p>In our example, the authorization header will look like this:</p> <pre><code>-H 'Authorization: Bearer SYSTEM//temperature-provider2'\n</code></pre>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-2-lookup-devices","title":"Step 2: Lookup Devices","text":"<p>During registration, the system can specify which device it is running on. In this case, our device is called thermometer2. Specifying the device is optional, but let's say, that in our example it is relevant to the operation of temperature-provider-2. Therefore, the system first looks up if there is a device with name thermometer2 in the Local Cloud, to make sure that the device it is running on is already registered. (Otherwise you must register the device first, as shown in example 2.)</p> <p>The request looks like this:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/device-discovery/lookup' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//temperature-provider2' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"deviceNames\": [\n    \"thermometer2\"\n  ],\n  \"addresses\": [\n  ],\n  \"addressType\": \"\",\n  \"metadataRequirementList\": [\n  ]\n}'\n</code></pre> <p>Which leads to the following response from the Service Registry:</p> <pre><code>{\n  \"entries\": [\n    {\n      \"name\": \"thermometer2\",\n      \"metadata\": {\n        \"scales\": [\n          \"Kelvin\",\n          \"Celsius\"\n        ],\n        \"max-temperature\": {\n          \"Kelvin\": 310,\n          \"Celsius\": 40\n        },\n        \"min-temperature\": {\n          \"Kelvin\": 260,\n          \"Celsius\": -10\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"81:ef:1a:44:7a:f5\"\n        }\n      ],\n      \"createdAt\": \"2024-11-04T01:53:02Z\",\n      \"updatedAt\": \"2024-11-04T01:53:02Z\"\n    }\n  ],\n  \"count\": 1\n}\n</code></pre> <p>Since we have an existing entity back, thermometer2 is indeed a registered device.</p>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-3-register-system","title":"Step 3: Register System","text":"<p>Now we can perform the registration operation of our temperature-provider2 system.</p> <p>To register, we need to provide the following information about the system:</p> <ul> <li>metadata: It's totally up to us what we put into it. For temperature-provider2, we want to make sure, that it contains a list about the temperature scales that the system can manage (Kelvin and Celsius), a location in the greenhouse from which the system's device measures the temperature (North side, 2. block), and the type of the thermometer (indoor).</li> <li>version: Since there was no prior version of this system, we can leave this field empty. The Service Registry will initialize this value to a default, which is 1.0.0.</li> <li>addresses: This is typically an IP address or a hostname for the system. In case of the temperature-provider2, we want to provide both. For IP address, we are using 192.168.56.116, and the hostname is tp2.greenhouse.com.</li> <li>device name: This can be left blank, but we will set it to the name of our device: thermometer2.</li> </ul> <p>It is not necessary to specify the system name explicitly, because the Service Registry extracts it from the authorization header.</p> <p>Based on the above, the request looks like this:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/system-discovery/register' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//temperature-provider2' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"metadata\": {\n    \"scales\": [\"Kelvin\", \"Celsius\"],\n    \"location\": {\"side\": \"North\", \"block\": 2},\n    \"indoor\": true\n  },\n  \"version\": \"\",\n  \"addresses\": [\n    \"192.168.56.116\",\n    \"tp2.greenhouse.com\"\n  ],\n  \"deviceName\": \"thermometer2\"\n}'\n</code></pre> <p>We receive the following response:</p> <pre><code>{\n  \"name\": \"temperature-provider2\",\n  \"metadata\": {\n    \"scales\": [\n      \"Kelvin\",\n      \"Celsius\"\n    ],\n    \"location\": {\n      \"side\": \"North\",\n      \"block\": 2\n    },\n    \"indoor\": true\n  },\n  \"version\": \"1.0.0\",\n  \"addresses\": [\n    {\n      \"type\": \"IPV4\",\n      \"address\": \"192.168.56.116\"\n    },\n    {\n      \"type\": \"HOSTNAME\",\n      \"address\": \"tp2.greenhouse.com\"\n    }\n  ],\n  \"device\": {\n    \"name\": \"thermometer2\",\n    \"metadata\": {\n      \"scales\": [\n        \"Kelvin\",\n        \"Celsius\"\n      ],\n      \"max-temperature\": {\n        \"Kelvin\": 310,\n        \"Celsius\": 40\n      },\n      \"min-temperature\": {\n        \"Kelvin\": 260,\n        \"Celsius\": -10\n      }\n    },\n    \"addresses\": [\n      {\n        \"type\": \"MAC\",\n        \"address\": \"81:ef:1a:44:7a:f5\"\n      }\n    ],\n    \"createdAt\": \"2024-11-04T01:53:02Z\",\n    \"updatedAt\": \"2024-11-04T01:53:02Z\"\n  },\n  \"createdAt\": \"2024-11-08T10:21:10.950683800Z\",\n  \"updatedAt\": \"2024-11-08T10:21:10.950683800Z\"\n}\n</code></pre>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-4-register-service-instances","title":"Step 4: Register Service Instances","text":"<p>The temperature-provider2 system that we have just registered provides three services in the Local Cloud:</p> <ul> <li>Kelvin info: provides temperature information using the Kelvin scale,</li> <li>Celsius info: provides temperature information using the Celsius scale,</li> <li>alert service: sends an alert if the temperature is extreme (by default, these thresholds are 10 and 25 Celsius, but the consumer can overwrite them).</li> </ul> <p>We have to register these services one by one.</p> <p>1. Kelvin info:  We have to provide the following information:</p> <ul> <li>service definition name: In this example, we use kelvin-info, which is already an existing service definition stored in the Local Cloud. You can use a non-existing service definition as well, because in that case, the registration process will create it.</li> <li>version: We will use the default version, so we can leave this field blank.</li> <li>expires at: This is a timestamp in the future, when the service is no longer funtioning. For Kelvin info, we set this to 01. 01. 2030. </li> <li>metadata: This can be customised depending on the service. For temperature information, we define the margin of error, which is 0.5 degree.</li> <li>interfaces: All the services use HTTP protocol, so we will go with the template named generic-http, that already exists in the Local Cloud. Note that in our case, the service discovery interface policy is set to restricted, which means that only already existing interface templates can be used. If you set this to extendable or open, you can use non-existent interface templates, and they will be created as well. The interface provided by the Kelvin info service is the following:<ul> <li>GET tp2.greenhouse.com:8080/kelvin/query</li> </ul> </li> </ul> <p>Based on these specifications, the request looks like this:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/service-discovery/register' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//temperature-provider2' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"serviceDefinitionName\": \"kelvin-info\",\n  \"version\": \"\",\n  \"expiresAt\": \"2030-01-01T00:00:00Z\",\n  \"metadata\": {\n    \"margin-of-error\": 0.5\n  },\n  \"interfaces\": [\n    {\n      \"templateName\": \"generic-http\",\n      \"protocol\": \"http\",\n      \"policy\": \"NONE\",\n      \"properties\": {\n        \"accessAddresses\": [\"192.168.56.116\", \"tp2.greenhouse.com\"],\n        \"accessPort\": 8080,\n        \"basePath\": \"/kelvin\",\n        \"operations\": {\"query-temperature\": { \"method\": \"GET\", \"path\": \"/query\"} }\n      }\n    }\n  ]\n}'\n</code></pre> <p>After successful operation, we will receive the JSON object representation of the registered service:</p> <pre><code>{\n  \"instanceId\": \"temperature-provider2::kelvin-info::1.0.0\",\n  \"provider\": {\n    \"name\": \"temperature-provider2\",\n    \"metadata\": {\n      \"scales\": [\n        \"Kelvin\",\n        \"Celsius\"\n      ],\n      \"location\": {\n        \"side\": \"North\",\n        \"block\": 2\n      },\n      \"indoor\": true\n    },\n    \"version\": \"1.0.0\",\n    \"addresses\": [\n      {\n        \"type\": \"IPV4\",\n        \"address\": \"192.168.56.116\"\n      },\n      {\n        \"type\": \"HOSTNAME\",\n        \"address\": \"tp2.greenhouse.com\"\n      }\n    ],\n    \"device\": {\n      \"name\": \"thermometer2\",\n      \"metadata\": {\n        \"scales\": [\n          \"Kelvin\",\n          \"Celsius\"\n        ],\n        \"max-temperature\": {\n          \"Kelvin\": 310,\n          \"Celsius\": 40\n        },\n        \"min-temperature\": {\n          \"Kelvin\": 260,\n          \"Celsius\": -10\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"81:ef:1a:44:7a:f5\"\n        }\n      ],\n      \"createdAt\": \"2024-11-04T01:53:02Z\",\n      \"updatedAt\": \"2024-11-04T01:53:02Z\"\n    },\n    \"createdAt\": \"2024-11-08T10:21:11Z\",\n    \"updatedAt\": \"2024-11-08T10:21:11Z\"\n  },\n  \"serviceDefinition\": {\n    \"name\": \"kelvin-info\",\n    \"createdAt\": \"2024-11-08T11:24:43Z\",\n    \"updatedAt\": \"2024-11-08T11:24:43Z\"\n  },\n  \"version\": \"1.0.0\",\n  \"expiresAt\": \"2030-01-01T00:00:00Z\",\n  \"metadata\": {\n    \"margin-of-error\": 0.5\n  },\n  \"interfaces\": [\n    {\n      \"templateName\": \"generic-http\",\n      \"protocol\": \"http\",\n      \"policy\": \"NONE\",\n      \"properties\": {\n        \"accessAddresses\": [\n          \"192.168.56.116\",\n          \"tp2.greenhouse.com\"\n        ],\n        \"accessPort\": 8080,\n        \"operations\": {\n          \"query-temperature\": {\n            \"path\": \"/query\",\n            \"method\": \"GET\"\n          }\n        },\n        \"basePath\": \"/kelvin\"\n      }\n    }\n  ],\n  \"createdAt\": \"2024-11-19T12:00:07.959849300Z\",\n  \"updatedAt\": \"2024-11-19T12:00:07.959849300Z\"\n}\n</code></pre> <p>2. Celsius info:  The only difference with the Kelvin info is the service definition name (celsius-info) and the interface (GET tp2.greenhouse.com:8080/celsius/query). All the other registation data will remain the same.</p> <p>So the request will look like this:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/service-discovery/register' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//temperature-provider2' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"serviceDefinitionName\": \"celsius-info\",\n  \"version\": \"\",\n  \"expiresAt\": \"2030-01-01T00:00:00Z\",\n  \"metadata\": {\n    \"margin-of-error\": 0.5\n  },\n  \"interfaces\": [\n    {\n      \"templateName\": \"generic-http\",\n      \"protocol\": \"http\",\n      \"policy\": \"NONE\",\n      \"properties\": {\n        \"accessAddresses\": [\"192.168.56.116\", \"tp2.greenhouse.com\"],\n        \"accessPort\": 8080,\n        \"basePath\": \"/celsius\",\n        \"operations\": {\"query-temperature\": { \"method\": \"GET\", \"path\": \"/query\"} }\n      }\n    }\n  ]\n}'\n</code></pre> <p>The received response is the following:</p> <pre><code>{\n  \"instanceId\": \"temperature-provider2::celsius-info::1.0.0\",\n  \"provider\": {\n    \"name\": \"temperature-provider2\",\n    \"metadata\": {\n      \"scales\": [\n        \"Kelvin\",\n        \"Celsius\"\n      ],\n      \"location\": {\n        \"side\": \"North\",\n        \"block\": 2\n      },\n      \"indoor\": true\n    },\n    \"version\": \"1.0.0\",\n    \"addresses\": [\n      {\n        \"type\": \"IPV4\",\n        \"address\": \"192.168.56.116\"\n      },\n      {\n        \"type\": \"HOSTNAME\",\n        \"address\": \"tp2.greenhouse.com\"\n      }\n    ],\n    \"device\": {\n      \"name\": \"thermometer2\",\n      \"metadata\": {\n        \"scales\": [\n          \"Kelvin\",\n          \"Celsius\"\n        ],\n        \"max-temperature\": {\n          \"Kelvin\": 310,\n          \"Celsius\": 40\n        },\n        \"min-temperature\": {\n          \"Kelvin\": 260,\n          \"Celsius\": -10\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"81:ef:1a:44:7a:f5\"\n        }\n      ],\n      \"createdAt\": \"2024-11-04T01:53:02Z\",\n      \"updatedAt\": \"2024-11-04T01:53:02Z\"\n    },\n    \"createdAt\": \"2024-11-08T10:21:11Z\",\n    \"updatedAt\": \"2024-11-08T10:21:11Z\"\n  },\n  \"serviceDefinition\": {\n    \"name\": \"celsius-info\",\n    \"createdAt\": \"2024-10-24T21:48:36Z\",\n    \"updatedAt\": \"2024-10-24T21:48:36Z\"\n  },\n  \"version\": \"1.0.0\",\n  \"expiresAt\": \"2030-01-01T00:00:00Z\",\n  \"metadata\": {\n    \"margin-of-error\": 0.5\n  },\n  \"interfaces\": [\n    {\n      \"templateName\": \"generic-http\",\n      \"protocol\": \"http\",\n      \"policy\": \"NONE\",\n      \"properties\": {\n        \"accessAddresses\": [\n          \"192.168.56.116\",\n          \"tp2.greenhouse.com\"\n        ],\n        \"accessPort\": 8080,\n        \"operations\": {\n          \"query-temperature\": {\n            \"path\": \"/query\",\n            \"method\": \"GET\"\n          }\n        },\n        \"basePath\": \"/celsius\"\n      }\n    }\n  ],\n  \"createdAt\": \"2024-11-19T16:56:06.439181300Z\",\n  \"updatedAt\": \"2024-11-19T16:56:06.439181300Z\"\n}\n</code></pre> <p>3. Alert service: </p> <p>Our last service will be responsible for sending error messages. The registration data is the following:</p> <ul> <li>service definition name: In this case this is alert-service.</li> <li>version: We will use the default version.</li> <li>expires at: The alert service expires a bit earlier than the previous ones, so we set this to 01. 01. 2025.</li> <li>metadata: For alert service, the maximum possible delay is given, which is 15 sec.</li> <li>interfaces: The interface's endpoints provided by the alert service are the following:<ul> <li>POST tp2.greenhouse.com:8000/alert/subscribe </li> <li>DELETE tp2.greenhouse.com:8000/alert/unsubscribe</li> <li>POST tp2.greenhouse.com:8000/alert/threshold</li> </ul> </li> </ul> <p>We will register this service with the following request:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/service-discovery/register' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//temperature-provider2' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"serviceDefinitionName\": \"alert-service\",\n  \"version\": \"\",\n  \"expiresAt\": \"2025-01-01T00:00:00Z\",\n  \"metadata\": {\n    \"max-delay\": {\"value\": 15, \"unit\": \"sec\"}\n  },\n  \"interfaces\": [\n    {\n      \"templateName\": \"generic-http\",\n      \"protocol\": \"http\",\n      \"policy\": \"NONE\",\n      \"properties\": {\n        \"accessAddresses\": [\"192.168.56.116\", \"tp2.greenhouse.com\"],\n        \"accessPort\": 8080,\n        \"basePath\": \"/alert\",\n        \"operations\": {\n          \"subscribe\": { \"method\": \"POST\", \"path\": \"/subscribe\"},\n          \"unsubscribe\": { \"method\": \"DELETE\", \"path\": \"/unsubscribe\"},\n          \"set-threshold\": { \"method\": \"POST\", \"path\": \"/threshold\"}\n        }\n      }\n    }\n  ]\n}'\n</code></pre> <p>The received answer:</p> <pre><code>{\n  \"instanceId\": \"temperature-provider2::alert-service::1.0.0\",\n  \"provider\": {\n    \"name\": \"temperature-provider2\",\n    \"metadata\": {\n      \"scales\": [\n        \"Kelvin\",\n        \"Celsius\"\n      ],\n      \"location\": {\n        \"side\": \"North\",\n        \"block\": 2\n      },\n      \"indoor\": true\n    },\n    \"version\": \"1.0.0\",\n    \"addresses\": [\n      {\n        \"type\": \"IPV4\",\n        \"address\": \"192.168.56.116\"\n      },\n      {\n        \"type\": \"HOSTNAME\",\n        \"address\": \"tp2.greenhouse.com\"\n      }\n    ],\n    \"device\": {\n      \"name\": \"thermometer2\",\n      \"metadata\": {\n        \"scales\": [\n          \"Kelvin\",\n          \"Celsius\"\n        ],\n        \"max-temperature\": {\n          \"Kelvin\": 310,\n          \"Celsius\": 40\n        },\n        \"min-temperature\": {\n          \"Kelvin\": 260,\n          \"Celsius\": -10\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"81:ef:1a:44:7a:f5\"\n        }\n      ],\n      \"createdAt\": \"2024-11-04T01:53:02Z\",\n      \"updatedAt\": \"2024-11-04T01:53:02Z\"\n    },\n    \"createdAt\": \"2024-11-08T10:21:11Z\",\n    \"updatedAt\": \"2024-11-08T10:21:11Z\"\n  },\n  \"serviceDefinition\": {\n    \"name\": \"alert-service\",\n    \"createdAt\": \"2024-11-08T15:23:10Z\",\n    \"updatedAt\": \"2024-11-08T15:23:10Z\"\n  },\n  \"version\": \"1.0.0\",\n  \"expiresAt\": \"2025-01-01T00:00:00Z\",\n  \"metadata\": {\n    \"max-delay\": {\n      \"value\": 15,\n      \"unit\": \"sec\"\n    }\n  },\n  \"interfaces\": [\n    {\n      \"templateName\": \"generic-http\",\n      \"protocol\": \"http\",\n      \"policy\": \"NONE\",\n      \"properties\": {\n        \"accessAddresses\": [\n          \"192.168.56.116\",\n          \"tp2.greenhouse.com\"\n        ],\n        \"accessPort\": 8080,\n        \"operations\": {\n          \"subscribe\": {\n            \"path\": \"/subscribe\",\n            \"method\": \"POST\"\n          },\n          \"unsubscribe\": {\n            \"path\": \"/unsubscribe\",\n            \"method\": \"DELETE\"\n          },\n          \"set-threshold\": {\n            \"path\": \"/threshold\",\n            \"method\": \"POST\"\n          }\n        },\n        \"basePath\": \"/alert\"\n      }\n    }\n  ],\n  \"createdAt\": \"2024-11-19T17:08:47.706960300Z\",\n  \"updatedAt\": \"2024-11-19T17:08:47.706960300Z\"\n}\n</code></pre>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-5-lookup-and-revoke-service","title":"Step 5: Lookup and Revoke Service","text":"<p>Let's say  we have decided to no longer provide temperature-provider2's  alert service. </p> <p>For deleting the service, we have to know the service instance ID, which was generated by the Service Registry, when we registered our service into the Local Cloud. We can find out what the ID is, if we perform a lookup operation. Of course, if we know the ID, this step can be skipped.</p> <p>Since we know that the provider name is temperature-provider2, the service definition name is alert-service, and the version was 1.0.0, we will send a lookup request with these filters. We will set the verbose flag to false, because we only need the service instance ID here, all the other additional data is unnecessary.</p> <p>Note that our case, the service discovery policy is set to OPEN. If the discovery policy is RESTRICTED, we will only retrieve the services that have the  metadata key unrestricted-discovery, and this is set to true.</p> <p>The lookup request looks like this:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/service-discovery/lookup?verbose=false' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//temperature-provider2' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"instanceIds\": [\n  ],\n  \"providerNames\": [\n    \"temperature-provider2\"\n  ],\n  \"serviceDefinitionNames\": [\n    \"alert-service\"\n  ],\n  \"versions\": [\n    \"1.0.0\"\n  ],\n  \"alivesAt\": \"\",\n  \"metadataRequirementsList\": [\n  ],\n  \"interfaceTemplateNames\": [\n  ],\n  \"interfacePropertyRequirementsList\": [\n  ],\n  \"policies\": [\n  ]\n}'\n</code></pre> <p>The lookup response:</p> <pre><code>{\n  \"entries\": [\n    {\n      \"instanceId\": \"temperature-provider2::alert-service::1.0.0\",\n      \"provider\": {\n        \"name\": \"temperature-provider2\",\n        \"metadata\": {\n          \"scales\": [\n            \"Kelvin\",\n            \"Celsius\"\n          ],\n          \"location\": {\n            \"side\": \"North\",\n            \"block\": 2\n          },\n          \"indoor\": true\n        },\n        \"version\": \"1.0.0\",\n        \"addresses\": [\n          {\n            \"type\": \"IPV4\",\n            \"address\": \"192.168.56.116\"\n          },\n          {\n            \"type\": \"HOSTNAME\",\n            \"address\": \"tp2.greenhouse.com\"\n          }\n        ],\n        \"device\": {\n          \"name\": \"thermometer2\",\n          \"metadata\": {\n            \"scales\": [\n              \"Kelvin\",\n              \"Celsius\"\n            ],\n            \"max-temperature\": {\n              \"Kelvin\": 310,\n              \"Celsius\": 40\n            },\n            \"min-temperature\": {\n              \"Kelvin\": 260,\n              \"Celsius\": -10\n            }\n          },\n          \"addresses\": [\n            {\n              \"type\": \"MAC\",\n              \"address\": \"81:ef:1a:44:7a:f5\"\n            }\n          ],\n          \"createdAt\": \"2024-11-04T01:53:02Z\",\n          \"updatedAt\": \"2024-11-04T01:53:02Z\"\n        },\n        \"createdAt\": \"2024-11-08T10:21:11Z\",\n        \"updatedAt\": \"2024-11-08T10:21:11Z\"\n      },\n      \"serviceDefinition\": {\n        \"name\": \"alert-service\",\n        \"createdAt\": \"2024-11-08T15:23:10Z\",\n        \"updatedAt\": \"2024-11-08T15:23:10Z\"\n      },\n      \"version\": \"1.0.0\",\n      \"expiresAt\": \"2025-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"max-delay\": {\n          \"value\": 15,\n          \"unit\": \"sec\"\n        }\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic-http\",\n          \"protocol\": \"http\",\n          \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\n              \"192.168.56.116\",\n              \"tp2.greenhouse.com\"\n            ],\n            \"accessPort\": 8080,\n            \"operations\": {\n              \"subscribe\": {\n                \"path\": \"/subscribe\",\n                \"method\": \"POST\"\n              },\n              \"unsubscribe\": {\n                \"path\": \"/unsubscribe\",\n                \"method\": \"DELETE\"\n              },\n              \"set-threshold\": {\n                \"path\": \"/threshold\",\n                \"method\": \"POST\"\n              }\n            },\n            \"basePath\": \"/alert\"\n          }\n        }\n      ],\n      \"createdAt\": \"2024-11-19T17:08:48Z\",\n      \"updatedAt\": \"2024-11-19T17:08:48Z\"\n    }\n  ],\n  \"count\": 1\n}\n</code></pre> <p>Since there was exactly one response, we learned that the service instance id is temperature-provider2::alert-service::1.0.0. We can revoke the service by sending the following request:</p> <pre><code>curl -X 'DELETE' \\\n  'http://localhost:8443/serviceregistry/service-discovery/revoke/temperature-provider2%3A%3Aalert-service%3A%3A1.0.0' \\\n  -H 'accept: */*' \\\n  -H 'Authorization: Bearer SYSTEM//temperature-provider2'\n</code></pre> <p>Note, the service instance id contains double double colons (::) as separator characters, which is a reserved character in the URL with a special meaning. Because of that, the colon has to be encoded as %3A, that is why we used these in the URL.</p> <p>This operation only works, if the service we are deleting is associated with our system. Otherwise, the following error message will be received:</p> <pre><code>{\n  \"errorMessage\": \"Revoking other systems' service is forbidden\",\n  \"errorCode\": 403,\n  \"exceptionType\": \"FORBIDDEN\",\n  \"origin\": \"DELETE /serviceregistry/service-discovery/revoke/temperature-provider2%3A%3Aalert-service%3A%3A1.0.0\"\n}\n</code></pre>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-6-revoke-system","title":"Step 6:  Revoke System","text":"<p>Maybe later we want to revoke the provider-system2 because we will not use it anymore. We can remove the system from the Local Cloud by using the revoke system operation:</p> <pre><code>curl -X 'DELETE' \\\n  'http://localhost:8443/serviceregistry/system-discovery/revoke' \\\n  -H 'accept: */*' \\\n  -H 'Authorization: Bearer SYSTEM//temperature-consumer1'\n</code></pre> <p>The Service Registry will delete our system.</p>"},{"location":"help/tutorials/serviceregistry-http-demo/#example-2-consumer","title":"Example 2: Consumer","text":"<p>In this example, we'll see how:</p> <ul> <li>a system called temperature-consumer1, </li> <li>running on the device named weather-displayer1,</li> <li>looks up for available Kelvin-info services,</li> </ul> <p>after registering itself and its device into the Local Cloud.</p>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-1-authentication_1","title":"Step 1: Authentication","text":"<p>Similar to the providers's authentication, we will use self declared authentication, and use the following authorization header:</p> <pre><code>-H 'Authorization: Bearer SYSTEM//temperature-consumer1'\n</code></pre>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-2-register-and-revoke-device","title":"Step 2: Register and Revoke Device","text":"<p>Before registrating the system, we will register our device, because it doesn't exist in the Local Cloud yet. We provide the following information about the device:</p> <ul> <li>name: weather-displayer1</li> <li>metadata: We specify here that the displayer type is digital, and it is capable to display data about temperature and wind.</li> <li>addresses: The device has a MAC address, which is 57:2a:b8:ff:c8:f1.</li> </ul> <p>The request will look like this:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/device-discovery/register' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//temperature-consumer1' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"weather-displayer1\",\n  \"metadata\": {\n    \"type\": \"digital\",\n    \"displayed-data\": \"[wind, temperature]\"\n  },\n  \"addresses\": [\n    \"57:2a:b8:ff:c8:f1\"\n  ]\n}'\n</code></pre> <p>After successful registration, we receive the following response:</p> <pre><code>{\n  \"name\": \"weather-displayer1\",\n  \"metadata\": {\n    \"type\": \"digital\",\n    \"displayed-data\": \"[wind, temperature]\"\n  },\n  \"addresses\": [\n    {\n      \"type\": \"MAC\",\n      \"address\": \"57:2a:b8:ff:c8:f1\"\n    }\n  ],\n  \"createdAt\": \"2024-11-10T15:36:53.720922100Z\",\n  \"updatedAt\": \"2024-11-10T15:36:53.720922100Z\"\n}\n</code></pre> <p>If for some reason we want to delete this device in the future, we can do this by sending the following request:</p> <pre><code>curl -X 'DELETE' \\\n  'http://localhost:8443/serviceregistry/device-discovery/revoke/weather-displayer1' \\\n  -H 'accept: */*' \\\n  -H 'Authorization: Bearer SYSTEM//temperature-consumer1'\n</code></pre> <p>Note that this operation will only be successful, if no system is connected to the device anymore. Otherwise you will get the following error message:</p> <pre><code>{\n  \"errorMessage\": \"At least one system is assigned to this device.\",\n  \"errorCode\": 423,\n  \"exceptionType\": \"LOCKED\",\n  \"origin\": \"DELETE /serviceregistry/device-discovery/revoke/weather-displayer1\"\n}\n</code></pre> <p>In this example, we will not delete the device yet, because temperature-consumer1 runs on it.</p>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-3-register-system_1","title":"Step 3: Register System","text":"<p>Now, that we registered the device, we will register the system too with the following data:</p> <ul> <li>metadata: The system uses Kelvin, Celsius and Fahrenheit scales. It is placed indoor and is located in room 14. </li> <li>version: This is the second version of this system. We can set it to 2, the Service Registry will normalize it later according to semantic versioning.</li> <li>addresses: We specify an IP address (192.168.49.1) and the hostname (tc1.greenhouse.com).</li> <li>device name: This will be weather-displayer1, which we registered earlier.</li> </ul> <p>The registation request:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/system-discovery/register' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//temperature-consumer1' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"metadata\": {\n    \"scales\": [\"Kelvin\", \"Celsius\", \"Fahrenheit\"],\n    \"location\": {\"room\": 14},\n    \"indoor\": true\n  },\n  \"version\": \"2\",\n  \"addresses\": [\n    \"192.168.49.1\",\n    \"tc1.greenhouse.com\"\n  ],\n  \"deviceName\": \"weather-displayer1\"\n}'\n</code></pre> <p>Here is the response we received:</p> <pre><code>{\n  \"name\": \"temperature-consumer1\",\n  \"metadata\": {\n    \"scales\": [\n      \"Kelvin\",\n      \"Celsius\",\n      \"Fahrenheit\"\n    ],\n    \"location\": {\n      \"room\": 14\n    },\n    \"indoor\": true\n  },\n  \"version\": \"2.0.0\",\n  \"addresses\": [\n    {\n      \"type\": \"IPV4\",\n      \"address\": \"192.168.49.1\"\n    },\n    {\n      \"type\": \"HOSTNAME\",\n      \"address\": \"tc1.greenhouse.com\"\n    }\n  ],\n  \"device\": {\n    \"name\": \"weather-displayer1\",\n    \"metadata\": {\n      \"type\": \"digital\",\n      \"displayed-data\": \"[wind, temperature]\"\n    },\n    \"addresses\": [\n      {\n        \"type\": \"MAC\",\n        \"address\": \"57:2a:b8:ff:c8:f1\"\n      }\n    ],\n    \"createdAt\": \"2024-11-10T15:36:54Z\",\n    \"updatedAt\": \"2024-11-10T15:36:54Z\"\n  },\n  \"createdAt\": \"2024-11-10T16:05:55.973663300Z\",\n  \"updatedAt\": \"2024-11-10T16:05:55.973663300Z\"\n}\n</code></pre>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-4-lookup-services","title":"Step 4: Lookup Services","text":"<p>Let's say that the temperature-consumer1 wants to consume the Kelvin info service. We have to perform a lookup operation to find out the service instances registered into the Local Cloud with the corresponding service definition name. We are looking for services, that will not expire until 31. december 2024, and the margin of error is not higher than 1 degree.</p> <p>We will use the following filters during lookup:</p> <ul> <li>Service definition names: We are looking for services named kelvin-info.</li> <li>Alives at: This should be the UTC string representation of 31. 12. 2024.</li> <li>Metadata requirements list: As specified, the margin of error sould be less than or equals to 1. However, the service might not contain this metadata, if the measured temperature is always perfectly accurate. In this case, there has to be a reliabe flag which is set to true. So we will have two metadata requitements, one is a limit for the margin of error metadata, and the other one is to check the reliable flag. </li> </ul> <p>We will set the verbose parameter to true, because we want all the possible details about the services, so we can make an optimal decision, which one to consume.</p> <p>As mentioned in example 1, the service discovery policy here is set to OPEN. If the discovery policy is RESTRICTED, we may face some restrictions.</p> <p>The request looks like this:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/service-discovery/lookup?verbose=true' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//temperature-consumer1' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"instanceIds\": [\n  ],\n  \"providerNames\": [\n  ],\n  \"serviceDefinitionNames\": [\n    \"kelvin-info\"\n  ],\n  \"versions\": [\n  ],\n  \"alivesAt\": \"2024-12-31T00:00:00Z\",\n  \"metadataRequirementsList\": [\n    {\n      \"margin-of-error\": { \"op\": \"LESS_THAN_OR_EQUALS_TO\", \"value\": 1}\n    },\n    {\n      \"reliable\": true\n    }\n  ],\n  \"interfaceTemplateNames\": [\n  ],\n  \"interfacePropertyRequirementsList\": [\n  ],\n  \"policies\": [\n  ]\n}'\n</code></pre> <p>The result contains two entities, temperature-provider2::kelvin-info::1.0.0 and temperature-provider1::kelvin-info::1.0.0:</p> <pre><code>{\n  \"entries\": [\n    {\n      \"instanceId\": \"temperature-provider2::kelvin-info::1.0.0\",\n      \"provider\": {\n        \"name\": \"temperature-provider2\",\n        \"metadata\": {\n          \"scales\": [\n            \"Kelvin\",\n            \"Celsius\"\n          ],\n          \"location\": {\n            \"side\": \"North\",\n            \"block\": 2\n          },\n          \"indoor\": true\n        },\n        \"version\": \"1.0.0\",\n        \"addresses\": [\n          {\n            \"type\": \"IPV4\",\n            \"address\": \"192.168.56.116\"\n          },\n          {\n            \"type\": \"HOSTNAME\",\n            \"address\": \"tp2.greenhouse.com\"\n          }\n        ],\n        \"device\": {\n          \"name\": \"thermometer2\",\n          \"metadata\": {\n            \"scales\": [\n              \"Kelvin\",\n              \"Celsius\"\n            ],\n            \"max-temperature\": {\n              \"Kelvin\": 310,\n              \"Celsius\": 40\n            },\n            \"min-temperature\": {\n              \"Kelvin\": 260,\n              \"Celsius\": -10\n            }\n          },\n          \"addresses\": [\n            {\n              \"type\": \"MAC\",\n              \"address\": \"81:ef:1a:44:7a:f5\"\n            }\n          ],\n          \"createdAt\": \"2024-11-04T01:53:02Z\",\n          \"updatedAt\": \"2024-11-04T01:53:02Z\"\n        },\n        \"createdAt\": \"2024-11-08T10:21:11Z\",\n        \"updatedAt\": \"2024-11-08T10:21:11Z\"\n      },\n      \"serviceDefinition\": {\n        \"name\": \"kelvin-info\",\n        \"createdAt\": \"2024-11-08T11:24:43Z\",\n        \"updatedAt\": \"2024-11-08T11:24:43Z\"\n      },\n      \"version\": \"1.0.0\",\n      \"expiresAt\": \"2030-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"margin-of-error\": 0.5\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic-http\",\n          \"protocol\": \"http\",\n          \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\n              \"192.168.56.116\",\n              \"tp2.greenhouse.com\"\n            ],\n            \"accessPort\": 8080,\n            \"operations\": {\n              \"query-temperature\": {\n                \"path\": \"/query\",\n                \"method\": \"GET\"\n              }\n            },\n            \"basePath\": \"/kelvin\"\n          }\n        }\n      ],\n      \"createdAt\": \"2024-11-10T14:24:13Z\",\n      \"updatedAt\": \"2024-11-10T22:43:19Z\"\n    },\n    {\n      \"instanceId\": \"temperature-provider1::kelvin-info::1.0.0\",\n      \"provider\": {\n        \"name\": \"temperature-provider1\",\n        \"metadata\": {\n          \"scales\": [\n            \"Kelvin\"\n          ],\n          \"location\": {\n            \"side\": \"East\",\n            \"block\": 2\n          },\n          \"indoor\": false\n        },\n        \"version\": \"1.0.0\",\n        \"addresses\": [\n          {\n            \"type\": \"IPV4\",\n            \"address\": \"192.168.56.110\"\n          },\n          {\n            \"type\": \"HOSTNAME\",\n            \"address\": \"tp1.greenhouse.com\"\n          }\n        ],\n        \"createdAt\": \"2024-11-10T16:15:23Z\",\n        \"updatedAt\": \"2024-11-10T16:15:23Z\"\n      },\n      \"serviceDefinition\": {\n        \"name\": \"kelvin-info\",\n        \"createdAt\": \"2024-11-08T11:24:43Z\",\n        \"updatedAt\": \"2024-11-08T11:24:43Z\"\n      },\n      \"version\": \"1.0.0\",\n      \"expiresAt\": \"2030-05-31T00:00:00Z\",\n      \"metadata\": {\n        \"reliable\": true\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic-http\",\n          \"protocol\": \"http\",\n          \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\n              \"192.168.56.110\",\n              \"tp1.greenhouse.com\"\n            ],\n            \"accessPort\": 8080,\n            \"operations\": {\n              \"query-temperature\": {\n                \"path\": \"/info\",\n                \"method\": \"GET\"\n              }\n            },\n            \"basePath\": \"/kelvin\"\n          }\n        }\n      ],\n      \"createdAt\": \"2024-11-10T21:08:21Z\",\n      \"updatedAt\": \"2024-11-10T22:43:19Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>Now we are free to choose, which instance of kelvin-info service to consume.</p>"},{"location":"home/contribute/","title":"Contribute","text":""},{"location":"home/contribute/#eclipse-contributor-agreement","title":"Eclipse Contributor Agreement","text":"<p>Since Arrowhead project is governed within the Eclipse Foundation, the authors of any contribution must agree and accept the Eclipse Contributor Agreement (\"ECA\").</p> <p>Technically it means that contributors need an Eclipse Fundation Account which makes possible to submit a signed ECA! GitHub Pull Requests could be accepted only when all the authors own an Eclipse Foundation Account with the signed ECA!</p>"},{"location":"home/contribute/#eca-verification","title":"ECA verification","text":"<p>The existence of the signed ECA is verified based on the authors commits. Your local Git client should hold and push the commits with the same email address like the Eclipse Foundation Account was created with. When the email address is different, than the verification process will fail and the Pull Request is not possible to merge. </p>"},{"location":"home/contribute/#configuring-git-client","title":"Configuring Git client","text":"<p>Use the command below to configure your git client globally:</p> <p><code>$ git config --global user.email anybody@example.com</code></p> <p>Whithout the <code>--global</code> flag you can set the email address only for that specific project where the command was executed.</p>"},{"location":"home/contribute/#way-of-contributing","title":"Way of contributing","text":"<p>1) Fork (and not clone) the project repository.</p> <ul> <li>Working with forks</li> </ul> <p>2) Create a new branch in your fork and from the <code>development</code> branch for your contribution.</p> <p>(Creating and pushing new branches within a cloned repository is allowed only for official Committers)</p> <p>3) Take care of coding clean!</p> <ul> <li>Clean coding in Java</li> <li>A short summary of Java coding best practices</li> </ul> <p>4) Make sure you have a working contribution</p> <ul> <li>Write unit tests</li> <li>Run several test scenario</li> </ul> <p>5) Make sure you are not using restricted third party library</p> <ul> <li>Build the project with <code>mvn clean install -P license-check -DskipTests</code>. After the project build has been finished, you will find a summary about the used libraries in the <code>\\target\\dash\\summary</code> file. Look for your newly added libraries and make sure they are not restricted. </li> </ul> <p>6) Synchronize the <code>development</code> branch in your fork and merge it into your contribution branch </p> <p>7) Rise a Pull Request from your fork to the <code>development</code> branch of the original project repository.</p> <ul> <li>Creating a pull request from a fork</li> </ul> <p>8) Wait for the review.</p> <ul> <li>Pull requests with ECA issue, merge conflict, unit test issues or running issues will be closed without review</li> </ul> <p>9) Deal with the requested fixes if any.</p> <p>10) When your Pull Request is approved, then it will be merged by a committer and will be contained by the coming release</p>"},{"location":"home/welcome/","title":"Welcome","text":"<p>This site provides all the specification, description and example what is necessary for dealing with the java-spring implementation of Eclipse Arrowhead Framework.</p> <p> eclipse-arrowhead/java-spring</p>"},{"location":"home/welcome/#what-is-it","title":"What is it?","text":"<p>The Eclipse Arrowhead Framework is addressing IoT based automation and digitalisation. The generic concept is based on the principles of Service Oriented Architectures, and aims at enabling all of its users to work in a common and unified approach \u2013 leading towards high levels of interoperability. The approach taken is that the information exchange of elements in the Internet of Things is abstracted to loosely coupled services. This is to enable IoT interoperability in-between almost any IoT elements.</p> <p>The smallest unit of governance within the Arrowhead Framework is related to a Local Cloud, which in general is a closed, local industrial network. Each Local Cloud is recommended to host the core systems within its network: creating the minimal supported functionality needed to enable collaboration and information exchange between the various systems within the Local Cloud. The four recommended core system for each Local Cloud are the Service Registry, the Service Orchestration, the Service Authorization and the Authentication.</p> <p>In addition to the recommended core systems, a number of additional, supporting core systems and services are provided to enable the design, engineering, operation and maintenance of IoT-based automation system of systems.</p>"},{"location":"home/welcome/#learn-more","title":"Learn more","text":"<p> arrowhead technology eclipse governance</p>"}]}