{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Redirect","text":""},{"location":"client_libraries/","title":"Client Libraries","text":"<p>Coming soon...</p>"},{"location":"api/authentication_policy/","title":"Authentication Policy","text":"<p>During the interactions with the Arrowhead Core and Support systems, all clients are required to prove their identity by providing appropriate identity info. The authentication can be done based on the given identity info.</p> <p>Three authentication policies are offered: declared, certificate and outsourced.</p> <p>The actual policy in force is depending on how the Core and Support systems are configured. See the <code>authentication.policy</code> configuration property under the general configurations.</p>"},{"location":"api/authentication_policy/#policies","title":"Policies","text":""},{"location":"api/authentication_policy/#declared","title":"declared","text":"<p>Applying the declared authentication policy results in no real identity verification taking place. The Core and Supports systems simply accept the identity provided by the application systems. This policy is not recommended for use in production environment. </p> <p>Applicable to HTTP and MQTT interface protocols.</p>"},{"location":"api/authentication_policy/#certificate","title":"certificate","text":"<p>Applying the certificate authentication policy results in requiring client side system profile certificate being provided by the application systems. The issuer and the identity related content of the certificate are always verified during every interaction with the Arrowhead Core and Support systems.</p> <p>Applicable to HTTP and MQTT interface protocols.</p>"},{"location":"api/authentication_policy/#outsourced","title":"outsourced","text":"<p>Applying the outsourced authentication policy results in requiring the identity service being provided by a core/support system within the Local Cloud. This dedicated system can be the offical Authentication Core System or any third party solution that implements this service.</p> <p>The actual credentials required to be authenticated and to join the Local Cloud always depend on the actual authentication method behind the identity service, but the outcome is always an identity token (and optionally an expiration time) that the authenticated system is required to use to prove its own identity when interacting with the Arrowhead Core and Support systems. </p> <p>The interactions between the consumers and providers should never contain identity tokens in order to prevent any kind of identity theft. Identities should only be shared with the trusted Arrowhead Core and Support systems.</p> <p>Applicable to HTTP and MQTT interface protocols.</p>"},{"location":"api/authentication_policy/#usage","title":"Usage","text":""},{"location":"api/authentication_policy/#http","title":"HTTP","text":""},{"location":"api/authentication_policy/#declared-http","title":"declared-http","text":"<p>The declared identity info is the unique system name itself that must be present in the HTTP Authorization request header according to the following scheme: </p> <pre><code>Bearer SYSTEM//&lt;system-name&gt;\n</code></pre> <p>Example:</p> <pre><code>curl -X 'DELETE' \\\n  'http://localhost:8443/serviceregistry/system-discovery/revoke' \\\n  -H 'accept: */*' \\\n  -H 'Authorization: Bearer SYSTEM//temperature-consumer1'\n</code></pre>"},{"location":"api/authentication_policy/#certificate-http","title":"certificate-http","text":"<p>The certificate identity info is contained in the client certificate that must be attached to the HTTPS request.</p> <p>Example:</p> <pre><code>curl -X 'DELETE' \\\n  'https://localhost:8443/serviceregistry/system-discovery/revoke' \\\n  -H 'accept: */*' \\\n  --cert my-cert.p12 --cert-type P12 --pass 123456\n</code></pre>"},{"location":"api/authentication_policy/#outsourced-http","title":"outsourced-http","text":"<p>The outsourced identity info is a string token generated by a dedicated Core or Support system and obtained as a result of a successful authentication attempt. This token must be present in the HTTP Authorization request header according to the following scheme: </p> <pre><code>Bearer IDENTITY-TOKEN//&lt;token&gt;\n</code></pre> <p>Example:</p> <pre><code>curl -X 'DELETE' \\\n  'http://localhost:8443/serviceregistry/system-discovery/revoke' \\\n  -H 'accept: */*' \\\n  -H 'Authorization: Bearer IDENTITY-TOKEN//3d7b084d-1259-4a04-8789-880b7da3a530'\n</code></pre>"},{"location":"api/authentication_policy/#mqtt","title":"MQTT","text":""},{"location":"api/authentication_policy/#declared-mqtt","title":"declared-mqtt","text":"<p>The declared identiy info is the unique system name itself that must be present in the authentication field of the MqttRequestTemplate according to the following scheme: </p> <pre><code>SYSTEM//&lt;system-name&gt;\n</code></pre> <p>Example:</p> <pre><code>Topic: arrowhead/serviceregistry/system-discovery/revoke\n\n{\n   \"traceId\":\"abc123\",\n   \"authentication\":\"SYSTEM//temperature-consumer1\",\n   \"responseTopic\":\"my/response/topic\",\n   \"qosRequirement\":2\n\n}\n</code></pre>"},{"location":"api/authentication_policy/#certificate-mqtt","title":"certificate-mqtt","text":"<p>The certificate identity info is contained by the client certificate that must be present in the authentication field of the MqttRequestTemplate where the PEM format of the certificate is expected as a Base64 encoded string.</p> <p>Example:</p> <pre><code>Topic: arrowhead/serviceregistry/system-discovery/revoke\n\n{\n   \"traceId\":\"abc123\",\n   \"authentication\":\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUgvVENDQmVXZ0...\",\n   \"responseTopic\":\"my/response/topic\",\n   \"qosRequirement\":2\n\n}\n</code></pre>"},{"location":"api/authentication_policy/#outsourced-mqtt","title":"outsourced-mqtt","text":"<p>The outsourced identity info is a string token generated by a dedicated Core or Support system and obtained as a result of a successful authentication attempt. This token must be present in the authentication field of the MqttRequestTemplate according to the following scheme:</p> <pre><code>IDENTITY-TOKEN//&lt;token&gt;\n</code></pre> <p>Example:</p> <pre><code>Topic: arrowhead/serviceregistry/system-discovery/revoke\n\n{\n   \"traceId\":\"abc123\",\n   \"authentication\":\"IDENTITY-TOKEN//3d7b084d-1259-4a04-8789-880b7da3a530\",\n   \"responseTopic\":\"my/response/topic\",\n   \"qosRequirement\":2\n\n}\n</code></pre>"},{"location":"api/primitives/","title":"Primitives","text":""},{"location":"api/primitives/#address","title":"Address","text":"<p>A string representation of a network address. An address can be a version 4 IP address, a version 6 IP address, DNS name or MAC address.</p>"},{"location":"api/primitives/#addresstype","title":"AddressType","text":"<p>String value of a network address type. Could be only <code>HOSTNAME</code>, <code>IPV4</code>, <code>IPV6</code> or <code>MAC</code>.</p>"},{"location":"api/primitives/#authenticationmethod","title":"AuthenticationMethod","text":"<p>A string representation of an authentication method. Currently, only <code>PASSWORD</code> is supported.`</p>"},{"location":"api/primitives/#boolean","title":"Boolean","text":"<p>One out of <code>true</code> or <code>false</code>.</p>"},{"location":"api/primitives/#datetime","title":"DateTime","text":"<p>Pinpoints a moment in time in the format of ISO8601 standard <code>yyyy-mm-ddThh:MM:ssZ</code>, where \u201dyyyy\u201d denotes year (4 digits), \u201dmm\u201d denotes month starting from 01, \u201ddd\u201d denotes day starting from 01, \u201dT\u201d is the separator between date and time part, \u201dhh\u201d denotes hour in the 24-hour format (00-23), \u201dMM\u201d denotes minute (00-59), \u201dss\u201d denotes second (00-59). \u201dZ\u201d indicates that the time is in UTC. An example of a valid date/time string is \u201d2024-12-05T12:00:00Z\u201d</p>"},{"location":"api/primitives/#direction","title":"Direction","text":"<p>The direction of a sorting operation. Possible values are the String representation of ascending (<code>ASC</code>) or descending (<code>DESC</code>) order.</p>"},{"location":"api/primitives/#errortype","title":"ErrorType","text":"<p>String value of the error type. Could be <code>ARROWHEAD</code>, <code>INVALID_PARAMETER</code>, <code>AUTH</code>, <code>FORBIDDEN</code>, <code>DATA_NOT_FOUND</code>, <code>TIMEOUT</code>, <code>LOCKED</code>, <code>INTERNAL_SERVER_ERROR</code> or <code>EXTERNAL_SERVER_ERROR</code>.</p>"},{"location":"api/primitives/#logseverity","title":"LogSeverity","text":"<p>Alias for a String value that describes the kind and seriousness of a log message. Could be <code>ALL</code>, <code>TRACE</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, <code>ERROR</code> or <code>FATAL</code>.</p>"},{"location":"api/primitives/#mqttqos","title":"MQTTQoS","text":"<p>QoS in MQTT refers to the level of guarantee for message delivery between the publisher and the subscriber. It can be <code>0</code>, <code>1</code> or <code>2</code> (learn more).</p>"},{"location":"api/primitives/#name","title":"Name","text":"<p>A String indentifier that is intended to be both human and machine-readable. The allowed characters are letters, numbers and dash (<code>-</code>). A name has to start with a letter and cannot end with a dash. There are different restrictions on the length of the name depending on the data model.</p>"},{"location":"api/primitives/#number","title":"Number","text":"<p>Decimal number.</p>"},{"location":"api/primitives/#propertyvalidator","title":"PropertyValidator","text":"<p>An identifier of any suitable validator function chosen by the implementor of service. The validators have different kinds of inputs, depending on what to validate. Some validators have optional or mandatory arguments. The implemented validators are the following:</p> <ul> <li><code>NOT_EMPTY_ADDRESS_LIST</code>: The input is a list of Addresses and must contain at least one element. The validator checks if the addresses are valid and in alignment with the supported address types and performs normalization. An example for usage: validating HTTP interface access addresses.</li> <li><code>NOT_EMPTY_STRING_SET</code>: The input is a list of Strings and must contain at least one element. The validator checks if the are not empty and performs normalization. It can be used with the optional <code>NAME</code> argument. In that case, normalization and validation happens according to the naming convention. An example for usage: validating possible MQTT interface operations.</li> <li><code>PORT</code>: This validator is meant to be used for ports. The input is an integer that represents a port number. The validator checks if the given value is between 1 and 65535, since in practice all valid port numbers fall within this range.</li> <li><code>MINMAX</code>: The input is a Number. It is mandatory to give two Strings as arguments, that represent the lower and upper limits of a closed interval. The validator checks if the input falls within the interval. (The <code>PORT</code> validator is a specific <code>MINMAX</code> validator, where the arguments are \"1\" and \"65535\".)</li> <li><code>HTTP_OPERATIONS</code>: This validator is meant to be used for HTTP operations. The input is one or more key-value pair where the keys are Strings and the values are also key-value pairs, where the keys are path and method. A concrete example:     <code>\"query-temperature\": {                 \"path\": \"/query\",                 \"method\": \"GET\"             },             \"set-temperature\": {                 \"path\": \"/set\",                 \"method\": \"PUT\"             }</code>     The validation and normalization happens according to the HTTP standards.</li> </ul>"},{"location":"api/primitives/#protocol","title":"Protocol","text":"<p>A string representation of a communication protocol. Examples: http, https, tcp, ssl...</p>"},{"location":"api/primitives/#securitypolicy","title":"SecurityPolicy","text":"<p>Any suitable security policy chosen by the implementor of the service. The possible values are: <code>NONE</code>, <code>CERT_AUTH</code>, <code>TOKEN_AUTH</code>.</p>"},{"location":"api/primitives/#serviceinstanceid","title":"ServiceInstanceID","text":"<p>A string identifier of a service instance. It consists of the instance's provider name, service definition and version, each separated by double colons, as follows: <code>&lt;provider-name&gt;::&lt;service-definition&gt;::&lt;version&gt;</code>. An example for a valid service instance ID: alert-provider1::alert-service1::1.0.0. (Here the provider name is alert-provider1, the service definition is alert-service1, and the version is 1.0.0.)</p>"},{"location":"api/primitives/#string","title":"String","text":"<p>A chain of UTF-8 characters.</p>"},{"location":"api/primitives/#uuid","title":"UUID","text":"<p>A UUID (Universally Unique Identifier) is a 128-bit identifier used to uniquely distinguish objects in distributed systems (e.g.: <code>550e8400-e29b-41d4-a716-446655440000</code>)</p>"},{"location":"api/primitives/#version","title":"Version","text":"<p>Specifies a system version. Version must follow the Semantic Versioning, which means, it consists of three numbers separated by dots. These numbers represent the <code>MAJOR</code>, <code>MINOR</code> and <code>PATCH</code> version. An example: 5.0.0</p>"},{"location":"api/authentication/identity-generic-http/","title":"identity IDD","text":"<p>GENERIC-HTTP &amp; GENERIC-HTTPS</p>"},{"location":"api/authentication/identity-generic-http/#overview","title":"Overview","text":"<p>This page describes the GENERIC-HTTP and GENERIC-HTTPS service interface of identity which enables both application and core/support systems to get and release a proof of identity token which also can be verified. Furthermore, it also allows a system to change its own credentials. It is implemented using protocol, encoding as stated in the following tables:</p> <p>GENERIC-HTTP</p> Profile type type Version Transfer protocol HTTP 1.1 Data encryption N/A - Encoding JSON RFC 8259 Compression N/A - <p>GENERIC-HTTPS</p> Profile type type Version Transfer protocol HTTPS 1.1 Data encryption TLS - Encoding JSON RFC 8259 Compression N/A - <p>Hereby the Interface Design Description (IDD) is provided to the identity \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/authentication/identity-generic-http/#interface-description","title":"Interface Description","text":""},{"location":"api/authentication/identity-generic-http/#login","title":"login","text":"<p>The service operation request requires an IdentityRequest JSON encoded body.</p> <pre><code>POST /authentication/identity/login HTTP/1.1\n\n{\n  \"systemName\": \"consumer1\",\n  \"credentials\": {\n    \"password\": \"abcdef\"\n  }\n}\n\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response also contains an IdentityLoginResponse JSON encoded body.</p> <pre><code>{\n  \"token\": \"713bca0b-c550-4cb9-ae60-4852b9ee3669\",\n  \"expirationTime\": \"2025-03-07T11:59:01.178225900Z\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>500</code> if an unexpected error happens. If the Authentication system needs contacting an external server during the login process, error code <code>503</code> can also be used if there was a problem with the external server.  The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Invalid name and/or credentials\",\n  \"errorCode\": 401,\n  \"exceptionType\": \"AUTH\",\n  \"origin\": \"POST /authentication/identity/login\"\n}\n</code></pre>"},{"location":"api/authentication/identity-generic-http/#logout","title":"logout","text":"<p>The service operation request requires an IdentityRequest JSON encoded body.</p> <pre><code>POST /authentication/identity/logout HTTP/1.1\n\n{\n  \"systemName\": \"consumer1\",\n  \"credentials\": {\n    \"password\": \"abcdef\"\n  }\n}\n\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response does not contain any response body.</p> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>500</code> if an unexpected error happens. If the Authentication system needs contacting an external server during the logout process, error code <code>503</code> can also be used if there was a problem with the external server.  The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Invalid name and/or credentials\",\n  \"errorCode\": 401,\n  \"exceptionType\": \"AUTH\",\n  \"origin\": \"POST /authentication/identity/logout\"\n}\n</code></pre>"},{"location":"api/authentication/identity-generic-http/#change","title":"change","text":"<p>The service operation request requires an IdentityChangeRequest JSON encoded body.</p> <pre><code>POST /authentication/identity/change HTTP/1.1\n\n{\n  \"systemName\": \"consumer1\",\n  \"credentials\": {\n    \"password\": \"abcdef\"\n  },\n  \"newCredentials\": {\n    \"password\": \"123456\"\n  }\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response does not contain any response body.</p> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>500</code> if an unexpected error happens. If the Authentication system needs contacting an external server during the credential change process, error code <code>503</code> can also be used if there was a problem with the external server.  The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Missing credentials\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /authentication/identity/change\"\n}\n</code></pre>"},{"location":"api/authentication/identity-generic-http/#verify","title":"verify","text":"<p>The service operation request requires an outsourced identity related header and the <code>token</code> that has to be verified as a path parameter.</p> <pre><code>GET /authentication/identity/verify/713bca0b-c550-4cb9-ae60-4852b9ee3669 HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response also contains an IdentityVerifyResponse JSON encoded body.</p> <pre><code>{\n  \"verified\": true,\n  \"systemName\": \"consumer1\",\n  \"sysop\": false,\n  \"loginTime\": \"2025-03-07T11:54:01Z\",\n  \"expirationTime\": \"2025-03-07T12:54:01Z\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"No authorization header has been provided\",\n  \"errorCode\": 401,\n  \"exceptionType\": \"AUTH\"\n}\n</code></pre>"},{"location":"api/authentication/identity-management-generic-http/","title":"identity-management IDD","text":"<p>GENERIC-HTTP &amp; GENERIC-HTTPS</p>"},{"location":"api/authentication/identity-management-generic-http/#overview","title":"Overview","text":"<p>This page describes the GENERIC-HTTP and GENERIC-HTTPS service interface of identity-management which enables systems (with operator role or proper permissions) to handle (create, update, remove, query) identities and active sessions (close, query) in bulk. It is implemented using protocol, encoding as stated in the following tables:</p> <p>GENERIC-HTTP</p> Profile type type Version Transfer protocol HTTP 1.1 Data encryption N/A - Encoding JSON RFC 8259 Compression N/A - <p>GENERIC-HTTPS</p> Profile type type Version Transfer protocol HTTPS 1.1 Data encryption TLS - Encoding JSON RFC 8259 Compression N/A - <p>Hereby the Interface Design Description (IDD) is provided to the identity-management \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/authentication/identity-management-generic-http/#interface-description","title":"Interface Description","text":""},{"location":"api/authentication/identity-management-generic-http/#identity-mgmt-query","title":"identity-mgmt-query","text":"<p>The service operation request requires an outsourced identity related header and an IdentityQueryRequest JSON encoded body.</p> <pre><code>POST /authentication/mgmt/identities/query HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n  \"pagination\": {\n    \"page\": 0,\n    \"size\": 10,\n    \"direction\": \"ASC\",\n    \"sortField\": \"name\"\n  },\n  \"createdBy\": \"sysop\",\n  \"creationFrom\": \"2025-03-07T06:00:00Z\"\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response also contains an IdentityListResponse JSON encoded body.</p> <pre><code>{\n  \"identities\": [\n    {\n      \"systemName\": \"consumer1\",\n      \"authenticationMethod\": \"PASSWORD\",\n      \"sysop\": false,\n      \"createdBy\": \"sysop\",\n      \"createdAt\": \"2025-03-07T12:52:30Z\",\n      \"updatedBy\": \"sysop\",\n      \"updatedAt\": \"2025-03-07T12:52:30Z\"\n    },\n    {\n      \"systemName\": \"provider1\",\n      \"authenticationMethod\": \"PASSWORD\",\n      \"sysop\": false,\n      \"createdBy\": \"sysop\",\n      \"createdAt\": \"2025-03-07T12:52:30Z\",\n      \"updatedBy\": \"sysop\",\n      \"updatedAt\": \"2025-03-07T12:52:30Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"If size parameter is defined then page parameter cannot be undefined\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /authentication/mgmt/identities/query\"\n}\n</code></pre>"},{"location":"api/authentication/identity-management-generic-http/#identity-mgmt-create","title":"identity-mgmt-create","text":"<p>The service operation request requires an outsourced identity related header and an IdentityListCreateRequest JSON encoded body.</p> <pre><code>POST /authentication/mgmt/identities HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n  \"authenticationMethod\": \"PASSWORD\",\n  \"identities\": [\n    {\n      \"systemName\": \"consumer1\",\n      \"credentials\": {\n        \"password\": \"abcdef\"\n      },\n      \"sysop\": false\n    },\n    {\n      \"systemName\": \"provider1\",\n      \"credentials\": {\n        \"password\": \"123456\"\n      },\n      \"sysop\": false\n    }\n  ]\n}\n\n</code></pre> <p>The service operation responds with the status code <code>201</code> if called successfully. The response also contains an IdentityListResponse JSON encoded body.</p> <pre><code>{\n  \"identities\": [\n    {\n      \"systemName\": \"consumer1\",\n      \"authenticationMethod\": \"PASSWORD\",\n      \"sysop\": false,\n      \"createdBy\": \"sysop\",\n      \"createdAt\": \"2025-03-07T12:52:30Z\",\n      \"updatedBy\": \"sysop\",\n      \"updatedAt\": \"2025-03-07T12:52:30Z\"\n    },\n    {\n      \"systemName\": \"provider1\",\n      \"authenticationMethod\": \"PASSWORD\",\n      \"sysop\": false,\n      \"createdBy\": \"sysop\",\n      \"createdAt\": \"2025-03-07T12:52:30Z\",\n      \"updatedBy\": \"sysop\",\n      \"updatedAt\": \"2025-03-07T12:52:30Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. If the Authentication system needs contacting an external server during the creation process, error code 503 can also be used if there was a problem with the external server. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Missing credentials\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /authentication/mgmt/identities\"\n}\n</code></pre>"},{"location":"api/authentication/identity-management-generic-http/#identity-mgmt-update","title":"identity-mgmt-update","text":"<p>The service operation request requires an outsourced identity related header and an IdentityListUpdateRequest JSON encoded body.</p> <pre><code>PUT /authentication/mgmt/identities HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n  \"identities\": [\n    {\n      \"systemName\": \"consumer1\",\n      \"credentials\": {\n        \"password\": \"123456\"\n      },\n      \"sysop\": false\n    },\n    {\n      \"systemName\": \"provider1\",\n      \"credentials\": {\n        \"password\": \"123456\"\n      },\n      \"sysop\": true\n    }\n  ]\n}\n\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response also contains an IdentityListResponse JSON encoded body.</p> <pre><code>{\n  \"identities\": [\n    {\n      \"systemName\": \"consumer1\",\n      \"authenticationMethod\": \"PASSWORD\",\n      \"sysop\": false,\n      \"createdBy\": \"sysop\",\n      \"createdAt\": \"2025-03-07T12:52:30\",\n      \"updatedBy\": \"sysop\",\n      \"updatedAt\": \"2025-03-07T12:59:01\"\n    },\n    {\n      \"systemName\": \"provider1\",\n      \"authenticationMethod\": \"PASSWORD\",\n      \"sysop\": true,\n      \"createdBy\": \"sysop\",\n      \"createdAt\": \"2025-03-07T12:52:30Z\",\n      \"updatedBy\": \"sysop\",\n      \"updatedAt\": \"2025-03-07T12:59:01Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. If the Authentication system needs contacting an external server during the update process, error code 503 can also be used if there was a problem with the external server. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Missing credentials\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"PUT /authentication/mgmt/identities\"\n}\n</code></pre>"},{"location":"api/authentication/identity-management-generic-http/#identity-mgmt-remove","title":"identity-mgmt-remove","text":"<p>The service operation request requires an outsourced identity related header and a List&lt;Name&gt; as query parameter, which contains the names of systems that needs to be removed.</p> <pre><code>DELETE /authentication/mgmt/identities?names=provider1&amp;names=provider2 HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The success response does not contain any response body.</p> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. If the Authentication system needs contacting an external server during the deletion process, error code 503 can also be used if there was a problem with the external server. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Invalid identity token\",\n  \"errorCode\": 401,\n  \"exceptionType\": \"AUTH\"\n}\n</code></pre>"},{"location":"api/authentication/identity-management-generic-http/#identity-mgmt-session-query","title":"identity-mgmt-session-query","text":"<p>The service operation request requires an outsourced identity related header and an IdentitySessionQueryRequest JSON encoded body.</p> <pre><code>POST /authentication/mgmt/sessions HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n  \"pagination\": {\n    \"page\": 0,\n    \"size\": 10,\n    \"direction\": \"ASC\",\n    \"sortField\": \"name\"\n  },\n  \"loginFrom\": \"2025-03-07T10:00:00Z\"\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response also contains an IdentitySessionListResponse JSON encoded body.</p> <pre><code>{\n  \"sessions\": [\n    {\n      \"systemName\": \"consumer1\",\n      \"loginTime\": \"2025-03-07T11:54:01Z\",\n      \"expirationTime\": \"2025-03-08T11:59:01Z\"\n    },\n    {\n      \"systemName\": \"sysop\",\n      \"loginTime\": \"2025-03-07T12:40:54Z\",\n      \"expirationTime\": \"2025-03-08T12:45:54Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"If size parameter is defined then page parameter cannot be undefined\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /authentication/mgmt/sessions\"\n}\n</code></pre>"},{"location":"api/authentication/identity-management-generic-http/#identity-mgmt-session-close","title":"identity-mgmt-session-close","text":"<p>The service operation request requires an outsourced identity related header and a List&lt;Name&gt; as query parameter, which contains the names of systems whose sessions needs to be closed.</p> <pre><code>DELETE /authentication/mgmt/sessions?names=consumer1 HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The success response does not contain any response body.</p> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Invalid identity token\",\n  \"errorCode\": 401,\n  \"exceptionType\": \"AUTH\"\n}\n</code></pre>"},{"location":"api/data-models/address-descriptor/","title":"AddressDescriptor","text":"Field Type Description type AddressType Network address type. address Address Address."},{"location":"api/data-models/config-map/","title":"ConfigMap","text":"<p>An Object which maps String keys String values.</p>"},{"location":"api/data-models/config-response/","title":"ConfigResponse","text":"Field Type Description map ConfigMap The actual values of the requested settings."},{"location":"api/data-models/credentials/","title":"Credentials","text":"<p>An Object which maps String keys String values.</p>"},{"location":"api/data-models/device-descriptor/","title":"DeviceDescriptor","text":"Field Type Description name Name Unique identifier of the device. metadata Metadata Additional information about the device. addresses List&lt;AddressDescriptor&gt; Different kinds of addresses of the device. createdAt DateTime Device was registered at this timestamp. updatedAt DateTime Device was modified at this timestamp."},{"location":"api/data-models/device-list-request/","title":"DeviceListRequest","text":"Field Type Mandatory Description devices List&lt;DeviceRegistrationRequest&gt; yes A list of devices."},{"location":"api/data-models/device-list-response/","title":"DeviceListResponse","text":"Field Type Description entries List&lt;DeviceDescriptor&gt; A list of devices. count Number The total number of corresponding devices."},{"location":"api/data-models/device-lookup-request/","title":"DeviceLookupRequest","text":"Field Type Mandatory Description deviceNames List&lt;Name&gt; no Requester is looking for devices with any of the specified names. addresses List&lt;Address&gt; no Requester is looking for devices with any of the specified addresses. addressType AddressType no Requester is looking for devices with the specified type of address. metadataRequirementsList List&lt;MetadataRequirements&gt; no Requester is looking for devices that are matching any of the specified metadata requirements"},{"location":"api/data-models/device-lookup-response/","title":"DeviceLookupResponse","text":"Field Type Description entries List&lt;DeviceLookupResult&gt; List of device results. count Long Number of returned devices."},{"location":"api/data-models/device-lookup-result/","title":"DeviceLookupResult","text":"Field Type Description name Name Unique identifier of the device. metadata Metadata Additional information about the device. addresses List&lt;AddressDescriptor&gt; Different kind of addresses of the device. createdAt DateTime Device was registered at this timestamp. updatedAt DateTime Device was modified at this timestamp."},{"location":"api/data-models/device-query-request/","title":"DeviceQueryRequest","text":"Field Type Mandatory Description pagination PageRequest no Paging information about the queried devices. deviceNames List&lt;Name&gt; no Requester is looking for devices with any of the specified names. addresses List&lt;Address&gt; no Requester is looking for devices with any of the specified addresses. addressType AddressType no Requester is looking for devices with the specified type of address. metadataRequirementsList List&lt;MetadataRequirements&gt; no Requester is looking for devices that are matching any of the specified metadata requirements."},{"location":"api/data-models/device-registration-request/","title":"DeviceRegistrationRequest","text":"Field Type Mandatory Description name Name yes Unique identifier of the device. metadata Metadata no Additional information about the device. addresses List&lt;Address&gt; yes Different kind of addresses of the device."},{"location":"api/data-models/device-registration-response/","title":"DeviceRegistrationResponse","text":"Field Type Description name Name Unique identifier of the device. metadata Metadata Additional information about the device. addresses List&lt;AddressDescriptor&gt; Different kind of addresses of the registered device. createdAt DateTime Device was registered at this timestamp. updatedAt DateTime Device was modified at this timestamp."},{"location":"api/data-models/error-response/","title":"ErrorResponse","text":"Field Type Description errorMessage String Description of the error. errorCode Integer Numerical code of the error. exceptionType ErrorType Type value of the error. origin String Origin of the error."},{"location":"api/data-models/identity-change-request/","title":"IdentityChangeRequest","text":"Field Type Mandatory Description systemName Name yes The requester of the operation. credentials Credentials yes Credential information related to the system. newCredentials Credentials yes The new credential information that replaces the current one."},{"location":"api/data-models/identity-list-create-request/","title":"IdentityListCreateRequest","text":"Field Type Mandatory Description authenticationMethod AuthenticationMethod yes The authentication method all the identities use. identities List&lt;IdentityMgmtRequest&gt; yes A list of identities."},{"location":"api/data-models/identity-list-response/","title":"IdentityListResponse","text":"Field Type Description identities List&lt;IdentityResult&gt; A page of identities. count Number Total number of identities that match the filters."},{"location":"api/data-models/identity-list-update-request/","title":"IdentityListUpdateRequest","text":"Field Type Mandatory Description identities List&lt;IdentityMgmtRequest&gt; yes A list of identities."},{"location":"api/data-models/identity-mgmt-request/","title":"IdentityMgmtRequest","text":"Field Type Mandatory Description systemName Name yes Unique identifier of the identifiable system. credentials Credentials yes Authentication method-specific credential information of the system. sysop Boolean no It determines whether the identifiable system has higher level administration rights or not."},{"location":"api/data-models/identity-query-request/","title":"IdentityQueryRequest","text":"Field Type Mandatory Description pagination PageRequest no Page-related parameters. namePart String no Requester is looking for identities with system names containing the specified text. isSysop Boolean no Requester is looking for identities that have/do not have higher level administration rights depending of the specified value. createdBy Name no Requester is looking for identities that have been created by the specified identity. creationFrom DateTime no Requester is looking for identities that were created after the specified time. creationTo DateTime no Requester is looking for identities that were created before the specified time. hasSession Boolean no Requester is looking for identities that have/do not have active session at the moment."},{"location":"api/data-models/identity-request/","title":"IdentityRequest","text":"Field Type Mandatory Description systemName Name yes The requester of the operation. credentials Credentials yes Credential information related to the system."},{"location":"api/data-models/identity-response/","title":"IdentityResponse","text":"Field Type Description token Identity Proof of identity token that is assigned to the requester system for a session. expirationTime DateTime Token is valid until this time."},{"location":"api/data-models/identity-result/","title":"IdentityResult","text":"Field Type Description systemName Name Unique identifier of the identified system. authenticationMethod AuthenticationMethod The authentication method the identity uses. sysop Boolean It determines whether the identified system has higher level administration rights or not. createdBy Name The identity was created by this identified system. createdAt DateTime Identity was created at this timestamp. updatedBy Name The identity was modified by this identified system. updatedAt DateTime Identity was modified at this timestamp."},{"location":"api/data-models/identity-session-list-response/","title":"IdentitySessionListResponse","text":"Field Type Description sessions List&lt;IdentitySessionResult&gt; A page of sessions. count Number Total number of sessions that match the filters."},{"location":"api/data-models/identity-session-query-request/","title":"IdentitySessionQueryRequest","text":"Field Type Mandatory Description pagination PageRequest no Page-related parameters. namePart String no Requester is looking for active sessions of systems with names containing the specified text. loginFrom DateTime no Requester is looking for active sessions that were created after the specified time. loginTo DateTime no Requester is looking for active sessions that were created before the specified time."},{"location":"api/data-models/identity-session-result/","title":"IdentitySessionResult","text":"Field Type Description systemName Name Unique identifier of the identified system. loginTime DateTime Session was created at this timestamp. expirationTime DateTime Session will expire at this timestamp."},{"location":"api/data-models/identity-verify-response/","title":"IdentityVerifyResponse","text":"Field Type Description verified Boolean The result of the verification. systemName Name The name of the verified system. Empty if the verification was unsuccessful. sysop Boolean A flag that determines whether the verified system has higher level administrative rights. Empty the if verification was unsuccessful. loginTime DateTime The system started its active session at this time. Empty if the verification was unsuccessful. expirationTime DateTime The verified token is valid until this time. Empty if the verification was unsuccessful."},{"location":"api/data-models/identity/","title":"Identity","text":"<p>An Object which describes the identity of a system. It also contains whether the identified system has higher level administrative rights.</p>"},{"location":"api/data-models/interface-template-descriptor/","title":"InterfaceTemplateDescriptor","text":"Field Type Description name Name Unique name of the interface template. protocol Protocol Protocol of the interface template. propertyRequirements List&lt;InterfaceTemplatePropertyDescriptor&gt; Properties of the interface template. createdAt DateTime Interface template was registered at this timestamp. updatedAt DateTime Interface template was modified at this timestamp."},{"location":"api/data-models/interface-template-list-request/","title":"InterfaceTemplateListRequest","text":"Field Type Mandatory Description interfaceTemplates List&lt;InterfaceTemplateRequest&gt; yes A list of interface templates."},{"location":"api/data-models/interface-template-list-response/","title":"InterfaceTemplateListResponse","text":"Field Type Description entries List&lt;InterfaceTemplateDescriptor&gt; A list of interface templates. count Number The total number of the corresponding interface templates."},{"location":"api/data-models/interface-template-property-descriptor/","title":"InterfacePropertyDescriptor","text":"Field Type Description name String Name of the property. mandatory Boolean True if the property is mandatory, false if optional. validator PropertyValidator Name of the validator assigned to the property. validatorParams List&lt;String&gt; Parameter values of the validator (if needed)."},{"location":"api/data-models/interface-template-property-request/","title":"InterfaceTemplatePropertyRequest","text":"Field Type Mandatory Description name String yes Name of the property. mandatory Boolean yes True if the property is mandatory, false if optional. validator PropertyValidator no Name of the validator assigned to the property. validatorParams List&lt;String&gt; no Parameter values of the validator."},{"location":"api/data-models/interface-template-query-request/","title":"InterfaceTemplateQueryRequest","text":"Field Type Mandatory Description pagination PageRequest no Paging information about the queried interface templates. templateNames List&lt;Name&gt; no Requester is looking for interface templates with any of the specified names. protocols List&lt;Protocol&gt; no Requester is looking for interface templates with any of the specified protocols."},{"location":"api/data-models/interface-template-request/","title":"InterfaceTemplateRequest","text":"Field Type Mandatory Description name Name yes Unique name of the interface template. protocol Protocol yes Protocol of the interface template. propertyRequirements List&lt;InterfaceTemplatePropertyRequest&gt; yes Properties of the interface template."},{"location":"api/data-models/log-entry/","title":"LogEntry","text":"Field Type Description logId String Unique identifier of the entry. entryDate DateTime The timestamp of the entry. logger String The logger that created the entry. severity LogSeverity The severity of the entry. message String The log message. exception String If the log entry is an error, information of the related exception may appear here."},{"location":"api/data-models/log-request/","title":"LogRequest","text":"Field Type Mandatory Description pagination PageRequest no Page-related parameters. from DateTime no Requester is looking for log entries with timestamp that does not precede this one. to DateTime no Requester is looking for log entries with timestamp that does not succeed this one. severity LogSeverity no Requester is looking for log entries with severity that equals to or is higher than the specified one. loggerStr String no Requester is looking for log entries with logger whose name contains the specified text."},{"location":"api/data-models/log-response/","title":"LogResponse","text":"Field Type Description entries List&lt;LogEntry&gt; A page of log entries. count Number Total number of entries that match the filters."},{"location":"api/data-models/metadata-requirements/","title":"MetadataRequirements","text":"<p>A special Object which maps String keys to Object, primitive or list values, where</p> <ul> <li> <p>Keys can be paths (or multi-level keys) which access a specific value in a Metadata structure, where parts of the path are delimited with dot character (e.g. in case of \u201dkey.subkey\u201d path we are looking for the key named \u201dkey\u201d in the metadata, which is associated with an embedded object and in this object we are looking for the key named \u201dsubkey\u201d).</p> </li> <li> <p>Values are special Objects with two fields: an \"operation\" (e.g. less than) and an actual value (e.g. a number). A metadata is matching a requirement if the specified operation returns true using the metadata value referenced by a key path as first and the actual value as second operands.</p> </li> <li> <p>Alternatively, values can be ordinary primitives, lists or Objects. In this case the \"operation\" is equals by default.</p> </li> </ul>"},{"location":"api/data-models/metadata-requirements/#operations","title":"Operations","text":"<p>all kind of values (any) - all kind of values (any)</p> <p><code>EQUALS</code>, <code>NOT_EQUALS</code></p> <p>text-text</p> <p><code>EQUALS_IGNORE_CASE</code>, <code>NOT_EQUALS_IGNORE_CASE</code>, <code>INCLUDES</code>, <code>NOT_INCLUDES</code>, <code>INCLUDES_IGNORE_CASE</code>, <code>NOT_INCLUDES_IGNORE_CASE</code>, <code>STARTS_WITH</code>, <code>NOT_STARTS_WITH</code>, <code>STARTS_WITH_IGNORE_CASE</code>, <code>NOT_STARTS_WITH_IGNORE_CASE</code>, <code>ENDS_WITH</code>, <code>NOT_ENDS_WITH</code>, <code>ENDS_WITH_IGNORE_CASE</code>, <code>NOT_ENDS_WITH_IGNORE_CASE</code>, <code>REGEXP</code></p> <p>number-number</p> <p><code>LESS_THAN</code>, <code>LESS_THAN_OR_EQUALS_TO</code>, <code>GREATER_THAN</code>, <code>GREATER_THAN_OR_EQUALS_TO</code></p> <p>text or list - number</p> <p><code>SIZE_EQUALS</code>, <code>SIZE_NOT_EQUALS</code></p> <p>list - any</p> <p><code>CONTAINS</code>, <code>NOT_CONTAINS</code></p> <p>any - list</p> <p><code>IN</code>, <code>NOT_IN</code></p>"},{"location":"api/data-models/metadata/","title":"Metadata","text":"<p>An Object which maps String keys to primitive, Object or List values.</p>"},{"location":"api/data-models/mqtt-request-template/","title":"MqttRequestTemplate","text":"Field Type Mandatory Description traceId String no Any kind of string choosen by the requester. authentication String yes Authentication related data. responseTopic String yes The topic on which the response is expected. qosRequirement MQTTQoS no Required response MQTT Quality of Service. params Map no Request parameters as string key-value pairs. payload Object no Any kind of data object."},{"location":"api/data-models/mqtt-response-template/","title":"MqttResponseTemplate","text":"Field Type Description status Integer Response status code. traceId String The string identifier given by the requester. receiver Name Unique identifier of the system to which the response message is addressed. payload Object Any kind of data object."},{"location":"api/data-models/page-request/","title":"PageRequest","text":"Field Type Mandatory Description pageNumber Number no (yes) The number of the requested page. It is mandatory if page size is specified. pageSize Number no (yes) The number of entries on the requested page. It is mandatory if page number is specified. pageSortField String no The identifier of the field which must be used to sort the entries. pageDirection Direction no The direction of the sorting."},{"location":"api/data-models/property-map/","title":"PropertyMap","text":"<p>An Object which maps String keys to String values.</p>"},{"location":"api/data-models/service-create-list-request/","title":"ServiceCreateListRequest","text":"Field Type Mandatory Description instances List&lt;ServiceRequest&gt; yes A list of service instances."},{"location":"api/data-models/service-definition-descriptor/","title":"ServiceDefinitionDescriptor","text":"Field Type Description name Name Unique identifier of the service definition. createdAt DateTime Service definition was registered at this timestamp. updatedAt DateTime Service definition was modified at this timestamp."},{"location":"api/data-models/service-definition-list-request/","title":"ServiceDefinitionListRequest","text":"Field Type Mandatory Description serviceDefinitionNames List&lt;Name&gt; yes A list of service definition names."},{"location":"api/data-models/service-definition-list-response/","title":"ServiceDefinitionListResponse","text":"Field Type Description entries List&lt;ServiceDefinitionDescriptor&gt; A list of service definitions. count Number The total number of corresponding service definitions."},{"location":"api/data-models/service-definition-remove-request/","title":"ServiceDefinitionRemoveRequest","text":"Field Type Mandatory Description names List&lt;Name&gt; yes Names of the service definitions that need to be removed."},{"location":"api/data-models/service-instance-descriptor/","title":"ServiceInstanceDescriptor","text":"Field Type Description instanceId Name Unique identifier of the service instance. provider SystemDescriptor Information about the service instance provider system. serviceDefinition ServiceDefinitionDescriptor Information about the service definition. version Version Version of the service instance. expiresAt DateTime The moment of the future from which the service instance will not be available. metadata Metadata Additional information about the service instance. interfaces List&lt;ServiceInterfaceDescriptor&gt; Available access interfaces of the service instance. createdAt DateTime Service instance was registered at this timestamp. updatedAt DateTime Service instance was modified at this timestamp."},{"location":"api/data-models/service-interface-descriptor/","title":"ServiceInterfaceDescriptor","text":"Field Type Description templateName Name The name of the interface template that describes the interface structure. protocol Protocol The communication protocol of the interface. policy SecurityPolicy The security of the interface. properties Metadata Interface template-specific data."},{"location":"api/data-models/service-interface-request/","title":"ServiceInterfaceRequest","text":"Field Type Mandatory Description templateName Name yes The name of the interface template that describes the interface structure. protocol Protocol no (yes) The communication protocol of the interface. Only mandatory if the interface template is not previously known in the Local Cloud. policy SecurityPolicy yes The security of the interface. properties Metadata yes Interface template-specific data."},{"location":"api/data-models/service-list-response/","title":"ServiceListResponse","text":"Field Type Description entries List&lt;ServiceInstanceDescriptor&gt; A list of service instances. count Number The total number of corresponding service instances."},{"location":"api/data-models/service-lookup-request/","title":"ServiceLookupRequest","text":"Field Type Mandatory Description instanceIds List&lt;ServiceInstanceID&gt; no Requester is looking for service instances with any of the specified identifiers. Mandatory if no providerNames nor serviceDefinitionNames are specified. providerNames List&lt;Name&gt; no Requester is looking for service instances that are provided by any of the specified systems. Mandatory if no serviceInstanceIds nor serviceDefinitionNames are specified. serviceDefinitionNames List&lt;Name&gt; no Requester is looking for service instances with any of the specified service definition names. Mandatory if no serviceInstanceIds nor providerNames are specified. versions List&lt;Version&gt; no Requester is looking for service instances with any of the specified versions. alivesAt DateTime no Requester is looking for service instances that will be available at the specified moment of the future. metadataRequirementsList List&lt;MetadataRequirements&gt; no Requester is looking for service instances that are matching any of the specified metadata requirements. addressTypes List&lt;AddressType&gt; no Requester is looking for service instances with any of the specified address types. interfaceTemplateNames List&lt;Name&gt; no Requester is looking for service instances with any of the specified interface template names. interfacePropertyRequirementsList List&lt;MetadataRequirements&gt; no Requester is looking for service instances with interfaces that are matching any of the specified properties requirements. policies List&lt;SecurityPolicy&gt; no Requester is looking for service instances with any of the specified security policies."},{"location":"api/data-models/service-lookup-response/","title":"ServiceLookupResponse","text":"Field Type Description entries List&lt;ServiceLookupResult&gt; List of service instance results. count Number Number of returned service instances."},{"location":"api/data-models/service-lookup-result/","title":"ServiceLookupResult","text":"Field Type Description instanceId ServiceInstanceID Unique identifier of the service instance. provider SystemDescriptor Information about the service instance provider system. serviceDefinition ServiceDefinitionDescriptor Information about the service definition. version Version Version of the service instance. expiresAt DateTime The moment of the future from which the service instance will not be available. metadata Metadata Additional information about the service instance. interfaces List&lt;ServiceInterfaceDescriptor&gt; Available access interfaces of the service instance. createdAt DateTime Service instance was registered at this timestamp. updatedAt DateTime Service instance was modified at this timestamp."},{"location":"api/data-models/service-orchestration-flag/","title":"ServiceOrchestrationFlag","text":"<p>Specific String:Boolean pair to control the orchestration process. Possible values:</p> <ul> <li><code>MATCHMAKING</code>: If true orchestration process includes a matchmaking process in order to return only one matching service instance if any. If false, orchestration process returns all the matching service instances if any.</li> <li><code>ONLY_PREFERRED</code>: If true, orchestration process considers only those matching service instances that are provided by a preferred provider if any. If false, but preferred providers are specified and have matching service instances, then orchestration process considers only those service instances that are provided by a preferred provider. Otherwise, non-preferred providers are considered.</li> <li><code>ONLY_EXCLUSIVE</code>: If true, orchestration process considers only those matching service instances that are allows exclusivity. It automatically results <code>MATCHMAKING:true</code> as well. If false, but exclusivity duration is specified and there are matching services with exclusivity allowed, then orchestration process considers only those service instances that allows exclusivity. Otherwise, service instances without exclusivity are considered.</li> <li><code>ALLOW_INTERCLOUD</code>: If true, orchestration process considers matching service instances from neighbor clouds when there are no local hits. Orchestrating from neighbor clouds automatically results <code>MATCHMAKING:true</code>. If false, orchestration process doesn't consider matching service instances from neighbor clouds when there are no local hits.</li> <li><code>ONLY_INTERCLOUD</code>: If true, orchestration process considers matching service instances only from the neighbor clouds. It automatically results <code>MATCHMAKING:true</code> as well. If false, orchestration process considers matching service instances from the local could in first hand and only considers matching service instances from the neighbor clouds when <code>ALLOW_INTERCLOUD:true</code>.</li> <li><code>ALLOW_TRANSLATION</code>: If true, orchestration process considers matching, but non-native (different interface) service instances when there are no native hits. It automatically results <code>MATCHMAKING:true</code> as well. If false, orchestration process considers only native matching service instances.</li> </ul>"},{"location":"api/data-models/service-orchestration-notify-interface/","title":"ServiceOrchestrationNotifyInterface","text":"Field Type Mandatory Description protocol Protocol yes Communication protocol to be used for sending notification. properties PropertyMap yes Interface properties belonged to the specified protocol."},{"location":"api/data-models/service-orchestration-request/","title":"ServiceOrchestrationRequest","text":"Field Type Mandatory Description serviceRequirement ServiceOrchestrationRequiremet yes Details of the targeted service. orchestrationFlags List&lt;ServiceOrchestrationFlag&gt; no List of orchestration flag to control the orchestartion process. qosRequirements PropertyMap no Quality of service requirements. exclusivityDuration Name no The interval the service wanted to be exclusive."},{"location":"api/data-models/service-orchestration-requirement/","title":"ServiceOrchestrationRequirement","text":"Field Type Mandatory Description serviceDefinition Name yes/no The required service definition name. Mandatory in case of dynamic strategy. operations List&lt;Name&gt; yes/no The required service operation names. Exactly one operation must be defined, when the following orchestration flags are true: <code>ONLY_INTERCLOUD</code>, <code>ALLOW_INTERCLOUD</code>, <code>ALLOW_TRANSLATION</code> versions List&lt;Version&gt; no The required service versions. alivesAt DateTime no The orchestrated service must be alive by this time. metadataRequirements List&lt;MetadataRequirements&gt; no The orchestrated service must meet at least to one of the specified metadata reuirement. interfaceTemplateNames List&lt;Name&gt; no The orchestrated service must offer at least one from the specified interface template names. interfaceAddressTypes List&lt;AddressType&gt; no The orchestrated service must offer at least one from the specified interface address types. interfacePropertyRequirements List&lt;MetadataRequirements&gt; no The orchestrated service must offer at least one interface that meets with one of the specified property requirements. securityPolicies List&lt;SecurityPolicy&gt; no The orchestrated service must meet with one of the specified security policies. preferredProviders List&lt;Name&gt; no Provider system names specified here have priority."},{"location":"api/data-models/service-orchestration-response/","title":"ServiceviceOrchestrationResponse","text":"Field Type Description results List&lt;ServiceOrchestrationResult&gt; List of matching service instances. warnings List&lt;String&gt; Warning message list."},{"location":"api/data-models/service-orchestration-result/","title":"ServiceOrchestrationResult","text":"Field Type Description serviceInstanceId ServiceInstanceID Unique identifier of the service instance. providerName Name Unique identifier of the provider system. serviceDefinition Name Unique identifier of the service definition. version Version Version of the service instance. aliveUntil DateTime The service instance is available until this time. exclusiveUntil DateTime The service instance is reserved until this time. metadata Metadata Additional information about the service instance. interfaces List&lt;ServiceInterfaceDescriptor&gt; Available access interfaces of the service instance."},{"location":"api/data-models/service-orchestration-subscription-request/","title":"ServiceOrchestrationSubscriptionRequest","text":"Field Type Mandatory Description orchestrationRequest ServiceOrchestrationRequest yes Orchestration request details. notifyInterface ServiceOrchestrationNotifyInterface yes Interface details for sending push notifications. duration Number no The interval while the subscription is active."},{"location":"api/data-models/service-query-request/","title":"ServiceQueryRequest","text":"Field Type Mandatory Description pagination PageRequest no Paging information about the queried service instances. instanceIds List&lt;ServiceInstanceID&gt; no (yes) Requester is looking for service instances with any of the specified identifiers. Mandatory if no providerNames nor serviceDefinitionNames are specified. providerNames List&lt;Name&gt; no (yes) Requester is looking for service instances that are provided by any of the specified systems. Mandatory if no serviceInstanceIds nor serviceDefinitionNames are specified. serviceDefinitionNames List&lt;Name&gt; no (yes) Requester is looking for service instances with any of the specified service definition names. Mandatory if no serviceInstanceIds nor providerNames are specified. versions List&lt;Version&gt; no Requester is looking for service instances with any of the specified versions. alivesAt DateTime no Requester is looking for service instances that will be available at the specified moment of the future. metadataRequirementsList List&lt;MetadataRequirements&gt; no Requester is looking for service instances that are matching any of the specified metadata requirements. addressTypes List&lt;AddressType&gt; no Requester is looking for service instances with interfaces whose access addresses are matching any of these types. interfaceTemplateNames List&lt;Name&gt; no Requester is looking for service instances with any of the specified interface template names. interfacePropertyRequirementsList List&lt;MetadataRequirements&gt; no Requester is looking for service instances with interfaces that are matching any of the specified properties requirements. policies List&lt;SecurityPolicy&gt; no Requester is looking for service instances with any of the specified security policies."},{"location":"api/data-models/service-registration-request/","title":"ServiceRegistrationRequest","text":"Field Type Mandatory Description serviceDefinitionName Name yes The service definition of the instance. version Version no Version of the service instance. expiresAt DateTime no The moment of the future from which the service instance will not be available. metadata Metadata no Additional information about the service instance. interfaces List&lt;ServiceInterfaceRequest&gt; yes Available access interfaces of the service instance."},{"location":"api/data-models/service-registration-response/","title":"ServiceRegistrationResponse","text":"Field Type Description instanceId ServiceInstanceID Unique identifier of the registered service instance. provider SystemDescriptor Information about the service instance provider system. serviceDefinition ServiceDefinitionDescriptor Information about the service definition. version Version Version of the service instance. expiresAt DateTime The moment of the future from which the service instance will not be available. metadata Metadata Additional information about the registered service instance. interfaces List&lt;ServiceInterfaceDescriptor&gt; Available access interfaces of the service instance. createdAt DateTime Service instance was registered at this timestamp. updatedAt DateTime Service instance was modified at this timestamp."},{"location":"api/data-models/service-request/","title":"ServiceRequest","text":"Field Type Mandatory Description systemName Name yes The provider of the instance. serviceDefinitionName Name yes The service definition of the instance. version Version no Version of the service instance. expiresAt DateTime no The moment of the future from which the service instance will not be available. metadata Metadata no Additional information about the service instance. interfaces List&lt;ServiceInterfaceRequest&gt; yes Available access interfaces of the service instance."},{"location":"api/data-models/service-update-list-request/","title":"ServiceUpdateListRequest","text":"Field Type Mandatory Description instances List&lt;ServiceUpdateRequest&gt; yes A list of service instances."},{"location":"api/data-models/service-update-request/","title":"ServiceUpdateRequest","text":"Field Type Mandatory Description instanceId ServiceInstanceID yes The unique identifier of the service instance. expiresAt DateTime no The moment of the future from which the service instance will not be available. metadata Metadata no Additional information about the service instance. interfaces List&lt;ServiceInterfaceRequest&gt; yes Available access interfaces of the service instance."},{"location":"api/data-models/system-descriptor/","title":"SystemDescriptor","text":"Field Type Description name Name Unique identifier of the system. metadata Metadata Additional information about the system. version Version Version of the system. addresses List&lt;AddressDescriptor&gt; Different kind of addresses of the system. device DeviceDescriptor Information about the device on which the system is running. createdAt DateTime System was registered at this timestamp. updatedAt DateTime System was modified at this timestamp."},{"location":"api/data-models/system-list-request/","title":"SystemListRequest","text":"Field Type Mandatory Description systems List&lt;SystemRequest&gt; yes A list of systems."},{"location":"api/data-models/system-list-response/","title":"SystemListResponse","text":"Field Type Description entries List&lt;SystemDescriptor&gt; A list of systems. count Number The total number of corresponding systems."},{"location":"api/data-models/system-lookup-request/","title":"SystemLookupRequest","text":"Field Type Mandatory Description systemNames List&lt;Name&gt; no Requester is looking for systems with any of the specified names. addresses List&lt;Address&gt; no Requester is looking for systems with any of the specified addresses. addressType AddressType no Requester is looking for systems with the specified type of address. metadataRequirementsList List&lt;MetadataRequirements&gt; no Requester is looking for systems that are matching any of the specified metadata requirements. versions List&lt;Version&gt; no Requester is looking for systems with any of the specified versions. deviceNames List&lt;Name&gt; no Requester is looking for systems that are running on any of the specified devices."},{"location":"api/data-models/system-lookup-response/","title":"SystemLookupResponse","text":"Field Type Description entries List&lt;SystemLookupResult&gt; List of system results. count Number Number of returned systems."},{"location":"api/data-models/system-lookup-result/","title":"SystemLookupResult","text":"Field Type Description name Name Unique identifier of the system. metadata Metadata Additional information about the system. version Version Version of the system. addresses List&lt;AddressDescriptor&gt; Different kind of addresses of the system. device DeviceDescriptor Information about the device on which the system is running createdAt DateTime System was registered at this timestamp. updatedAt DateTime System was modified at this timestamp."},{"location":"api/data-models/system-query-request/","title":"SystemQueryRequest","text":"Field Type Mandatory Description pagination PageRequest no Paging information about the queried systems. systemNames List&lt;Name&gt; no Requester is looking for systems with any of the specified names. addresses List&lt;Address&gt; no Requester is looking for systems with any of the specified addresses. addressType AddressType no Requester is looking for systems with the specified type of address. metadataRequirementsList List&lt;MetadataRequirements&gt; no Requester is looking for systems that are matching any of the specified metadata requirements. versions List&lt;Version&gt; no Requester is looking for systems with any of the specified versions. deviceNames List&lt;Name&gt; no Requester is looking for systems that are running on any of the specified devices."},{"location":"api/data-models/system-registration-request/","title":"SystemRegistrationRequest","text":"Field Type Mandatory Description metadata Metadata no Additional information about the system. version Version no Version of the system. addresses List&lt;Address&gt; yes Different kind of addresses of the system. deviceName Name no Unique identifier of the device on which the system is running."},{"location":"api/data-models/system-registration-response/","title":"SystemRegistrationResponse","text":"Field Type Description name Name Unique identifier of the registered system. metadata Metadata Additional information about the registered system. version Version Version of the registered system. addresses List&lt;AddressDescriptor&gt; Different kind of addresses of the registered system. device DeviceDescriptor Information about the device on which the system is running. createdAt DateTime System was registered at this timestamp. updatedAt DateTime System was modified at this timestamp."},{"location":"api/data-models/system-request/","title":"SystemRequest","text":""},{"location":"api/data-models/system-request/#systemrequest_1","title":"SystemRequest","text":"Field Type Mandatory Description name Name yes The name of the system. metadata Metadata no Additional information about the system. version Version no Version of the system. addresses List&lt;Address&gt; yes Different kinds of addresses of the system. deviceName Name no Unique identifier of the device on which the system is running."},{"location":"api/general/general-management-generic-http/","title":"general-management IDD","text":"<p>GENERIC-HTTP &amp; GENERIC-HTTPS</p>"},{"location":"api/general/general-management-generic-http/#overview","title":"Overview","text":"<p>This page describes the GENERIC-HTTP and GENERIC-HTTPS service interface of general-management which allows (with operator role or proper permissions) to get some information about the hosting system\u2019s behavior, such as log entries and configuration settings. It is implemented using protocol, encoding as stated in the following tables:</p> <p>GENERIC-HTTP</p> Profile type type Version Transfer protocol HTTP 1.1 Data encryption N/A - Encoding JSON RFC 8259 Compression N/A - <p>GENERIC-HTTPS</p> Profile type type Version Transfer protocol HTTPS 1.1 Data encryption TLS - Encoding JSON RFC 8259 Compression N/A - <p>Hereby the Interface Design Description (IDD) is provided to the general-management \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/general/general-management-generic-http/#interface-description","title":"Interface Description","text":""},{"location":"api/general/general-management-generic-http/#get-log","title":"get-log","text":"<p>The service operation request requires an identity related header or certificate and a LogRequest JSON encoded body.</p> <pre><code>POST /&lt;system-name&gt;/general/mgmt/logs HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n  \"pagination\": {\n    \"page\": 0,\n    \"size\": 5,\n    \"direction\": \"ASC\",\n    \"sortField\": \"entryDate\"\n  },\n  \"from\": \"2025-03-07T00:00:00Z\",\n  \"to\": \"2025-03-08T00:00:00Z\",\n  \"severity\": \"INFO\"\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response also contains an LogResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"logId\": \"1d61efc1-fb39-11ef-b55e-2cf05d74cdac\",\n      \"entryDate\": \"2025-03-07T09:46:59.203Z\",\n      \"logger\": \"eu.arrowhead.authentication.AuthenticationMain\",\n      \"severity\": \"INFO\",\n      \"message\": \"Starting AuthenticationMain using Java 21.0.5 with PID 13072 (omitted)\"\n    },\n    {\n      \"logId\": \"1d9b9d62-fb39-11ef-b55e-2cf05d74cdac\",\n      \"entryDate\": \"2025-03-07T09:46:59.212Z\",\n      \"logger\": \"eu.arrowhead.authentication.AuthenticationMain\",\n      \"severity\": \"INFO\",\n      \"message\": \"No active profile set, falling back to 1 default profile: \\\"default\\\"\"\n    },\n    {\n      \"logId\": \"1e2d2f03-fb39-11ef-b55e-2cf05d74cdac\",\n      \"entryDate\": \"2025-03-07T09:47:00.973Z\",\n      \"logger\": \"eu.arrowhead.common.http.filter.authorization.ManagementServiceFilter\",\n      \"severity\": \"INFO\",\n      \"message\": \"ManagementServiceFilter is active\"\n    },\n    {\n      \"logId\": \"1e4cec04-fb39-11ef-b55e-2cf05d74cdac\",\n      \"entryDate\": \"2025-03-07T09:47:01.058Z\",\n      \"logger\": \"eu.arrowhead.authentication.http.filter.InternalAuthenticationFilter\",\n      \"severity\": \"INFO\",\n      \"message\": \"InternalAuthenticationFilter is active\"\n    },\n    {\n      \"logId\": \"1f529c35-fb39-11ef-b55e-2cf05d74cdac\",\n      \"entryDate\": \"2025-03-07T09:47:02.897Z\",\n      \"logger\": \"eu.arrowhead.authentication.quartz.CleanerConfig$$SpringCGLIB$$0\",\n      \"severity\": \"INFO\",\n      \"message\": \"Cleaner job is initialized.\"\n    }\n  ],\n  \"count\": 26\n}\n\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Invalid time interval\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /&lt;system-name&gt;/general/mgmt/logs\"\n}\n</code></pre>"},{"location":"api/general/general-management-generic-http/#get-config","title":"get-config","text":"<p>The service operation request requires an identity related header or certificate and a List&lt;Name&gt; as query parameter, which contains the names of the desired configuration properties.</p> <pre><code>GET /&lt;system-name&gt;/general/mgmt/get-config?keys=management.policy&amp;keys=max.page.size HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response also contains an ConfigResponse JSON encoded body.</p> <pre><code>{\n  \"map\": {\n    \"management.policy\": \"authorization\",\n    \"max.page.size\": \"1000\"\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Invalid identity token\",\n  \"errorCode\": 401,\n  \"exceptionType\": \"AUTH\"\n}\n</code></pre>"},{"location":"api/serviceorchestration/orchestration-generic-http_dynamic/","title":"orchestration IDD (dynamic startegy)","text":"<p>GENERIC-HTTP &amp; GENERIC-HTTPS</p>"},{"location":"api/serviceorchestration/orchestration-generic-http_dynamic/#overview","title":"Overview","text":"<p>This page describes the GENERIC-HTTP and GENERIC-HTTPS service interface of orchestration, which provides runtime (late) binding between application systems. It\u2019s implemented using protocol, encoding as stated in the following tables:</p> <p>GENERIC-HTTP</p> Profile type type Version Transfer protocol HTTP 1.1 Data encryption N/A - Encoding JSON RFC 8259 Compression N/A - <p>GENERIC-HTTPS</p> Profile type type Version Transfer protocol HTTPS 1.1 Data encryption TLS - Encoding JSON RFC 8259 Compression N/A - <p>Hereby the Interface Design Description (IDD) is provided to the orchestration \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/serviceorchestration/orchestration-generic-http_dynamic/#interface-description","title":"Interface Description","text":""},{"location":"api/serviceorchestration/orchestration-generic-http_dynamic/#pull","title":"pull","text":"<p>The service operation request requires an identity related header or certificate and a ServiceOrchestrationRequest JSON encoded body.</p> <pre><code>POST /serviceorchestration/orchestration/pull HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n   \"serviceRequirement\":{\n      \"serviceDefinition\":\"kelvin-info\",\n      \"operations\":[\n         \"query-temperature\"\n      ],\n      \"versions\":[],\n      \"alivesAt\":\"2025-10-05T11:35:14Z\",\n      \"metadataRequirements\":[],\n      \"interfaceTemplateNames\":[\n         \"generic-https\"\n      ],\n      \"interfaceAddressTypes\":[\n         \"HOSTNAME\",\n         \"IPV4\"\n      ],\n      \"interfacePropertyRequirements\":[],\n      \"securityPolicies\":[\n         \"TIME_LIMITED_TOKEN_AUTH\"\n      ],\n      \"preferredProviders\":[]\n   },\n   \"orchestrationFlags\":{\n      \"MATCHMAKING\":\"true\",\n      \"ALLOW_TRANSLATION\":\"true\",\n      \"ONLY_PREFERRED\":\"false\",\n      \"ONLY_EXCLUSIVE\":\"false\",\n      \"ALLOW_INTERCLOUD\":\"false\",\n      \"ONLY_INTERCLOUD\":\"false\"\n   },\n   \"qosRequirements\":{\n      \"max-latency-ms\":\"10\"\n   },\n   \"exclusivityDuration\":600\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and with a ServiceOrchestrationResponse JSON encoded body.</p> <pre><code>{\n   \"results\":[\n      {\n         \"serviceId\":\"temperature-provider2::kelvin-info::1.0.0\",\n         \"providerName\":\"temperature-provider2\",\n         \"serviceDefinitition\":\"kelvin-info\",\n         \"version\":\"1.0.0\",\n         \"aliveUntil\":\"2028-11-08T10:21:11Z\",\n         \"exclusiveUntil\":\"2025-10-05T11:35:14Z\",\n         \"metadata\":{\n            \"margin-of-error\":0.5\n         },\n         \"interfaces\":[\n            {\n               \"templateName\":\"generic-https\",\n               \"protocol\":\"https\",\n               \"policy\":\"TIME_LIMITED_TOKEN_AUTH\",\n               \"properties\":{\n                  \"accessAddresses\":[\n                     \"192.168.56.116\",\n                     \"tp2.greenhouse.com\"\n                  ],\n                  \"accessPort\":8080,\n                  \"operations\":{\n                     \"query-temperature\":{\n                        \"path\":\"/query\",\n                        \"method\":\"GET\"\n                     }\n                  },\n                  \"basePath\":\"/kelvin\"\n               }\n            }\n         ]\n      }\n   ],\n   \"warnings\":[\n      \"part_time_exclusivity\"\n   ]\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"QoS requirements are present, but QoS support is not enabled\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceorchestration/orchestration/pull\"\n}\n</code></pre>"},{"location":"api/serviceorchestration/orchestration-generic-http_dynamic/#subscribe","title":"subscribe","text":"<p>The service operation request requires an identity related header or certificate and a ServiceOrchestrationSubscriptionRequest JSON encoded body.</p> <pre><code>POST /serviceorchestration/orchestration/subscribe HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n   \"orchestrationRequest\":{\n      \"serviceRequirement\":{\n         \"serviceDefinition\":\"kelvin-info\",\n         \"operations\":[\n            \"query-temperature\"\n         ],\n         \"versions\":[\n\n         ],\n         \"alivesAt\":\"2025-10-05T11:35:14Z\",\n         \"metadataRequirements\":[\n\n         ],\n         \"interfaceTemplateNames\":[\n            \"generic-https\"\n         ],\n         \"interfaceAddressTypes\":[\n            \"HOSTNAME\",\n            \"IPV4\"\n         ],\n         \"interfacePropertyRequirements\":[\n\n         ],\n         \"securityPolicies\":[\n            \"TIME_LIMITED_TOKEN_AUTH\"\n         ],\n         \"preferredProviders\":[\n\n         ]\n      },\n      \"orchestrationFlags\":{\n         \"MATCHMAKING\":\"true\",\n         \"ALLOW_TRANSLATION\":\"true\",\n         \"ONLY_PREFERRED\":\"false\",\n         \"ONLY_EXCLUSIVE\":\"false\",\n         \"ALLOW_INTERCLOUD\":\"false\",\n         \"ONLY_INTERCLOUD\":\"false\"\n      },\n      \"qosRequirements\":{\n         \"max-latency-ms\":\"10\"\n      },\n      \"exclusivityDuration\":600\n   },\n   \"notifyInterface\":{\n      \"protocol\":\"mqtt\",\n      \"properties\":{\n         \"topic\":\"arrowhead/orchestration-push\"\n      }\n   },\n   \"duration\":100000\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and an existing subscription was overwritten or <code>201</code> if the subscription was newly created. The response also contains a UUID text body.</p> <pre><code>d4d61873-07db-4e93-a16e-9465852bdabf\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Unsupported notify protocol.\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceorchestration/orchestration/subscribe\"\n}\n</code></pre>"},{"location":"api/serviceorchestration/orchestration-generic-http_dynamic/#unsubscribe","title":"unsubscribe","text":"<p>The service operation request requires an identity related header or certificate and a subscription UUID as path parameter.</p> <pre><code>DELETE /serviceorchestration/orchestration/unsubscribe/d4d61873-07db-4e93-a16e-9465852bdabf HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and an existing subscription was removed and <code>204</code> if no matching subscription was found. The success response does not contain any response body.</p> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Invalid subscription id.\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"DELETE /serviceorchestration/orchestration/unsubscribe\"\n}\n</code></pre>"},{"location":"api/serviceregistry/device-discovery-generic-http/","title":"device-discovery IDD","text":"<p>GENERIC-HTTP &amp; GENERIC-HTTPS</p>"},{"location":"api/serviceregistry/device-discovery-generic-http/#overview","title":"Overview","text":"<p>This page describes the GENERIC-HTTP and GENERIC-HTTPS service interface of device-discovery, which enables both application and core/support systems to lookup, register and revoke devices on which the Local Cloud\u2019s systems are running. Device representation is not necessary for the base functionalities of a Local Cloud but in certain use cases (e.g. enabling onboarding) is needed. It\u2019s implemented using protocol, encoding as stated in the following tables:</p> <p>GENERIC-HTTP</p> Profile type type Version Transfer protocol HTTP 1.1 Data encryption N/A - Encoding JSON RFC 8259 Compression N/A - <p>GENERIC-HTTPS</p> Profile type type Version Transfer protocol HTTPS 1.1 Data encryption TLS - Encoding JSON RFC 8259 Compression N/A - <p>Hereby the Interface Design Description (IDD) is provided to the device-discovery \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/serviceregistry/device-discovery-generic-http/#interface-description","title":"Interface Description","text":""},{"location":"api/serviceregistry/device-discovery-generic-http/#register","title":"register","text":"<p>The service operation request requires an identity related header or certificate and a DeviceRegistrationRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/device-discovery/register HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n   \"name\":\"thermometer2\",\n   \"metadata\":{\n      \"scales\":[\n         \"Kelvin\",\n         \"Celsius\"\n      ],\n      \"max-temperature\":{\n         \"Kelvin\":310,\n         \"Celsius\":40\n      },\n      \"min-temperature\":{\n         \"Kelvin\":260,\n         \"Celsius\":-10\n      }\n   },\n   \"addresses\":[      \n      \"81:ef:1a:44:7a:f5\"\n   ]\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and the device entity is already existing or <code>201</code> if the entity was newly created. The response also contains a DeviceRegistrationResponse JSON encoded body.</p> <pre><code>{\n   \"name\":\"thermometer2\",\n   \"metadata\":{\n      \"scales\":[\n         \"Kelvin\",\n         \"Celsius\"\n      ],\n      \"max-temperature\":{\n         \"Kelvin\":310,\n         \"Celsius\":40\n      },\n      \"min-temperature\":{\n         \"Kelvin\":260,\n         \"Celsius\":-10\n      }\n   },\n   \"addresses\":[\n      {\n         \"type\":\"MAC\",\n         \"address\":\"81:ef:1a:44:7a:f5\"\n      }\n   ],\n   \"createdAt\":\"2024-11-04T01:53:02Z\",\n   \"updatedAt\":\"2024-11-04T01:53:02Z\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n    \"errorMessage\": \"Device name is missing.\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"POST /serviceregistry/device-discovery/register\"\n}\n</code></pre>"},{"location":"api/serviceregistry/device-discovery-generic-http/#lookup","title":"lookup","text":"<p>The service operation request requires an identity related header or certificate and may optionally include a DeviceLookupRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/device-discovery/lookup HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n   \"deviceNames\":[\n      \"thermometer2\"\n   ],\n   \"addresses\":[\n      \"81:ef:1a:44:7a:f5\"\n   ],\n   \"addressType\":\"MAC\",\n   \"metadataRequirementList\":[\n      {\n         \"max-temperature.Celsius\":{\n            \"op\":\"LESS_THAN\",\n            \"value\":50\n         }\n      }\n   ]\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and with a DeviceLookupResponse JSON encoded body.</p> <pre><code>{\n   \"entries\":[\n      {\n         \"name\":\"thermometer2\",\n         \"metadata\":{\n            \"scales\":[\n               \"Kelvin\",\n               \"Celsius\"\n            ],\n            \"max-temperature\":{\n               \"Kelvin\":310,\n               \"Celsius\":40\n            },\n            \"min-temperature\":{\n               \"Kelvin\":260,\n               \"Celsius\":-10\n            }\n         },\n         \"addresses\":[\n            {\n               \"type\":\"MAC\",\n               \"address\":\"81:ef:1a:44:7a:f5\"\n            }\n         ],\n         \"createdAt\":\"2024-11-04T01:53:02Z\",\n         \"updatedAt\":\"2024-11-04T01:53:02Z\"\n      }\n   ],\n   \"count\":1\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> Error if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n    \"errorMessage\": \"Database operation error.\",\n    \"errorCode\": 500,\n    \"exceptionType\": \"INTERNAL_SERVER_ERROR\",\n    \"origin\": \"POST /serviceregistry/device-discovery/lookup\"\n}\n</code></pre>"},{"location":"api/serviceregistry/device-discovery-generic-http/#revoke","title":"revoke","text":"<p>The service operation request requires an identity related header or certificate and a device <code>name</code> as path parameter.</p> <pre><code>DELETE /serviceregistry/device-discovery/revoke/thermometer2 HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and an existing device entity was removed and <code>204</code> if no matching entity was found. The success response does not contain any response body.</p> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission, <code>423</code> if entity is not removable and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n    \"errorMessage\": \"Database operation error.\",\n    \"errorCode\": 500,\n    \"exceptionType\": \"INTERNAL_SERVER_ERROR\",\n    \"origin\": \"DELETE /serviceregistry/device-discovery/lookup\"\n}\n</code></pre>"},{"location":"api/serviceregistry/device-discovery-generic-mqtt/","title":"device-discovery IDD","text":"<p>GENERIC-MQTT &amp; GENERIC-MQTTS </p>"},{"location":"api/serviceregistry/device-discovery-generic-mqtt/#overview","title":"Overview","text":"<p>This page describes the GENERIC-MQTT and GENERIC-MQTTS service interface of device-discovery, which enables both application and core/support systems to lookup, register and revoke devices on which the Local Cloud\u2019s systems are running. Device representation is not necessary for the base functionalities of a Local Cloud but in certain use cases (e.g. enabling onboarding) is needed. It\u2019s implemented using protocol, encoding as stated in the following tables:</p> <p>GENERIC-MQTT</p> Profile type type Version Transfer protocol MQTT 3.1 and 3.1.1 Data encryption N/A - Encoding JSON RFC 8259 Compression N/A - <p>GENERIC-MQTTS</p> Profile type type Version Transfer protocol MQTT 3.1 and 3.1.1 Data encryption TLS - Encoding JSON RFC 8259 Compression N/A - <p>Hereby the Interface Design Description (IDD) is provided to the device-discovery \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/serviceregistry/device-discovery-generic-mqtt/#interface-description","title":"Interface Description","text":""},{"location":"api/serviceregistry/device-discovery-generic-mqtt/#register","title":"register","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a DeviceRegistrationRequest.</p> <pre><code>Topic: arrowhead/serviceregistry/device-discovery/register\n\n{\n   \"traceId\":\"&lt;trace-id&gt;\",\n   \"authentication\":\"&lt;identity-info&gt;\",\n   \"responseTopic\":\"&lt;response-topic&gt;\",\n   \"qosRequirement\":\"&lt;0|1|2&gt;\",\n   \"payload\":{\n      \"name\":\"thermometer2\",\n      \"metadata\":{\n         \"scales\":[\n            \"Kelvin\",\n            \"Celsius\"\n         ],\n         \"max-temperature\":{\n            \"Kelvin\":310,\n            \"Celsius\":40\n         },\n         \"min-temperature\":{\n            \"Kelvin\":260,\n            \"Celsius\":-10\n         }\n      },\n      \"addresses\":[\n         \"81:ef:1a:44:7a:f5\"\n      ]\n   }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully and the device entity is already existing or <code>201</code> if the entity was newly created. The response template payload is a DeviceRegistrationResponse.</p> <pre><code>{\n   \"status\":\"&lt;status-code&gt;\",\n   \"traceId\":\"&lt;trace-id&gt;\",\n   \"receiver\":\"&lt;receiver-system-identifier&gt;\",\n   \"payload\":{\n      \"name\":\"thermometer2\",\n      \"metadata\":{\n         \"scales\":[\n            \"Kelvin\",\n            \"Celsius\"\n         ],\n         \"max-temperature\":{\n            \"Kelvin\":310,\n            \"Celsius\":40\n         },\n         \"min-temperature\":{\n            \"Kelvin\":260,\n            \"Celsius\":-10\n         }\n      },\n      \"addresses\":[\n         {\n            \"type\":\"MAC\",\n            \"address\":\"81:ef:1a:44:7a:f5\"\n         }\n      ],\n      \"createdAt\":\"2024-11-04T01:53:02Z\",\n      \"updatedAt\":\"2024-11-04T01:53:02Z\"\n   }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\":\"&lt;status-code&gt;\",\n   \"traceId\":\"&lt;trace-id&gt;\",\n   \"receiver\":\"&lt;receiver-system-identifier&gt;\",\n   \"payload\":{\n      \"errorMessage\":\"Device name is missing.\",\n      \"errorCode\":400,\n      \"exceptionType\":\"INVALID_PARAMETER\",\n      \"origin\":\"arrowhead/serviceregistry/device-discovery/register\"\n   }\n}\n</code></pre>"},{"location":"api/serviceregistry/device-discovery-generic-mqtt/#lookup","title":"lookup","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a  DeviceLookupRequest.</p> <pre><code>Topic: arrowhead/serviceregistry/device-discovery/lookup\n\n{\n   \"traceId\":\"&lt;trace-id&gt;\",\n   \"authentication\":\"&lt;identity-info&gt;\",\n   \"responseTopic\":\"&lt;response-topic&gt;\",\n   \"qosRequirement\":\"&lt;0|1|2&gt;\",\n   \"payload\":{\n      \"deviceNames\":[\n         \"thermometer2\"\n      ],\n      \"addresses\":[\n         \"81:ef:1a:44:7a:f5\"\n      ],\n      \"addressType\":\"MAC\",\n      \"metadataRequirementList\":[\n         {\n            \"max-temperature.Celsius\":{\n               \"op\":\"LESS_THAN\",\n               \"value\":50\n            }\n         }\n      ]\n   }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is a DeviceLookupResponse.</p> <pre><code>{\n   \"status\":\"&lt;status-code&gt;\",\n   \"traceId\":\"&lt;trace-id&gt;\",\n   \"receiver\":\"&lt;receiver-system-identifier&gt;\",\n   \"payload\":{\n      \"entries\":[\n         {\n            \"name\":\"thermometer2\",\n            \"metadata\":{\n               \"scales\":[\n                  \"Kelvin\",\n                  \"Celsius\"\n               ],\n               \"max-temperature\":{\n                  \"Kelvin\":310,\n                  \"Celsius\":40\n               },\n               \"min-temperature\":{\n                  \"Kelvin\":260,\n                  \"Celsius\":-10\n               }\n            },\n            \"addresses\":[\n               {\n                  \"type\":\"MAC\",\n                  \"address\":\"81:ef:1a:44:7a:f5\"\n               }\n            ],\n            \"createdAt\":\"2024-11-04T01:53:02Z\",\n            \"updatedAt\":\"2024-11-04T01:53:02Z\"\n         }\n      ],\n      \"count\":1\n   }\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens.  In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\":\"&lt;status-code&gt;\",\n   \"traceId\":\"&lt;trace-id&gt;\",\n   \"receiver\":\"&lt;receiver-system-identifier&gt;\",\n   \"payload\":{\n      \"errorMessage\":\"Database operation error.\",\n      \"errorCode\":500,\n      \"exceptionType\":\"INTERNAL_SERVER_ERROR\",\n      \"origin\":\"arrowhead/serviceregistry/device-discovery/lookup\"\n   }\n}\n</code></pre>"},{"location":"api/serviceregistry/device-discovery-generic-mqtt/#revoke","title":"revoke","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is the <code>device name</code>.</p> <pre><code>Topic: arrowhead/serviceregistry/device-discovery/revoke\n\n{\n   \"traceId\":\"&lt;trace-id&gt;\",\n   \"authentication\":\"&lt;identity-info&gt;\",\n   \"responseTopic\":\"&lt;response-topic&gt;\",\n   \"qosRequirement\":\"&lt;0|1|2&gt;\",\n   \"payload\":\"thermometer2\"\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully and an existing device entity was removed and <code>204</code> if no matching entity was found. </p> <pre><code>{\n   \"status\":\"&lt;status-code&gt;\",\n   \"traceId\":\"&lt;trace-id&gt;\",\n   \"receiver\":\"&lt;receiver-system-identifier&gt;\"\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission, <code>423</code> if the entity is not removable and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\":\"&lt;status-code&gt;\",\n   \"traceId\":\"&lt;trace-id&gt;\",\n   \"receiver\":\"&lt;receiver-system-identifier&gt;\",\n   \"payload\":{\n      \"errorMessage\":\"Database operation error.\",\n      \"errorCode\":500,\n      \"exceptionType\":\"INTERNAL_SERVER_ERROR\",\n      \"origin\":\"arrowhead/serviceregistry/device-discovery/revoke\"\n   }\n}\n</code></pre>"},{"location":"api/serviceregistry/service-discovery-generic-http/","title":"service-discovery IDD","text":"<p>GENERIC-HTTP &amp; GENERIC-HTTPS</p>"},{"location":"api/serviceregistry/service-discovery-generic-http/#overview","title":"Overview","text":"<p>This page describes the GENERIC-HTTP and GENERIC-HTTPS service interface of service-discovery, which enables both application and core/support systems to lookup, register and revoke their service instances to/from the Local Cloud. It also enables to lookup for service instances. Service and service instance representation is mandatory for the base functionalities of a Local Cloud therefore it is an integral part of the implementation of the requirements in Service Registry Core System. An example of this interaction is when a provider registers its service instances to offer them to other systems in the Local Cloud. To enable other systems to use, to consume it, this service needs to be offered through the Service Registry. The interfaces are implemented using protocol, encoding as stated in the following tables:</p>"},{"location":"api/serviceregistry/service-discovery-generic-http/#interface-description","title":"Interface Description","text":"<p>GENERIC-HTTP</p> Profile type type Version Transfer protocol HTTP 1.1 Data encryption N/A - Encoding JSON RFC 8259 Compression N/A - <p>GENERIC-HTTPS</p> Profile type type Version Transfer protocol HTTPS 1.1 Data encryption TLS - Encoding JSON RFC 8259 Compression N/A - <p>Hereby the Interface Design Description (IDD) is provided to the service-discovery \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/serviceregistry/service-discovery-generic-http/#register","title":"register","text":"<p>The service operation request requires an identity related header or certificate and a ServiceRegistrationRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/service-discovery/register HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"serviceDefinitionName\": \"kelvin-info\",\n  \"version\": \"\",\n  \"expiresAt\": \"2030-01-01T00:00:00Z\",\n  \"metadata\": {\n    \"margin-of-error\": 0.5\n  },\n  \"interfaces\": [\n    {\n      \"templateName\": \"generic-http\",\n      \"protocol\": \"http\",\n      \"policy\": \"NONE\",\n      \"properties\": {\n        \"accessAddresses\": [\"192.168.56.116\", \"tp2.greenhouse.com\"],\n        \"accessPort\": 8080,\n        \"basePath\": \"/kelvin\",\n        \"operations\": {\"query-temperature\": { \"method\": \"GET\", \"path\": \"/query\"} }\n      }\n    }\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>201</code> if the service instance entity was created. The response also contains a ServiceRegistrationResponse JSON encoded body.</p> <pre><code>{\n  \"instanceId\": \"temperature-provider2::kelvin-info::1.0.0\",\n  \"provider\": {\n    \"name\": \"temperature-provider2\",\n    \"metadata\": {\n      \"scales\": [\n        \"Kelvin\",\n        \"Celsius\"\n      ],\n      \"location\": {\n        \"side\": \"North\",\n        \"block\": 2\n      },\n      \"indoor\": true\n    },\n    \"version\": \"1.0.0\",\n    \"addresses\": [\n      {\n        \"type\": \"IPV4\",\n        \"address\": \"192.168.56.116\"\n      },\n      {\n        \"type\": \"HOSTNAME\",\n        \"address\": \"tp2.greenhouse.com\"\n      }\n    ],\n    \"device\": {\n      \"name\": \"thermometer2\",\n      \"metadata\": {\n        \"scales\": [\n          \"Kelvin\",\n          \"Celsius\"\n        ],\n        \"max-temperature\": {\n          \"Kelvin\": 310,\n          \"Celsius\": 40\n        },\n        \"min-temperature\": {\n          \"Kelvin\": 260,\n          \"Celsius\": -10\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"81:ef:1a:44:7a:f5\"\n        }\n      ],\n      \"createdAt\": \"2024-11-04T01:53:02Z\",\n      \"updatedAt\": \"2024-11-04T01:53:02Z\"\n    },\n    \"createdAt\": \"2024-11-08T10:21:11Z\",\n    \"updatedAt\": \"2024-11-08T10:21:11Z\"\n  },\n  \"serviceDefinition\": {\n    \"name\": \"kelvin-info\",\n    \"createdAt\": \"2024-11-08T11:24:43Z\",\n    \"updatedAt\": \"2024-11-08T11:24:43Z\"\n  },\n  \"version\": \"1.0.0\",\n  \"expiresAt\": \"2030-01-01T00:00:00Z\",\n  \"metadata\": {\n    \"margin-of-error\": 0.5\n  },\n  \"interfaces\": [\n    {\n      \"templateName\": \"generic-http\",\n      \"protocol\": \"http\",\n      \"policy\": \"NONE\",\n      \"properties\": {\n        \"accessAddresses\": [\n          \"192.168.56.116\",\n          \"tp2.greenhouse.com\"\n        ],\n        \"accessPort\": 8080,\n        \"operations\": {\n          \"query-temperature\": {\n            \"path\": \"/query\",\n            \"method\": \"GET\"\n          }\n        },\n        \"basePath\": \"/kelvin\"\n      }\n    }\n  ],\n  \"createdAt\": \"2024-11-19T12:00:07.959849300Z\",\n  \"updatedAt\": \"2024-11-19T12:00:07.959849300Z\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Expiration time has an invalid time format\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceregistry/service-discovery/register\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-discovery-generic-http/#lookup","title":"lookup","text":"<p>The service operation request requires an identity related header or certificate. The URI contains a query parameter with the key \"verbose\" and a Boolean value. If verbose is true, detailed device and system information also returns (only if the provider supports it). The request requires a ServiceLookupRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/service-discovery/lookup?verbose=&lt;verbose-value&gt; HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"instanceIds\": [\n  ],\n  \"providerNames\": [\n    \"temperature-provider2\"\n  ],\n  \"serviceDefinitionNames\": [\n    \"alert-service\"\n  ],\n  \"versions\": [\n    \"1.0.0\"\n  ],\n  \"alivesAt\": \"\",\n  \"metadataRequirementsList\": [\n  ],\n  \"interfaceTemplateNames\": [\n  ],\n  \"interfacePropertyRequirementsList\": [\n  ],\n  \"policies\": [\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and with a ServiceLookupResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"instanceId\": \"temperature-provider2::alert-service::1.0.0\",\n      \"provider\": {\n        \"name\": \"temperature-provider2\",\n        \"metadata\": {\n          \"scales\": [\n            \"Kelvin\",\n            \"Celsius\"\n          ],\n          \"location\": {\n            \"side\": \"North\",\n            \"block\": 2\n          },\n          \"indoor\": true\n        },\n        \"version\": \"1.0.0\",\n        \"addresses\": [\n          {\n            \"type\": \"IPV4\",\n            \"address\": \"192.168.56.116\"\n          },\n          {\n            \"type\": \"HOSTNAME\",\n            \"address\": \"tp2.greenhouse.com\"\n          }\n        ],\n        \"device\": {\n          \"name\": \"thermometer2\",\n          \"metadata\": {\n            \"scales\": [\n              \"Kelvin\",\n              \"Celsius\"\n            ],\n            \"max-temperature\": {\n              \"Kelvin\": 310,\n              \"Celsius\": 40\n            },\n            \"min-temperature\": {\n              \"Kelvin\": 260,\n              \"Celsius\": -10\n            }\n          },\n          \"addresses\": [\n            {\n              \"type\": \"MAC\",\n              \"address\": \"81:ef:1a:44:7a:f5\"\n            }\n          ],\n          \"createdAt\": \"2024-11-04T01:53:02Z\",\n          \"updatedAt\": \"2024-11-04T01:53:02Z\"\n        },\n        \"createdAt\": \"2024-11-08T10:21:11Z\",\n        \"updatedAt\": \"2024-11-08T10:21:11Z\"\n      },\n      \"serviceDefinition\": {\n        \"name\": \"alert-service\",\n        \"createdAt\": \"2024-11-08T15:23:10Z\",\n        \"updatedAt\": \"2024-11-08T15:23:10Z\"\n      },\n      \"version\": \"1.0.0\",\n      \"expiresAt\": \"2025-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"max-delay\": {\n          \"value\": 15,\n          \"unit\": \"sec\"\n        }\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic-http\",\n          \"protocol\": \"http\",\n          \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\n              \"192.168.56.116\",\n              \"tp2.greenhouse.com\"\n            ],\n            \"accessPort\": 8080,\n            \"operations\": {\n              \"subscribe\": {\n                \"path\": \"/subscribe\",\n                \"method\": \"POST\"\n              },\n              \"unsubscribe\": {\n                \"path\": \"/unsubscribe\",\n                \"method\": \"DELETE\"\n              },\n              \"set-threshold\": {\n                \"path\": \"/threshold\",\n                \"method\": \"POST\"\n              }\n            },\n            \"basePath\": \"/alert\"\n          }\n        }\n      ],\n      \"createdAt\": \"2024-11-19T17:08:48Z\",\n      \"updatedAt\": \"2024-11-19T17:08:48Z\"\n    }\n  ],\n  \"count\": 1\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> Error if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"One of the following filters must be used: 'instanceIds', 'providerNames', 'serviceDefinitionNames'\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceregistry/service-discovery/lookup\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-discovery-generic-http/#revoke","title":"revoke","text":"<p>The service operation request  requires an identity related header or certificate, and a Name as path parameter, which is a unique identifier of the service instance to be deleted.</p> <pre><code>DELETE /serviceregistry/service-discovery/revoke/temperature-provider1%3A%3Acelsius-info%3A%3A1.0.0 HTTP1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and an existing service instance entity was removed and <code>204</code> if no matching entity was found. The success response does not contain any response body.</p> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"No authorization header has been provided\",\n  \"errorCode\": 401,\n  \"exceptionType\": \"AUTH\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-discovery-generic-mqtt/","title":"service-discovery IDD","text":"<p>GENERIC-MQTT &amp; GENERIC-MQTTS </p>"},{"location":"api/serviceregistry/service-discovery-generic-mqtt/#overview","title":"Overview","text":"<p>This page describes the GENERIC-MQTT and GENERIC-MQTTS service interface of service-discovery, which enables both application and core/support systems to lookup, register and revoke their service instances to/from the Local Cloud. It also enables to lookup for service instances. Service and service instance representation is mandatory for the base functionalities of a Local Cloud therefore it is an integral part of the implementation of the requirements in Service Registry Core System. An example of this interaction is when a provider registers its service instances to offer them to other systems in the Local Cloud. To enable other systems to use, to consume it, this service needs to be offered through the Service Registry. It\u2019s implemented using protocol, encoding as stated in the following tables:</p> <p>GENERIC-MQTT</p> Profile type type Version Transfer protocol MQTT 3.1 and 3.1.1 Data encryption N/A - Encoding JSON RFC 8259 Compression N/A - <p>GENERIC-MQTTS</p> Profile type type Version Transfer protocol MQTT 3.1 and 3.1.1 Data encryption TLS - Encoding JSON RFC 8259 Compression N/A - <p>Hereby the Interface Design Description (IDD) is provided to the service-discovery \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/serviceregistry/service-discovery-generic-mqtt/#interface-description","title":"Interface Description","text":""},{"location":"api/serviceregistry/service-discovery-generic-mqtt/#register","title":"register","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a ServiceRegistrationRequest. </p> <pre><code>Topic: arrowhead/serviceregistry/service-discovery/register\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;authentication-data&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": &lt;0|1|2&gt;,\n  \"payload\": {\n    \"serviceDefinitionName\": \"kelvin-info\",\n    \"version\": \"\",\n    \"expiresAt\": \"2030-01-01T00:00:00Z\",\n    \"metadata\": {\n      \"margin-of-error\": 0.5\n    },\n    \"interfaces\": [\n      {\n        \"templateName\": \"generic-http\",\n        \"protocol\": \"http\",\n        \"policy\": \"NONE\",\n        \"properties\": {\n          \"accessAddresses\": [\"192.168.56.116\", \"tp2.greenhouse.com\"],\n          \"accessPort\": 8080,\n          \"basePath\": \"/kelvin\",\n          \"operations\": {\"query-temperature\": { \"method\": \"GET\", \"path\": \"/query\"} }\n        }\n      }\n    ]\n  }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is a ServiceRegistrationResponse.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"instanceId\": \"temperature-provider1::kelvin-info::1.0.0\",\n    \"provider\": {\n      \"name\": \"temperature-provider1\",\n      \"metadata\": {\n        \"type\": \"temperature\",\n        \"scales\": [\n          \"Kelvin\",\n          \"Celsius\"\n        ],\n        \"customizable\": false\n      },\n      \"version\": \"2.1.0\",\n      \"addresses\": [\n        {\n          \"type\": \"HOSTNAME\",\n          \"address\": \"tp1.greenhouse.com\"\n        },\n        {\n          \"type\": \"IPV4\",\n          \"address\": \"192.168.66.1\"\n        }\n      ],\n      \"createdAt\": \"2025-03-09T18:03:26Z\",\n      \"updatedAt\": \"2025-03-09T18:03:26Z\"\n    },\n    \"serviceDefinition\": {\n      \"name\": \"kelvin-info\",\n      \"createdAt\": \"2025-03-16T23:31:20Z\",\n      \"updatedAt\": \"2025-03-16T23:31:20Z\"\n    },\n    \"version\": \"1.0.0\",\n    \"expiresAt\": \"2030-01-01T00:00:00Z\",\n    \"metadata\": {\n      \"margin-of-error\": 0.5\n    },\n    \"interfaces\": [\n      {\n        \"templateName\": \"generic-http\",\n        \"protocol\": \"http\",\n        \"policy\": \"NONE\",\n        \"properties\": {\n          \"accessAddresses\": [\n            \"192.168.56.116\",\n            \"tp2.greenhouse.com\"\n          ],\n          \"accessPort\": 8080,\n          \"operations\": {\n            \"query-temperature\": {\n              \"path\": \"/query\",\n              \"method\": \"GET\"\n            }\n          },\n          \"basePath\": \"/kelvin\"\n        }\n      }\n    ],\n    \"createdAt\": \"2025-03-16T23:34:17.785249400Z\",\n    \"updatedAt\": \"2025-03-16T23:34:17.785249400Z\"\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"temp-provider\",\n  \"payload\": \"System not exists: temp-provider\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-discovery-generic-mqtt/#lookup","title":"lookup","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info. The MQTTRequestTemplate contains a parameter with the key \"verbose\" and a Boolean value. If verbose is true, detailed device and system information also returns (only if the provider supports it). The payload of the MQTTRequestTemplate is a ServiceLookupRequest.</p> <pre><code>Topic: arrowhead/serviceregistry/service-discovery/lookup\n\n{\n  \"traceId\": \"\"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;authentication-data&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": &lt;0|1|2&gt;,\n  \"params\": {\"verbose\": false},\n  \"payload\": {\n    \"instanceIds\": [\n    ],\n    \"providerNames\": [\n      \"temperature-provider1\"\n    ],\n    \"serviceDefinitionNames\": [\n      \"kelvin-info\"\n    ],\n    \"versions\": [\n      \"1.0.0\"\n    ],\n    \"alivesAt\": \"\",\n    \"metadataRequirementsList\": [\n    ],\n    \"interfaceTemplateNames\": [\n    ],\n    \"interfacePropertyRequirementsList\": [\n    ],\n    \"policies\": [\n    ]\n  }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is a ServiceLookupResponse.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"entries\": [\n      {\n        \"instanceId\": \"temperature-provider1::kelvin-info::1.0.0\",\n        \"provider\": {\n          \"name\": \"temperature-provider1\",\n          \"metadata\": {\n            \"type\": \"temperature\",\n            \"scales\": [\n              \"Kelvin\",\n              \"Celsius\"\n            ],\n            \"customizable\": false\n          },\n          \"version\": \"2.1.0\",\n          \"createdAt\": \"2025-03-09T18:03:26Z\",\n          \"updatedAt\": \"2025-03-09T18:03:26Z\"\n        },\n        \"serviceDefinition\": {\n          \"name\": \"kelvin-info\",\n          \"createdAt\": \"2025-03-16T23:31:20Z\",\n          \"updatedAt\": \"2025-03-16T23:31:20Z\"\n        },\n        \"version\": \"1.0.0\",\n        \"expiresAt\": \"2030-01-01T00:00:00Z\",\n        \"metadata\": {\n          \"margin-of-error\": 0.5\n        },\n        \"interfaces\": [\n          {\n            \"templateName\": \"generic-http\",\n            \"protocol\": \"http\",\n            \"policy\": \"NONE\",\n            \"properties\": {\n              \"accessAddresses\": [\n                \"192.168.56.116\",\n                \"tp2.greenhouse.com\"\n              ],\n              \"accessPort\": 8080,\n              \"operations\": {\n                \"query-temperature\": {\n                  \"path\": \"/query\",\n                  \"method\": \"GET\"\n                }\n              },\n              \"basePath\": \"/kelvin\"\n            }\n          }\n        ],\n        \"createdAt\": \"2025-03-16T23:34:18Z\",\n        \"updatedAt\": \"2025-03-16T23:34:18Z\"\n      }\n    ],\n    \"count\": 1\n  }\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens.  In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\": \"trace1\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": \"Alive time has an invalid time format\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-discovery-generic-mqtt/#revoke","title":"revoke","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a Name. This name is a unique identifier of the service instance to be deleted.</p> <pre><code>Topic: arrowhead/serviceregistry/service-discovery/revoke\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;authentication-data&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": &lt;0|1|2&gt;,\n  \"payload\": \"temperature-provider1::kelvin-info::1.0.0\"\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully and an existing service instance entity was removed and <code>204</code> if no matching entity was found. </p> <pre><code>{\n  \"status\": &lt;status-code&gt;,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"temperature-provider1\",\n  \"payload\": \"\"\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 403,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": \"Revoking other systems' service is forbidden\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/","title":"service-registry-management IDD","text":"<p>GENERIC-HTTP &amp; GENERIC-HTTPS</p>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#overview","title":"Overview","text":"<p>This page describes the service-registry-management service, which enables systems (with operator role or proper permissions) to handle (register, update, revoke, lookup) devices, systems, service instances, service definitions and interface templates in bulk. An example of this interaction is that an operator uses the Management Tool to register interface templates, systems, and service instances manually. The interfaces are implemented using protocol, encoding as stated in the following tables:</p>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#interface-description","title":"Interface Description","text":"<p>GENERIC-HTTP</p> Profile type type Version Transfer protocol HTTP 1.1 Data encryption N/A - Encoding JSON RFC 8259 Compression N/A - <p>GENERIC-HTTPS</p> Profile type type Version Transfer protocol HTTPS 1.1 Data encryption TLS - Encoding JSON RFC 8259 Compression N/A - <p>Hereby the Interface Design Description (IDD) is provided to the service-registry-management \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#interface-description_1","title":"Interface Description","text":""},{"location":"api/serviceregistry/service-registry-management-generic-http/#device-query","title":"device-query","text":"<p>The service operation request requires an identity related header or certificate and may optionally include a DeviceQueryRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/mgmt/devices/query HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"pagination\": {\n    \"page\": 0,\n    \"size\": 10,\n    \"direction\": \"ASC\",\n    \"sortField\": \"name\"\n  },\n  \"deviceNames\": [\n  ],\n  \"addresses\": [\n  ],\n  \"addressType\": \"\",\n  \"metadataRequirementList\": [\n    {\n      \"volume.value\": {\"op\": \"GREATER_THAN_OR_EQUALS_TO\", \"value\": 90},\n      \"volume.unit\": {\"op\": \"EQUALS\", \"value\": \"dB\"}\n    }\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response also contains a DeviceListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"name\": \"alarm1\",\n      \"metadata\": {\n        \"volume\": {\n          \"value\": 100,\n          \"unit\": \"dB\"\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"3a:f7:9c:12:8e:b5\"\n        }\n      ],\n      \"createdAt\": \"2025-03-10T09:09:58Z\",\n      \"updatedAt\": \"2025-03-10T09:09:58Z\"\n    },\n    {\n      \"name\": \"alarm2\",\n      \"metadata\": {\n        \"volume\": {\n          \"value\": 110,\n          \"unit\": \"dB\"\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"3a:f7:9c:12:8e:bb\"\n        }\n      ],\n      \"createdAt\": \"2025-03-10T09:09:58Z\",\n      \"updatedAt\": \"2025-03-10T09:09:58Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Sort field is invalid. Only the following are allowed: [id, name, createdAt]\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceregistry/mgmt/devices/query\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#device-create","title":"device-create","text":"<p>The service operation request requires an identity related header or certificate and a DeviceListRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/mgmt/devices HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"devices\": [\n    {\n      \"name\": \"alarm1\",\n      \"metadata\": {\n        \"volume\": { \"value\": 100, \"unit\": \"dB\"}\n      },\n      \"addresses\": [\n        \"3a:f7:9c:12:8e:b5\"\n      ]\n    },\n    {\n      \"name\": \"alarm2\",\n      \"metadata\": {\n        \"volume\": { \"value\": 110, \"unit\": \"dB\"}\n      },\n      \"addresses\": [\n        \"3a:f7:9c:12:8e:bb\"\n      ]\n    }\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>201</code> if the device entities were successfully created. The response also contains a DeviceListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"name\": \"alarm1\",\n      \"metadata\": {\n        \"volume\": {\n          \"value\": 100,\n          \"unit\": \"dB\"\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"3a:f7:9c:12:8e:b5\"\n        }\n      ],\n      \"createdAt\": \"2025-03-10T09:09:57.989904100Z\",\n      \"updatedAt\": \"2025-03-10T09:09:57.989904100Z\"\n    },\n    {\n      \"name\": \"alarm2\",\n      \"metadata\": {\n        \"volume\": {\n          \"value\": 110,\n          \"unit\": \"dB\"\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"3a:f7:9c:12:8e:bb\"\n        }\n      ],\n      \"createdAt\": \"2025-03-10T09:09:58.010712400Z\",\n      \"updatedAt\": \"2025-03-10T09:09:58.010712400Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Device with names already exists: alarm1, alarm2\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceregistry/mgmt/devices\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#device-update","title":"device-update","text":"<p>The service operation request requires an identity related header or certificate and a DeviceListRequest JSON encoded body.</p> <pre><code>PUT /serviceregistry/mgmt/devices HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"devices\": [\n    {\n      \"name\": \"alarm1\",\n      \"metadata\": {\n        \"volume\": { \"value\": 100, \"unit\": \"dB\"}\n      },\n      \"addresses\": [\n        \"4a:f7:9c:12:8e:b5\"\n      ]\n    },\n    {\n      \"name\": \"alarm2\",\n      \"metadata\": {\n        \"volume\": { \"value\": 110, \"unit\": \"dB\"}\n      },\n      \"addresses\": [\n        \"4a:f7:9c:12:8e:bb\"\n      ]\n    }\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response also contains a DeviceListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"name\": \"alarm1\",\n      \"metadata\": {\n        \"volume\": {\n          \"value\": 100,\n          \"unit\": \"dB\"\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"4a:f7:9c:12:8e:b5\"\n        }\n      ],\n      \"createdAt\": \"2025-03-10T09:09:58Z\",\n      \"updatedAt\": \"2025-03-10T09:09:58Z\"\n    },\n    {\n      \"name\": \"alarm2\",\n      \"metadata\": {\n        \"volume\": {\n          \"value\": 110,\n          \"unit\": \"dB\"\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"4a:f7:9c:12:8e:bb\"\n        }\n      ],\n      \"createdAt\": \"2025-03-10T09:09:58Z\",\n      \"updatedAt\": \"2025-03-10T09:09:58Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Device(s) not exists: alarm001, alarm002\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"PUT /serviceregistry/mgmt/devices\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#device-remove","title":"device-remove","text":"<p>The service operation request requires an identity related header or certificate and a List&lt;Name&gt; as path parameter, which contains the names of the devices to delete.</p> <pre><code>DELETE /serviceregistry/mgmt/devices?names=alarm1&amp;names=alarm2 HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The success response does not contain any response body.</p> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission, <code>423</code> if entity is not removable and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Device name list contains null or empty element\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"DELETE /serviceregistry/mgmt/devices\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#system-query","title":"system-query","text":"<p>The service operation request requires an identity related header or certificate. The URI contains a query parameter with the key \"verbose\" and a Boolean value. If verbose is true, detailed device information also returns (only if the provider supports it). The request may optionally include a SystemQueryRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/mgmt/systems/query?verbose=&lt;verbose-value&gt; HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"pagination\": {\n    \"page\": 1,\n    \"size\": 1,\n    \"direction\": \"ASC\",\n    \"sortField\": \"\"\n  },\n  \"systemNames\": [\n  ],\n  \"addresses\": [\n  ],\n  \"addressType\": \"\",\n  \"metadataRequirementList\": [\n  ],\n  \"versions\": [\n    \"1.1\"\n  ],\n  \"deviceNames\": [\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and with a SystemListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"name\": \"alert-consumer2\",\n      \"metadata\": {},\n      \"version\": \"1.1.0\",\n      \"addresses\": [\n        {\n          \"type\": \"IPV4\",\n          \"address\": \"192.168.1.2\"\n        }\n      ],\n      \"device\": {\n        \"name\": \"alarm2\"\n      },\n      \"createdAt\": \"2025-03-14T13:08:22Z\",\n      \"updatedAt\": \"2025-03-14T13:08:22Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"The page size cannot be larger than 1000\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceregistry/mgmt/systems/query\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#system-create","title":"system-create","text":"<p>The service operation request requires an identity related header or certificate and a  SystemListRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/mgmt/systems HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"systems\": [\n    {\n      \"name\": \"alert-consumer1\",\n      \"metadata\": {\n      },\n      \"version\": \"1.1\",\n      \"addresses\": [\n        \"192.168.1.1\"\n      ],\n      \"deviceName\": \"alarm1\"\n    },\n    {\n      \"name\": \"alert-consumer2\",\n      \"metadata\": {\n      },\n      \"version\": \"1.1\",\n      \"addresses\": [\n        \"192.168.1.2\"\n      ],\n      \"deviceName\": \"alarm2\"\n    }\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>201</code> if the system entities were successfully created. The response also contains a SystemListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"name\": \"alert-consumer1\",\n      \"metadata\": {},\n      \"version\": \"1.1.0\",\n      \"addresses\": [\n        {\n          \"type\": \"IPV4\",\n          \"address\": \"192.168.1.1\"\n        }\n      ],\n      \"device\": {\n        \"name\": \"alarm1\",\n        \"metadata\": {\n          \"volume\": {\n            \"value\": 100,\n            \"unit\": \"dB\"\n          }\n        },\n        \"addresses\": [\n          {\n            \"type\": \"MAC\",\n            \"address\": \"3a:f7:9c:12:8e:b5\"\n          }\n        ],\n        \"createdAt\": \"2025-03-14T13:07:34Z\",\n        \"updatedAt\": \"2025-03-14T13:07:34Z\"\n      },\n      \"createdAt\": \"2025-03-14T13:08:21.856389Z\",\n      \"updatedAt\": \"2025-03-14T13:08:21.856389Z\"\n    },\n    {\n      \"name\": \"alert-consumer2\",\n      \"metadata\": {},\n      \"version\": \"1.1.0\",\n      \"addresses\": [\n        {\n          \"type\": \"IPV4\",\n          \"address\": \"192.168.1.2\"\n        }\n      ],\n      \"device\": {\n        \"name\": \"alarm2\",\n        \"metadata\": {\n          \"volume\": {\n            \"value\": 110,\n            \"unit\": \"dB\"\n          }\n        },\n        \"addresses\": [\n          {\n            \"type\": \"MAC\",\n            \"address\": \"3a:f7:9c:12:8e:bb\"\n          }\n        ],\n        \"createdAt\": \"2025-03-14T13:07:34Z\",\n        \"updatedAt\": \"2025-03-14T13:07:34Z\"\n      },\n      \"createdAt\": \"2025-03-14T13:08:21.858647200Z\",\n      \"updatedAt\": \"2025-03-14T13:08:21.858647200Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission  and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Systems with names already exist: alert-consumer1, alert-consumer2\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceregistry/mgmt/systems\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#system-update","title":"system-update","text":"<p>The service operation request requires an identity related header or certificate and a  SystemListRequest JSON encoded body.</p> <pre><code>PUT /serviceregistry/mgmt/systems HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"systems\": [\n    {\n      \"name\": \"alert-consumer1\",\n      \"metadata\": {\n      },\n      \"version\": \"1.2\",\n      \"addresses\": [\n        \"192.168.1.1\"\n      ],\n      \"deviceName\": \"alarm1\"\n    },\n    {\n      \"name\": \"alert-consumer2\",\n      \"metadata\": {\n      },\n      \"version\": \"1.2\",\n      \"addresses\": [\n        \"192.168.1.2\"\n      ],\n      \"deviceName\": \"alarm2\"\n    }\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if the system entities were successfully updated. The response also contains a SystemListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"name\": \"alert-consumer1\",\n      \"metadata\": {},\n      \"version\": \"1.2.0\",\n      \"addresses\": [\n        {\n          \"type\": \"IPV4\",\n          \"address\": \"192.168.1.1\"\n        }\n      ],\n      \"device\": {\n        \"name\": \"alarm1\",\n        \"metadata\": {\n          \"volume\": {\n            \"value\": 100,\n            \"unit\": \"dB\"\n          }\n        },\n        \"addresses\": [\n          {\n            \"type\": \"MAC\",\n            \"address\": \"3a:f7:9c:12:8e:b5\"\n          }\n        ],\n        \"createdAt\": \"2025-03-14T13:07:34Z\",\n        \"updatedAt\": \"2025-03-14T13:07:34Z\"\n      },\n      \"createdAt\": \"2025-03-14T13:08:22Z\",\n      \"updatedAt\": \"2025-03-14T13:51:03.159696600Z\"\n    },\n    {\n      \"name\": \"alert-consumer2\",\n      \"metadata\": {},\n      \"version\": \"1.2.0\",\n      \"addresses\": [\n        {\n          \"type\": \"IPV4\",\n          \"address\": \"192.168.1.2\"\n        }\n      ],\n      \"device\": {\n        \"name\": \"alarm2\",\n        \"metadata\": {\n          \"volume\": {\n            \"value\": 110,\n            \"unit\": \"dB\"\n          }\n        },\n        \"addresses\": [\n          {\n            \"type\": \"MAC\",\n            \"address\": \"3a:f7:9c:12:8e:bb\"\n          }\n        ],\n        \"createdAt\": \"2025-03-14T13:07:34Z\",\n        \"updatedAt\": \"2025-03-14T13:07:34Z\"\n      },\n      \"createdAt\": \"2025-03-14T13:08:22Z\",\n      \"updatedAt\": \"2025-03-14T13:51:03.169626100Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission  and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Duplicated system name: alert-consumer1\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"PUT /serviceregistry/mgmt/systems\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#system-remove","title":"system-remove","text":"<p>The service operation request requires an identity related header or certificate and a List&lt;Name&gt; as path parameter, which contains the names of the systems to delete.</p> <pre><code>DELETE /serviceregistry/mgmt/systems?names=alert-consumer1&amp;names=alert-consumer2 HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The success response does not contain any response body.</p> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Invalid authorization header\",\n  \"errorCode\": 401,\n  \"exceptionType\": \"AUTH\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#service-definition-query","title":"service-definition-query","text":"<p>The service operation request requires an identity related header or certificate and may optionally include a PageRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/mgmt/service-definitions/query HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"page\": 2,\n  \"size\": 4,\n  \"direction\": \"DESC\",\n  \"sortField\": \"name\"\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response also contains a ServiceDefinitionListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"name\": \"orchestration\",\n      \"createdAt\": \"2025-03-12T11:07:23Z\",\n      \"updatedAt\": \"2025-03-12T11:07:23Z\"\n    },\n    {\n      \"name\": \"monitor\",\n      \"createdAt\": \"2025-01-31T09:14:54Z\",\n      \"updatedAt\": \"2025-01-31T09:14:54Z\"\n    },\n    {\n      \"name\": \"kelvin-info2\",\n      \"createdAt\": \"2025-03-15T19:47:47Z\",\n      \"updatedAt\": \"2025-03-15T19:47:47Z\"\n    },\n    {\n      \"name\": \"kelvin-info1\",\n      \"createdAt\": \"2025-03-15T19:47:47Z\",\n      \"updatedAt\": \"2025-03-15T19:47:47Z\"\n    }\n  ],\n  \"count\": 24\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Requester has no management permission\",\n  \"errorCode\": 403,\n  \"exceptionType\": \"FORBIDDEN\",\n  \"origin\": \"http://localhost:8443/serviceregistry/mgmt/service-definitions/query\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#service-definition-create","title":"service-definition-create","text":"<p>The service operation request requires an identity related header or certificate and a ServiceDefinitionListRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/mgmt/service-definitions HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"serviceDefinitionNames\": [\n    \"alert-service1\", \"alert-service2\"\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>201</code> if the service definition entities were successfully created. The response also contains a ServiceDefinitionListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"name\": \"alert-service1\",\n      \"createdAt\": \"2025-03-15T19:31:03.728040300Z\",\n      \"updatedAt\": \"2025-03-15T19:31:03.728040300Z\"\n    },\n    {\n      \"name\": \"alert-service2\",\n      \"createdAt\": \"2025-03-15T19:31:03.732592400Z\",\n      \"updatedAt\": \"2025-03-15T19:31:03.732592400Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"The specified name does not match the naming convention: alert@service1\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceregistry/mgmt/service-definitions\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#service-definition-remove","title":"service-definition-remove","text":"<p>The service operation request requires an identity related header or certificate and a List&lt;Name&gt; as path parameter, which contains the names of the service definitions to delete.</p> <pre><code>DELETE /serviceregistry/mgmt/service-definitions?names=alert-service1&amp;names=alert-service2 HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The success response does not contain any response body.</p> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Service definition name list is missing or empty\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"DELETE /serviceregistry/mgmt/service-definitions\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#service-query","title":"service-query","text":"<p>The service operation request requires an identity related header or certificate and a ServiceQueryRequest JSON encoded body. The URI contains a query parameter with the key \"verbose\" and a Boolean value. If verbose is true, detailed system and device information also returns (only if the provider supports it).</p> <pre><code>POST /serviceregistry/mgmt/service-instances/query?verbose=&lt;verbose-value&gt; HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"pagination\": {\n    \"page\": 0,\n    \"size\": 2,\n    \"direction\": \"ASC\",\n    \"sortField\": \"createdAt\"\n  },\n  \"instanceIds\": [\n  ],\n  \"providerNames\": [\n  ],\n  \"serviceDefinitionNames\": [\n    \"alert-service1\"\n  ],\n  \"versions\": [\n    \"1.0.0\", \"1.0.1\"\n  ],\n  \"alivesAt\": \"2026-01-01T00:00:00Z\",\n  \"metadataRequirementsList\": [\n  ],\n  \"addressTypes\": [\n  ],\n  \"interfaceTemplateNames\": [\n    \"generic-mqtt\"\n  ],\n  \"interfacePropertyRequirementsList\": [\n    {\n      \"operations\": { \"op\": \"CONTAINS\", \"value\": \"warn\"}\n    }\n  ],\n  \"policies\": [\n    \"NONE\"\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response also contains a ServiceListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"instanceId\": \"alert-consumer1::alert-service1::1.0.0\",\n      \"provider\": {\n        \"name\": \"alert-consumer1\",\n        \"metadata\": {},\n        \"version\": \"1.1.0\",\n        \"createdAt\": \"2025-03-15T20:22:44Z\",\n        \"updatedAt\": \"2025-03-15T20:22:44Z\"\n      },\n      \"serviceDefinition\": {\n        \"name\": \"alert-service1\",\n        \"createdAt\": \"2025-03-15T20:21:43Z\",\n        \"updatedAt\": \"2025-03-15T20:21:43Z\"\n      },\n      \"version\": \"1.0.0\",\n      \"expiresAt\": \"2028-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"delay\": {\n          \"value\": 200,\n          \"unit\": \"ms\"\n        }\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic-mqtt\",\n          \"protocol\": \"tcp\",\n          \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\n              \"192.168.1.3\"\n            ],\n            \"accessPort\": 1883,\n            \"baseTopic\": \"heat-alert\",\n            \"operations\": [\n              \"alert\",\n              \"warn\"\n            ]\n          }\n        }\n      ],\n      \"createdAt\": \"2025-03-15T21:52:40Z\",\n      \"updatedAt\": \"2025-03-15T21:52:40Z\"\n    },\n    {\n      \"instanceId\": \"alert-consumer2::alert-service1::1.0.0\",\n      \"provider\": {\n        \"name\": \"alert-consumer2\",\n        \"metadata\": {},\n        \"version\": \"1.1.0\",\n        \"createdAt\": \"2025-03-15T20:22:44Z\",\n        \"updatedAt\": \"2025-03-15T20:22:44Z\"\n      },\n      \"serviceDefinition\": {\n        \"name\": \"alert-service1\",\n        \"createdAt\": \"2025-03-15T20:21:43Z\",\n        \"updatedAt\": \"2025-03-15T20:21:43Z\"\n      },\n      \"version\": \"1.0.0\",\n      \"expiresAt\": \"2027-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"delay\": {\n          \"value\": 200,\n          \"unit\": \"ms\"\n        }\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic-mqtt\",\n          \"protocol\": \"tcp\",\n          \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\n              \"192.168.1.3\"\n            ],\n            \"accessPort\": 1883,\n            \"baseTopic\": \"heat-alert\",\n            \"operations\": [\n              \"warn\"\n            ]\n          }\n        }\n      ],\n      \"createdAt\": \"2025-03-15T21:52:40Z\",\n      \"updatedAt\": \"2025-03-15T21:52:40Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Sort field is invalid. Only the following are allowed: [id, name, createdAt]\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceregistry/mgmt/service-instances/query\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#service-create","title":"service-create","text":"<p>The service operation request requires an identity related header or certificate and a ServiceCreateListRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/mgmt/service-instances HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"instances\": [\n    {\n      \"systemName\": \"alert-consumer1\",\n      \"serviceDefinitionName\": \"alert-service1\",\n      \"version\": \"\",\n      \"expiresAt\": \"2028-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"delay\": {\"value\": 200, \"unit\": \"ms\"}\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic-mqtt\",\n          \"protocol\": \"tcp\", \n          \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\"192.168.1.3\"],\n            \"accessPort\": 1883,\n            \"baseTopic\": \"heat-alert\", \"operations\": [\"alert\", \"warn\"]\n          }\n        }\n      ]\n    },\n    {\n      \"systemName\": \"alert-consumer2\",\n      \"serviceDefinitionName\": \"alert-service1\",\n      \"version\": \"\",\n      \"expiresAt\": \"2027-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"delay\": {\"value\": 200, \"unit\": \"ms\"}\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic-mqtt\",\n          \"protocol\": \"tcp\", \n          \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\"192.168.1.3\"],\n            \"accessPort\": 1883,\n            \"baseTopic\": \"heat-alert\", \"operations\": [\"warn\"]\n          }\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>201</code> if the service instance entities were created successfully. The response also contains a ServiceListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"instanceId\": \"alert-consumer1::alert-service1::1.0.0\",\n      \"provider\": {\n        \"name\": \"alert-consumer1\",\n        \"metadata\": {},\n        \"version\": \"1.1.0\",\n        \"addresses\": [\n          {\n            \"type\": \"IPV4\",\n            \"address\": \"192.168.1.1\"\n          }\n        ],\n        \"device\": {\n          \"name\": \"alarm1\",\n          \"metadata\": {\n            \"volume\": {\n              \"value\": 100,\n              \"unit\": \"dB\"\n            }\n          },\n          \"addresses\": [\n            {\n              \"type\": \"MAC\",\n              \"address\": \"3a:f7:9c:12:8e:b5\"\n            }\n          ],\n          \"createdAt\": \"2025-03-14T13:07:34Z\",\n          \"updatedAt\": \"2025-03-14T13:07:34Z\"\n        },\n        \"createdAt\": \"2025-03-15T20:22:44Z\",\n        \"updatedAt\": \"2025-03-15T20:22:44Z\"\n      },\n      \"serviceDefinition\": {\n        \"name\": \"alert-service1\",\n        \"createdAt\": \"2025-03-15T20:21:43Z\",\n        \"updatedAt\": \"2025-03-15T20:21:43Z\"\n      },\n      \"version\": \"1.0.0\",\n      \"expiresAt\": \"2028-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"delay\": {\n          \"value\": 200,\n          \"unit\": \"ms\"\n        }\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic-mqtt\",\n          \"protocol\": \"tcp\",\n          \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\n              \"192.168.1.3\"\n            ],\n            \"accessPort\": 1883,\n            \"baseTopic\": \"heat-alert\",\n            \"operations\": [\n              \"alert\",\n              \"warn\"\n            ]\n          }\n        }\n      ],\n      \"createdAt\": \"2025-03-15T21:52:40.389503Z\",\n      \"updatedAt\": \"2025-03-15T21:52:40.389503Z\"\n    },\n    {\n      \"instanceId\": \"alert-consumer2::alert-service1::1.0.0\",\n      \"provider\": {\n        \"name\": \"alert-consumer2\",\n        \"metadata\": {},\n        \"version\": \"1.1.0\",\n        \"addresses\": [\n          {\n            \"type\": \"IPV4\",\n            \"address\": \"192.168.1.2\"\n          }\n        ],\n        \"device\": {\n          \"name\": \"alarm2\",\n          \"metadata\": {\n            \"volume\": {\n              \"value\": 110,\n              \"unit\": \"dB\"\n            }\n          },\n          \"addresses\": [\n            {\n              \"type\": \"MAC\",\n              \"address\": \"3a:f7:9c:12:8e:bb\"\n            }\n          ],\n          \"createdAt\": \"2025-03-14T13:07:34Z\",\n          \"updatedAt\": \"2025-03-14T13:07:34Z\"\n        },\n        \"createdAt\": \"2025-03-15T20:22:44Z\",\n        \"updatedAt\": \"2025-03-15T20:22:44Z\"\n      },\n      \"serviceDefinition\": {\n        \"name\": \"alert-service1\",\n        \"createdAt\": \"2025-03-15T20:21:43Z\",\n        \"updatedAt\": \"2025-03-15T20:21:43Z\"\n      },\n      \"version\": \"1.0.0\",\n      \"expiresAt\": \"2027-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"delay\": {\n          \"value\": 200,\n          \"unit\": \"ms\"\n        }\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic-mqtt\",\n          \"protocol\": \"tcp\",\n          \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\n              \"192.168.1.3\"\n            ],\n            \"accessPort\": 1883,\n            \"baseTopic\": \"heat-alert\",\n            \"operations\": [\n              \"warn\"\n            ]\n          }\n        }\n      ],\n      \"createdAt\": \"2025-03-15T21:52:40.394058800Z\",\n      \"updatedAt\": \"2025-03-15T21:52:40.394058800Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"type\": \"about:blank\",\n  \"title\": \"Bad Request\",\n  \"status\": 400,\n  \"detail\": \"Failed to read request\",\n  \"instance\": \"/serviceregistry/mgmt/service-instances\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#service-update","title":"service-update","text":"<p>The service operation request requires an identity related header or certificate and a ServiceUpdateListRequest JSON encoded body.</p> <pre><code>PUT /serviceregistry/mgmt/service-instances HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"instances\": [\n    {\n      \"instanceId\": \"alert-consumer1::alert-service1::1.0.0\",\n      \"expiresAt\": \"2028-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"delay\": {\"value\": 200, \"unit\": \"ms\"}\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic-mqtt\",\n          \"protocol\": \"tcp\", \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\"192.168.1.3\"],\n            \"accessPort\": 1883,\n            \"baseTopic\": \"heat-alert\", \"operations\": [\"alert\", \"warn\", \"info\"]\n          }\n        }\n      ]\n    },\n    {\n      \"instanceId\": \"alert-consumer2::alert-service1::1.0.0\",\n      \"expiresAt\": \"2027-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"delay\": {\"value\": 200, \"unit\": \"ms\"}\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic-mqtt\",\n          \"protocol\": \"tcp\", \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\"192.168.1.3\"],\n            \"accessPort\": 1883,\n            \"baseTopic\": \"heat-alert\", \"operations\": [\"warn\"]\n          }\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if the service instance entities were updated successfully. The response also contains a ServiceListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"instanceId\": \"alert-consumer1::alert-service1::1.0.0\",\n      \"provider\": {\n        \"name\": \"alert-consumer1\",\n        \"metadata\": {},\n        \"version\": \"1.1.0\",\n        \"addresses\": [\n          {\n            \"type\": \"IPV4\",\n            \"address\": \"192.168.1.1\"\n          }\n        ],\n        \"device\": {\n          \"name\": \"alarm1\",\n          \"metadata\": {\n            \"volume\": {\n              \"value\": 100,\n              \"unit\": \"dB\"\n            }\n          },\n          \"addresses\": [\n            {\n              \"type\": \"MAC\",\n              \"address\": \"3a:f7:9c:12:8e:b5\"\n            }\n          ],\n          \"createdAt\": \"2025-03-14T13:07:34Z\",\n          \"updatedAt\": \"2025-03-14T13:07:34Z\"\n        },\n        \"createdAt\": \"2025-03-15T20:22:44Z\",\n        \"updatedAt\": \"2025-03-15T20:22:44Z\"\n      },\n      \"serviceDefinition\": {\n        \"name\": \"alert-service1\",\n        \"createdAt\": \"2025-03-15T20:21:43Z\",\n        \"updatedAt\": \"2025-03-15T20:21:43Z\"\n      },\n      \"version\": \"1.0.0\",\n      \"expiresAt\": \"2028-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"delay\": {\n          \"value\": 200,\n          \"unit\": \"ms\"\n        }\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic-mqtt\",\n          \"protocol\": \"tcp\",\n          \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\n              \"192.168.1.3\"\n            ],\n            \"accessPort\": 1883,\n            \"baseTopic\": \"heat-alert\",\n            \"operations\": [\n              \"alert\",\n              \"warn\",\n              \"info\"\n            ]\n          }\n        }\n      ],\n      \"createdAt\": \"2025-03-15T21:52:40Z\",\n      \"updatedAt\": \"2025-03-15T22:30:44.209238800Z\"\n    },\n    {\n      \"instanceId\": \"alert-consumer2::alert-service1::1.0.0\",\n      \"provider\": {\n        \"name\": \"alert-consumer2\",\n        \"metadata\": {},\n        \"version\": \"1.1.0\",\n        \"addresses\": [\n          {\n            \"type\": \"IPV4\",\n            \"address\": \"192.168.1.2\"\n          }\n        ],\n        \"device\": {\n          \"name\": \"alarm2\",\n          \"metadata\": {\n            \"volume\": {\n              \"value\": 110,\n              \"unit\": \"dB\"\n            }\n          },\n          \"addresses\": [\n            {\n              \"type\": \"MAC\",\n              \"address\": \"3a:f7:9c:12:8e:bb\"\n            }\n          ],\n          \"createdAt\": \"2025-03-14T13:07:34Z\",\n          \"updatedAt\": \"2025-03-14T13:07:34Z\"\n        },\n        \"createdAt\": \"2025-03-15T20:22:44Z\",\n        \"updatedAt\": \"2025-03-15T20:22:44Z\"\n      },\n      \"serviceDefinition\": {\n        \"name\": \"alert-service1\",\n        \"createdAt\": \"2025-03-15T20:21:43Z\",\n        \"updatedAt\": \"2025-03-15T20:21:43Z\"\n      },\n      \"version\": \"1.0.0\",\n      \"expiresAt\": \"2027-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"delay\": {\n          \"value\": 200,\n          \"unit\": \"ms\"\n        }\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic-mqtt\",\n          \"protocol\": \"tcp\",\n          \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\n              \"192.168.1.3\"\n            ],\n            \"accessPort\": 1883,\n            \"baseTopic\": \"heat-alert\",\n            \"operations\": [\n              \"warn\"\n            ]\n          }\n        }\n      ],\n      \"createdAt\": \"2025-03-15T21:52:40Z\",\n      \"updatedAt\": \"2025-03-15T22:30:44.270475Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Instance id is empty\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#service-remove","title":"service-remove","text":"<p>The service operation request requires an identity related header or certificate and a List&lt;Name&gt; as path parameter, which contains the identitifers of the service instances that need to be removed.</p> <pre><code>DELETE /serviceregistry/mgmt/service-instances?serviceInstances=alert-consumer1%3A%3Aalert-service1%3A%3A1.0.0&amp;serviceInstances=alert-consumer2%3A%3Aalert-service1%3A%3A1.0.0 HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The success response does not contain any response body.</p> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Requester has no management permission\",\n  \"errorCode\": 403,\n  \"exceptionType\": \"FORBIDDEN\",\n  \"origin\": \"http://localhost:8443/serviceregistry/mgmt/service-instances\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#interface-template-query","title":"interface-template-query","text":"<p>The service operation request requires an identity related header or certificate and may optionally include an InterfaceTemplateQueryRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/mgmt/interface-templates/query HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"pagination\": {\n    \"page\": 1,\n    \"size\": 1,\n    \"direction\": \"ASC\",\n    \"sortField\": \"name\"\n  },\n  \"templateNames\": [\n  ],\n  \"protocols\": [\n    \"tcp\"\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> called successfully. The response also contains an InterfaceTemplateListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"name\": \"generic-mqtt\",\n      \"protocol\": \"tcp\",\n      \"propertyRequirements\": [\n        {\n          \"name\": \"accessAddresses\",\n          \"mandatory\": true,\n          \"validator\": \"NOT_EMPTY_ADDRESS_LIST\",\n          \"validatorParams\": []\n        },\n        {\n          \"name\": \"accessPort\",\n          \"mandatory\": true,\n          \"validator\": \"PORT\",\n          \"validatorParams\": []\n        },\n        {\n          \"name\": \"baseTopic\",\n          \"mandatory\": true\n        },\n        {\n          \"name\": \"operations\",\n          \"mandatory\": true,\n          \"validator\": \"NOT_EMPTY_STRING_SET\",\n          \"validatorParams\": [\n            \"NAME\"\n          ]\n        }\n      ],\n      \"createdAt\": \"2024-12-09T18:52:48Z\",\n      \"updatedAt\": \"2024-12-09T18:52:48Z\"\n    }\n  ],\n  \"count\": 3\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"type\": \"about:blank\",\n  \"title\": \"Bad Request\",\n  \"status\": 400,\n  \"detail\": \"Failed to read request\",\n  \"instance\": \"/serviceregistry/mgmt/interface-templates/query\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#interface-template-create","title":"interface-template-create","text":"<p>The service operation request requires an identity related header or certificate and an InterfaceTemplateListRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/mgmt/interface-templates HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"interfaceTemplates\": [\n    {\n      \"name\": \"custom-ftp\",\n      \"protocol\": \"tcp\",\n      \"propertyRequirements\": [\n        {\n          \"name\": \"accessAddresses\",\n          \"mandatory\": true,\n          \"validator\": \"not_empty_address_list\",\n          \"validatorParams\": [\n          ]\n        }\n      ]\n    },\n    {\n      \"name\": \"my-awesome-ftp\",\n      \"protocol\": \"tcp\",\n      \"propertyRequirements\": [\n        {\n          \"name\": \"accessAddresses\",\n          \"mandatory\": true,\n          \"validator\": \"not_empty_address_list\",\n          \"validatorParams\": [\n          ]\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>201</code> if the interface template entities were successfully created. The response also contains an InterfaceTemplateListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"name\": \"my-awesome-ftp\",\n      \"protocol\": \"tcp\",\n      \"propertyRequirements\": [\n        {\n          \"name\": \"accessAddresses\",\n          \"mandatory\": true,\n          \"validator\": \"NOT_EMPTY_ADDRESS_LIST\",\n          \"validatorParams\": []\n        }\n      ],\n      \"createdAt\": \"2025-03-15T23:09:00.882593100Z\",\n      \"updatedAt\": \"2025-03-15T23:09:00.882593100Z\"\n    },\n    {\n      \"name\": \"custom-ftp\",\n      \"protocol\": \"tcp\",\n      \"propertyRequirements\": [\n        {\n          \"name\": \"accessAddresses\",\n          \"mandatory\": true,\n          \"validator\": \"NOT_EMPTY_ADDRESS_LIST\",\n          \"validatorParams\": []\n        }\n      ],\n      \"createdAt\": \"2025-03-15T23:09:00.892877600Z\",\n      \"updatedAt\": \"2025-03-15T23:09:00.892877600Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Interface template already exists: custom-ftp\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceregistry/mgmt/interface-templates\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#interface-template-remove","title":"interface-template-remove","text":"<p>The service operation request requires an identity related header or certificate and a List&lt;Name&gt; as path parameter, which contains the string identifier of the interface descriptors that need to be removed.</p> <pre><code>DELETE /serviceregistry/mgmt/interface-templates?names=custom-ftp&amp;names=my-awesome-ftp HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The success response does not contain any response body.</p> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"No authorization header has been provided\",\n  \"errorCode\": 401,\n  \"exceptionType\": \"AUTH\"\n}\n</code></pre>"},{"location":"api/serviceregistry/system-discovery-generic-http/","title":"system-discovery IDD","text":"<p>GENERIC-HTTP &amp; GENERIC-HTTPS</p>"},{"location":"api/serviceregistry/system-discovery-generic-http/#overview","title":"Overview","text":"<p>This page describes the GENERIC-HTTP and GENERIC-HTTPS service interface of system-discovery, which enables both application and core/support systems to lookup, register and revoke systems that are part of the Local Cloud.  System representation is mandatory for the base functionalities of a Local Cloud, e.g. the systems have to be registered in order to interact with each other. The interfaces are implemented using protocol, encoding as stated in the following tables:</p>"},{"location":"api/serviceregistry/system-discovery-generic-http/#interface-description","title":"Interface Description","text":"<p>GENERIC-HTTP</p> Profile type type Version Transfer protocol HTTP 1.1 Data encryption N/A - Encoding JSON RFC 8259 Compression N/A - <p>GENERIC-HTTPS</p> Profile type type Version Transfer protocol HTTPS 1.1 Data encryption TLS - Encoding JSON RFC 8259 Compression N/A - <p>Hereby the Interface Design Description (IDD) is provided to the system-discovery \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/serviceregistry/system-discovery-generic-http/#register","title":"register","text":"<p>The service operation request requires an identity related header or certificate and a SystemRegistrationRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/system-discovery/register HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n  \"metadata\": {\n    \"scales\": [\"Kelvin\", \"Celsius\"],\n    \"location\": {\"side\": \"North\", \"block\": 2},\n    \"indoor\": true\n  },\n  \"version\": \"\",\n  \"addresses\": [\n    \"192.168.56.116\",\n    \"tp2.greenhouse.com\"\n  ],\n  \"deviceName\": \"thermometer2\"\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and the system entity is already existing or <code>201</code> if the entity was newly created. The response also contains a SystemRegistrationResponse JSON encoded body.</p> <pre><code>{\n  \"name\": \"temperature-provider2\",\n  \"metadata\": {\n    \"scales\": [\n      \"Kelvin\",\n      \"Celsius\"\n    ],\n    \"location\": {\n      \"side\": \"North\",\n      \"block\": 2\n    },\n    \"indoor\": true\n  },\n  \"version\": \"1.0.0\",\n  \"addresses\": [\n    {\n      \"type\": \"IPV4\",\n      \"address\": \"192.168.56.116\"\n    },\n    {\n      \"type\": \"HOSTNAME\",\n      \"address\": \"tp2.greenhouse.com\"\n    }\n  ],\n  \"device\": {\n    \"name\": \"thermometer2\",\n    \"metadata\": {\n      \"scales\": [\n        \"Kelvin\",\n        \"Celsius\"\n      ],\n      \"max-temperature\": {\n        \"Kelvin\": 310,\n        \"Celsius\": 40\n      },\n      \"min-temperature\": {\n        \"Kelvin\": 260,\n        \"Celsius\": -10\n      }\n    },\n    \"addresses\": [\n      {\n        \"type\": \"MAC\",\n        \"address\": \"81:ef:1a:44:7a:f5\"\n      }\n    ],\n    \"createdAt\": \"2024-11-04T01:53:02Z\",\n    \"updatedAt\": \"2024-11-04T01:53:02Z\"\n  },\n  \"createdAt\": \"2024-11-08T10:21:10.950683800Z\",\n  \"updatedAt\": \"2024-11-08T10:21:10.950683800Z\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Device names do not exist: thermometer2\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceregistry/system-discovery/register\"\n}\n</code></pre>"},{"location":"api/serviceregistry/system-discovery-generic-http/#lookup","title":"lookup","text":"<p>The service operation request requires an identity related header or certificate. The URI can contain an optional query parameter with the key \"verbose\" and a Boolean value. If verbose is true, detailed device information also returns (only if the provider supports it). The request may optionally include a SystemLookupRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/system-discovery/lookup?verbose=&lt;verbose-value&gt; HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n  \"systemNames\": [\n  ],\n  \"addresses\": [\n  ],\n  \"addressType\": \"\",\n  \"metadataRequirementList\": [\n  ],\n  \"versions\": [\n  ],\n  \"deviceNames\": [\n    \"thermometer2\"\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and with a SystemLookupResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"name\": \"temperature-provider1\",\n      \"metadata\": {\n        \"scales\": [\n          \"Kelvin\",\n          \"Celsius\"\n        ],\n        \"location\": {\n          \"side\": \"North\",\n          \"block\": 2\n        },\n        \"indoor\": true\n      },\n      \"version\": \"1.0.0\",\n      \"addresses\": [\n        {\n          \"type\": \"IPV4\",\n          \"address\": \"192.168.56.116\"\n        },\n        {\n          \"type\": \"HOSTNAME\",\n          \"address\": \"tp2.greenhouse.com\"\n        }\n      ],\n      \"device\": {\n        \"name\": \"thermometer2\"\n      },\n      \"createdAt\": \"2025-02-27T18:32:45Z\",\n      \"updatedAt\": \"2025-02-27T18:32:45Z\"\n    }\n  ],\n  \"count\": 1\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> Error if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Invalid address type: IPV5\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceregistry/system-discovery/lookup\"\n}\n</code></pre>"},{"location":"api/serviceregistry/system-discovery-generic-http/#revoke","title":"revoke","text":"<p>The service operation request only requires an identity related header or certificate. The name of the system to be revoked will be identified during authentication.</p> <pre><code>DELETE /serviceregistry/system-discovery/revoke HTTP1.1\nAuthorization: Bearer &lt;identity-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and an existing system entity was removed and <code>204</code> if no matching entity was found. The success response does not contain any response body.</p> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"No authorization header has been provided\",\n  \"errorCode\": 401,\n  \"exceptionType\": \"AUTH\"\n}\n</code></pre>"},{"location":"api/serviceregistry/system-discovery-generic-mqtt/","title":"system-discovery IDD","text":"<p>GENERIC-MQTT &amp; GENERIC-MQTTS </p>"},{"location":"api/serviceregistry/system-discovery-generic-mqtt/#overview","title":"Overview","text":"<p>Coming soon...</p>"},{"location":"api/serviceregistry/system-discovery-generic-mqtt/#interface-description","title":"Interface Description","text":"<p>Coming soon...</p>"},{"location":"api/serviceregistry/system-discovery-generic-mqtt/#register","title":"register","text":"<p>Coming soon...</p>"},{"location":"api/serviceregistry/system-discovery-generic-mqtt/#lookup","title":"lookup","text":"<p>Coming soon...</p>"},{"location":"api/serviceregistry/system-discovery-generic-mqtt/#revoke","title":"revoke","text":"<p>Coming soon...</p>"},{"location":"core_systems/authentication/","title":"Authentication","text":"<p>This core system provides, manages and validates system identities within an Eclipse Arrowhead Local Cloud (LC).</p> <p>Learn more:  Abstract System Description (SysD)</p>"},{"location":"core_systems/authentication/#services","title":"Services","text":""},{"location":"core_systems/authentication/#identity","title":"identity","text":"<p>The purpose of this service is to give, verify and invalidates a proof of identity token. Furthermore, it also allows a system to change its own credentials. The service is offered for both application and core/support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic-http (IDD) | generic-https (IDD) generic-mqtt (IDD) | generic-mqtts (IDD)  since: v5.0.0 </p> <p>login</p> <p>This service operation acquires a proof of identity token.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p> <p>logout</p> <p>This service operation invalidates a proof of identity token.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p> <p>change</p> <p>This service operation changes the requester system's own credentials.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p> <p>verify</p> <p>This service operation checks the validity of a provided token and acquires information about the verified system.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p>"},{"location":"core_systems/authentication/#general-management","title":"general-management","text":"<p>Its purpose is to get some information about the hosting system's behavior, such as log entries and configuration settings. The service is offered for administrative support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic-http (IDD) | generic-https (IDD) generic-mqtt (IDD) | generic-mqtts (IDD)  since: v5.0.0 </p> <p>get-log</p> <p>This service operation lists the log entries of the system that matches the filtering requirements.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p> <p>get-config</p> <p>This service operation lists the current values of the specified configuration settings.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p>"},{"location":"core_systems/authentication/#identity-management","title":"identity-management","text":"<p>Its purpose is to manage identities and active sessions in bulk. The different operations provide querying, creating, updating and removing functionalities. The service is offered for administrative support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic-http (IDD) | generic-https (IDD) generic-mqtt (IDD) | generic-mqtts (IDD)  since: v5.0.0 </p> <p>identity-mgmt-query</p> <p>This service operation lists the identities that match the filtering requirements.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p> <p>identity-mgmt-create</p> <p>This service operation creates the specified identities.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p> <p>identity-mgmt-update</p> <p>This service operation updates the specified existing identities.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p> <p>identity-mgmt-remove</p> <p>This service operation removes the specified identities.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p> <p>identity-mgmt-session-query</p> <p>This service operation lists the active sessions that match the filtering requirements.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p> <p>identity-mgmt-session-close</p> <p>This service operation closes and the specified active sessions and invalidates the related tokens.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p>"},{"location":"core_systems/authentication/#configuration","title":"Configuration","text":"<p>The system configuration properties can be found in the <code>application.properties</code> file located at <code>/src/main/resources</code> folder.</p> <p>Note: During the build process this file is going to be built into the executable JAR, but also going to be copied next to the JAR file. Any modification in the configuration file located next to the executable JAR file will override the built in configuration property value.</p>"},{"location":"core_systems/authentication/#general-parameters","title":"General parameters","text":"<p>See the general configuration properties.</p> <p>Note: In case of the Authentication system the property authentication.policy has a special value <code>internal</code>, which means the system should use its own database during authentication. The property should not be changed.</p>"},{"location":"core_systems/authentication/#database-parameters","title":"Database parameters","text":"<p> spring.datasource.url</p> <p>Full connection URL to the database.</p> <p> spring.datasource.username</p> <p>Username to the database.</p> <p> spring.datasource.password</p> <p>Password to the database.</p> <p> spring.datasource.driver-class-name</p> <p>The driver provides the connection to the database and implements the protocol for transferring the query and result between client and database.</p> <p> spring.jpa.show-sql</p> <p>Set to <code>true</code> in order to log out the SQL queries.</p> <p> spring.jpa.properties.hibernate.format sql</p> <p>Set to <code>true</code> to log out SQL queries in pretty format. (Effective only when 'spring.jpa.show-sql' is 'true')</p> <p> spring.jpa.hibernate.ddl-auto</p> <p>Auto initialization of database tables. Value must be always 'none'.</p>"},{"location":"core_systems/authentication/#custom-parameters","title":"Custom parameters","text":"<p> authentication.secret.key</p> <p>The secret key which is used to prove to the Local Cloud's Service Registry that this authentication is trusted. This secret key must be present in the Service Registry authenticator.secret.keys structure.</p> <p> enable.management.filter</p> <p>Set to <code>true</code> to enable automatic authorization for management services.</p> <p> management.policy</p> <p>Defines the access policy for management services. Can be <code>sysop-only</code> (only systems with system operator permission can use them), <code>whitelist</code> (system operators and those dedicated systems that appear on the management.whitelist can use them) or <code>authorization</code> (system operators, whitelist members and those systems that have permission according to the Authorization system can use them).</p> <p> management.whitelist</p> <p>A list of system names (separated by comma) that can use management services if the management.policy is set to <code>whitelist</code> or <code>authorization</code>.</p> <p> identity.token.duration</p> <p>Validity period of the identity token in seconds (0 or negative value means hundred years).</p> <p> cleaner.job.interval</p> <p>Interval between execution times of the expired session cleaner job in milliseconds.</p>"},{"location":"core_systems/authentication/#logging-configuration","title":"Logging configuration","text":"<p>The logging configuration properties can be found in the <code>log4j2.xml</code> file located at <code>src/main/resources</code> folder.</p> <p>Note: During the build process this file is going to be built into the executable JAR, but it is also possible to override it by an external file. For that use the following command when starting the system:</p> <pre><code>java -jar arrowhead-authentication-5.x.x\n     -Dlog4j.configurationFile=path-to-external-file\n</code></pre> <p> JDBC_LEVEL</p> <p>Set this to change the level of log messages in the database. Levels: <code>ALL</code>, <code>TRACE</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, <code>ERROR</code>, <code>FATAL</code>, <code>OFF</code>.</p> <p> CONSOLE_FILE_LEVEL</p> <p>Set this to change the level of log messages in console and the log file. Levels: <code>ALL</code>, <code>TRACE</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, <code>ERROR</code>, <code>FATAL</code>, <code>OFF</code>.</p> <p> LOG_DIR</p> <p>Set this to change the directory of log files.</p>"},{"location":"core_systems/authentication/#changelog","title":"Changelog","text":""},{"location":"core_systems/authentication/#v500","title":"v5.0.0","text":"<p>Related in CL-5.0.0</p> <ul> <li>general</li> <li>arrowhead-common-utils</li> <li>arrowhead-data-transfer-objects</li> <li>arrowhead-authentication</li> </ul>"},{"location":"core_systems/authorization/","title":"Authorization","text":"<p>Coming soon.</p>"},{"location":"core_systems/authorization/#services","title":"Services","text":"<p>Coming soon.</p>"},{"location":"core_systems/authorization/#configuration","title":"Configuration","text":"<p>Coming soon.</p>"},{"location":"core_systems/authorization/#changelog","title":"Changelog","text":""},{"location":"core_systems/authorization/#v500","title":"v5.0.0","text":"<p>Related in CL-5.0.0</p> <ul> <li>general</li> <li>arrowhead-common-utils</li> <li>arrowhead-data-transfer-objects</li> <li>arrowhead-authorization</li> </ul>"},{"location":"core_systems/service_orchestration_dynamic/","title":"Dynamic Service Orchestration","text":"<p>This core system exists to find matching service instances according to the consumer\u2019s specification within an Eclipse Arrowhead Local Cloud (LC) and optionally, in other Arrowhead clouds by collaborating with other core/support Systems. </p> <p>Learn more:  Abstract System Description (SysD)</p>"},{"location":"core_systems/service_orchestration_dynamic/#services","title":"Services","text":""},{"location":"core_systems/service_orchestration_dynamic/#orchestration","title":"orchestration","text":"<p>The purpose of this service is to get matching service instances. The service is offered for both application and core/support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic-http (IDD) | generic-https (IDD) generic-mqtt (IDD) | generic-mqtts (IDD)  since: v5.0.0 </p> <p>pull</p> <p>This service operation performs the orchestration process and returns the matching service instances.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p> <p>subscribe</p> <p>This service operation creates a subscription that can be triggered anytime to perform the orchestration process and push the matching service instances for the subscriptor.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p> <p>unsubscribe</p> <p>This service operation removes a subscription.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p>"},{"location":"core_systems/service_orchestration_dynamic/#orchestration-push-management","title":"orchestration-push-management","text":"<p>Coming soon.</p>"},{"location":"core_systems/service_orchestration_dynamic/#simple-store-management","title":"simple-store-management","text":"<p>Coming soon.</p>"},{"location":"core_systems/service_orchestration_dynamic/#flexible-store-management","title":"flexible-store-management","text":"<p>Coming soon.</p>"},{"location":"core_systems/service_orchestration_dynamic/#orchestration-lock-management","title":"orchestration-lock-management","text":"<p>Coming soon.</p>"},{"location":"core_systems/service_orchestration_dynamic/#orchestration-history-management","title":"orchestration-history-management","text":"<p>Coming soon.</p>"},{"location":"core_systems/service_orchestration_dynamic/#configuration","title":"Configuration","text":"<p>Coming soon.</p>"},{"location":"core_systems/service_orchestration_dynamic/#changelog","title":"Changelog","text":""},{"location":"core_systems/service_orchestration_dynamic/#v500","title":"v5.0.0","text":"<p>Related in CL-5.0.0</p> <ul> <li>general</li> <li>arrowhead-common-utils</li> <li>arrowhead-data-transfer-objects</li> <li>arrowhead-serviceorchestration-dynamic</li> </ul>"},{"location":"core_systems/service_orchestration_flexible_store/","title":"Flexible-Store Service Orchestration","text":"<p>Coming soon.</p>"},{"location":"core_systems/service_orchestration_simple_store/","title":"Simple-Store Service Orchestration","text":"<p>Coming soon.</p>"},{"location":"core_systems/service_registry/","title":"Service Registry","text":"<p>This core system provides the data storage functionality for the information related to the currently and actively offered services within the Local Cloud. It also stores information about the systems that offer and/or can use the previously mentioned services, and optionally data about the devices on which those systems are running.</p> <p>Learn more:  Abstract System Description (SysD)</p>"},{"location":"core_systems/service_registry/#services","title":"Services","text":""},{"location":"core_systems/service_registry/#service-discovery","title":"service-discovery","text":"<p>The purpose of this service is to lookup, register and revoke provided services. The service is offered for both application and core/support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic-http (IDD) | generic-https (IDD) generic-mqtt (IDD) | generic-mqtts (IDD)  since: v5.0.0 </p> <p>register</p> <p>This service operation adds new service instance to the Local Cloud.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p> <p>revoke</p> <p>This service operation removes a service instance from the Local Cloud.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p> <p>lookup</p> <p>This service operation lists the service instances that match the filtering requirements.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p>"},{"location":"core_systems/service_registry/#system-discovery","title":"system-discovery","text":"<p>The purpose of this service is to lookup, register and revoke systems that are part of (or want to be part of) the Local Cloud. The service is offered for both application and core/support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic-http (IDD) | generic-https (IDD) generic-mqtt (IDD) | generic-mqtts (IDD)  since: v5.0.0 </p> <p>register</p> <p>This service operation adds new system to the Local Cloud.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p> <p>revoke</p> <p>This service operation removes a system from the Local Cloud.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p> <p>lookup</p> <p>This service operation lists the systems that match the filtering requirements.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p>"},{"location":"core_systems/service_registry/#device-discovery","title":"device-discovery","text":"<p>The purpose of this service is to lookup, register and revoke devices on which the Local Cloud\u2019s systems can run. The service is offered for both application and core/support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic-http (IDD) | generic-https (IDD) generic-mqtt (IDD) | generic-mqtts (IDD)  since: v5.0.0 </p> <p>register</p> <p>This service operation adds a new device to the Local Cloud.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p> <p>revoke</p> <p>This service operation removes a device from the Local Cloud.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p> <p>lookup</p> <p>This service operation lists the devices that match the filtering requirements.</p> <p> Example: generic-http | generic-https  Example: generic-mqtt | generic-mqtts</p>"},{"location":"core_systems/service_registry/#general-management","title":"general-management","text":"<p>Its purpose is to get some information about the hosting system\u2019s behavior, such as log entries and configuration settings. The service is offered for administrative support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic-http (IDD) | generic-https (IDD) generic-mqtt (IDD) | generic-mqtts (IDD)  since: v5.0.0 </p>"},{"location":"core_systems/service_registry/#service-registry-management","title":"service-registry-management","text":"<p>Its purpose is to manage service definitions, service instances, interfaces, systems and devices in bulk. The different operations provide querying, registering, updating and unregistering functionalities. The service is offered for administrative support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic-http (IDD) | generic-https (IDD) generic-mqtt (IDD) | generic-mqtts (IDD)  since: v5.0.0 </p> <p>TODO</p>"},{"location":"core_systems/service_registry/#configuration","title":"Configuration","text":"<p>The system configuration properties can be found in the <code>application.properties</code> file located at <code>/src/main/resources</code> folder.</p> <p>Note: During the build process this file is going to be built into the executable JAR, but also going to be copied next to the JAR file. Any modification in the configuration file located next to the executable JAR file will override the built in configuration property value.</p>"},{"location":"core_systems/service_registry/#general-parameters","title":"General parameters","text":"<p>See the general configuration properties.</p>"},{"location":"core_systems/service_registry/#database-parameters","title":"Database parameters","text":"<p> spring.datasource.url</p> <p>URL to the database.</p> <p> spring.datasource.username</p> <p>Username to the database.</p> <p> spring.datasource.password</p> <p>Password to the database.</p> <p> spring.datasource.driver-class-name</p> <p>The driver provides the connection to the database and implements the protocol for transferring the query and result between client and database.</p> <p> spring.jpa.show-sql</p> <p>Set to true in order to log out the SQL queries.</p> <p> spring.jpa.properties.hibernate.format sql</p> <p>Set to true to log out SQL queries in pretty format. (Effective only when 'spring.jpa.show-sql' is 'true')</p> <p> spring.jpa.hibernate.ddl-auto</p> <p>Auto initialization of database tables. Value must be always 'none'.</p>"},{"location":"core_systems/service_registry/#custom-parameters","title":"Custom parameters","text":"<p>TODO</p>"},{"location":"core_systems/service_registry/#logging-configuration","title":"Logging configuration","text":"<p>The logging configuration properties can be found in the <code>log4j2.xml</code> file located at <code>src/main/resources</code> folder.</p> <p>Note: During the build process this file is going to be built into the executable JAR, but it is also possible to override it by an external file. For that use the following command when starting the system:</p> <pre><code>java -jar arrowhead-serviceregistry-x.x.x\n     -Dlog4j.configurationFile=path-to-external-file\n</code></pre> <p> JDBC_LEVEL</p> <p>Set this to change the level of log messages in the database. Levels: ALL, TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF.</p> <p> CONSOLE FILE LEVEL</p> <p>Set this to change the level of log messages in consol and the log file. Levels: ALL, TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF.</p> <p> LOG_DIR</p> <p>Set this to change the directory of log files.</p>"},{"location":"core_systems/service_registry/#changelog","title":"Changelog","text":""},{"location":"core_systems/service_registry/#v500","title":"v5.0.0","text":"<p>Related in CL-5.0.0</p> <ul> <li>general</li> <li>arrowhead-common-utils</li> <li>arrowhead-data-transfer-objects</li> <li>arrowhead-serviceregistry</li> </ul>"},{"location":"downloads/releases/","title":"Releases","text":""},{"location":"downloads/releases/#500","title":"5.0.0","text":"<p>Changelog: CL-5.0.0</p> Date System Name File 31/07/2025 Service Registry Coming soon... 31/07/2025 Service Orchestration Coming soon... 31/07/2025 Authorization Coming soon... 31/07/2025 Authentication Coming soon... 31/07/2025 Blacklist Coming soon..."},{"location":"downloads/test_builds/","title":"Test Builds","text":"<p>The purpose of test builds is to allow the community to test the release candidates and report possible issues before the official release of a new version.</p>"},{"location":"downloads/test_builds/#500-testbuild-0","title":"5.0.0-TESTBUILD-0","text":"<p>Changelog: CL-5.0.0</p> Date System Name Download 14/03/2025 Service Registry arrowhead-serviceregistry-5.0.0-TESTBUILD-0.zip"},{"location":"general/general_config_props/","title":"General Configuartion Properties","text":"<p>The following cofiguration properties are applied by (almost) every Core and Support system:</p> <p> authentication.policy</p> <p>Specifies the applied authentication policy. Can be <code>declared</code>, <code>certificate</code> or <code>outsourced</code>. </p> <p> server.address</p> <p>IP address of the server using HTTP(S) protocol (0.0.0.0 denotes all available IP addresses).</p> <p> server.port</p> <p>Port number of the server for HTTP(S) protocol.</p> <p> domain.name</p> <p>The address the system will use to register itself into the local cloud's Service Registry.</p> <p> service.registry.address</p> <p>HTTP(S) Access address of the local cloud's Service Registry system. In case of the Service Registry itself, this property is not specified.</p> <p> service.registry.port</p> <p>HTTP(S) Access port of the local cloud's Service Registry system. In case of the Service Registry itself, this property is not specified.</p> <p> log.all.request.and.response</p> <p>Set to <code>true</code> in order to show all HTTP requests/responses in debug log.</p> <p> server.ssl.enabled</p> <p>Set to <code>true</code> in order to enable HTTPS mode.</p> <p> server.ssl.key-store-type</p> <p>Type of the key store. It should be PKCS12</p> <p> server.ssl.key-store</p> <p>Path to the key store.</p> <p> server.ssl.key-store-password</p> <p>Password to the key store.</p> <p> server.ssl.key-alias</p> <p>Alias name of the X.509 certificate.</p> <p> server.ssl.key-password</p> <p>Password to the certificate.</p> <p> server.ssl.client-auth</p> <p>Whether the clients of the system must send their certificate during service consumption or not. If authentication.policy is <code>certificate</code>, this property should be <code>need</code> which means that SSL client authentication is necessary. Otherwise, it should be <code>none</code>.</p> <p> server.ssl.trust-store-type</p> <p>Type of the trust store. It should be PKCS12.</p> <p> server.ssl.trust-store</p> <p>Path to the trust store.</p> <p> server.ssl.trust-store-password</p> <p>Password to the trust store.</p> <p> disable.hostname.verifier</p> <p>If <code>true</code>, HTTP client does not check whether the hostname is match one of the server's SAN (Subject Alternative Name) in its certificate. This should not be used in a production environment.</p> <p> mqtt.api.enabled</p> <p>If <code>true</code>, the services of the system can also be accessed via an MQTT broker.</p> <p> mqtt.broker.address</p> <p>Access address of the MQTT broker.</p> <p> mqtt.broker.port</p> <p>Access port of the MQTT broker.</p> <p> mqtt.client.password</p> <p>The system's password to gain access to the specified MQTT broker (the unique system name will be used as username during the login).</p>"},{"location":"general/changelogs/cl500/","title":"CL-5.0.0","text":"<p>Planned release date: 31/07/2025</p>"},{"location":"general/changelogs/cl500/#general","title":"general","text":"<p>This is the inital release of the 5th generation, which is not backward compatible with the 4th generation! Main conceptual chages:</p> <ul> <li>The reference implementation of 4th generation relied on an interconnected data storage between the Core and Supporting systems. This setup had to be changed due to the requirement for \u201cindependent working modes,\u201d therefore in the 5th generation each Core and Support system has its own database.</li> <li>The above described fundamental change also means that database record identifiers are no longer used to identify entities (system instances, service definitions, etc.). Entities have unique identifiers (names) at the cloud level.</li> <li>The previous authentication mechanism relied on X.509 certificates. In addition, the integration of various authentication mechanisms is supported by the introduction of the Authentication Core System. </li> </ul>"},{"location":"general/changelogs/cl500/#arrowhead-common-utils","title":"arrowhead-common-utils","text":"<p>Initial 5th generation release.</p>"},{"location":"general/changelogs/cl500/#arrowhead-data-transfer-objects","title":"arrowhead-data-transfer-objects","text":"<p>Initial 5th generation release.</p>"},{"location":"general/changelogs/cl500/#arrowhead-serviceregistry","title":"arrowhead-serviceregistry","text":"<p>Initial 5th generation release. Main changes compared to 4th generation:</p> <ul> <li>The system has its own database.</li> <li>Services are represented according to the service-operation design pattern.</li> <li>In addition to service and system data, device data registration is also possible.</li> <li>The interface representation of a service operation is much flexible and more expressive to ensure that translation support services could rely on the interface data stored by Service Registry Core System.</li> <li>MQTT communication protocol support.</li> </ul>"},{"location":"general/changelogs/cl500/#arrowhead-serviceorchestration-dynamic","title":"arrowhead-serviceorchestration-dynamic","text":"<p>Initial 5th generation release. Main changes compared to 4th generation:</p> <ul> <li>The system has its own database.</li> <li>Push orchestration support.</li> <li>This system implements only the dynamic orchestration strategy.</li> <li>MQTT communication protocol support.</li> </ul>"},{"location":"general/changelogs/cl500/#arrowhead-authorization","title":"arrowhead-authorization","text":"<p>Initial 5th generation release. Main changes compared to 4th generation:</p> <ul> <li>The system has its own database.</li> <li>Policy based authorization is implemented (instead of the previous peer-to-peer based).</li> <li>Provider systems are allowed to define their own service authorization policies with the stipulation that rules made by cloud operators always have priority.</li> <li>Simple verifiable authorization tokens are used instead of self-contained tokens.</li> <li>MQTT communication protocol support.</li> </ul>"},{"location":"general/changelogs/cl500/#arrowhead-authentication","title":"arrowhead-authentication","text":"<p>Initial 5th generation release.</p> <ul> <li>This Core System did not exist before.</li> </ul>"},{"location":"general/changelogs/cl500/#arrowhead-blacklist","title":"arrowhead-blacklist","text":"<p>Initial 5th generation release.</p> <ul> <li>This Support System did not exist before.</li> </ul>"},{"location":"help/certificate-profiles/","title":"X.509 Certificate Profiles","text":"<p>X.509 is a certificate standard produced by the International Telecommunication Union - Telecommunication Standardization Sector (ITU-T) and is famously used by the TLS and DTLS protocols. </p>"},{"location":"help/certificate-profiles/#profile-hierarchy","title":"Profile Hierarchy","text":"<p>In brief, an X.509 certificate represents the identity of its owner. It records required inputs to a secure key exchange algorithm, as well as how the identity it represents is endorsed by a hierarchy of issuers.</p> <p>There are nine arrowhead certificate profiles defined and depicted in the following diagram:</p> <p></p> <p>The certificates must contain their profile identifiers as a Distinguished Name Qualifier (DN).</p> Profile Identifier Master <code>ma</code> Gate <code>ga</code> Organization <code>or</code> Local Cloud <code>lo</code> On-Boarding <code>on</code> Broker <code>br</code> Device <code>de</code> System <code>sy</code> Operator <code>op</code>"},{"location":"help/certificate-profiles/#master-profile","title":"Master Profile","text":"<p>A Master certificate exists to establish trust between organizations that may want to interconnect their Arrowhead systems. It does this by issuing Organization and Gate certificates. The former enables organizations to set up their own certificate hierarchies while sharing a common CA with other organizations. The latter kind enables all those organizations to trust a special kind of relay system, which facilitates negotiating connections between organizations.</p> <p>Issuer</p> <p>May be self-signed or issued by an RFC 5280-compliant CA. </p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>arrowhead.eu</code> DN Qualifier (DN) <code>ma</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Omit field if self-signed. Subject Key Identifier No Hash of subject public key. Basic Constraints Yes <code>cA: true</code>, <code>pathLenConstraint: 2</code> Key Usage Yes Bits <code>keyCertSign</code> and <code>cRLSign</code> must be set."},{"location":"help/certificate-profiles/#gate-profile","title":"Gate Profile","text":"<p>A Gate certificate is associated with a message relay or bus that exists to guarantee delivery of messages between the local clouds of distinct organizations. Its existence means that such messages can be sent over a secure transport.</p> <p>Issuer</p> <p>Must be issued by a Master certificate.</p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>&lt;relay-name&gt;.arrowhead.eu</code> DN Qualifier (DN) <code>ga</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Basic Constraints Yes <code>cA: false</code> Key Usage Yes Bits <code>digitalSignature</code> and <code>keyEncipherment</code> must be set. Extended Key Usage No Purposes <code>serverAuth</code> and <code>clientAuth</code> must be specified. Subject Alternative Name No At least one IP address, DNS name or other identifier through which the system can be reached."},{"location":"help/certificate-profiles/#organization-profile","title":"Organization Profile","text":"<p>An Organization certificate is maintained by a single organization, allowing it to manage the certificates of their own local clouds.</p> <p>Issuer</p> <p>Must be issued by a Master certificate.</p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>&lt;organization-name&gt;.arrowhead.eu</code> DN Qualifier (DN) <code>or</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Subject Key Identifier No Hash of subject public key. Basic Constraints Yes <code>cA: true</code>, <code>pathLenConstraint: 1</code> Key Usage Yes Bits <code>keyCertSign</code> and <code>cRLSign</code> must be set. <p>If the certificate will be used to automatically respond to CSRs (Certificate Signing Request) via a network application interface, the following must also be present:</p> Extension Critical Value Key Usage Yes Bits <code>digitalSignature</code> and <code>keyEncipherment</code> must be set in addititon. Extended Key Usage No Purposes <code>serverAuth</code> and <code>clientAuth</code> must be specified. Subject Alternative Name No At least one IP address, DNS name or other identifier to which CSRs can be sent."},{"location":"help/certificate-profiles/#local-cloud-profile","title":"Local Cloud Profile","text":"<p>A Local Cloud certificate is maintained by a single local cloud, enabling it to issue end entity certificates for on-boarding and on-boarded devices, as well as for systems and operators.</p> <p>Issuer</p> <p>Must be issued by an Organization certificate.</p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>&lt;cloud-name&gt;.&lt;organization-name&gt;.arrowhead.eu</code> DN Qualifier (DN) <code>lo</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Subject Key Identifier No Hash of subject public key. Basic Constraints Yes <code>cA: true</code>, <code>pathLenConstraint: 0</code> Key Usage Yes Bits <code>keyCertSign</code> and <code>cRLSign</code> must be set. <p>If the certificate will be used to automatically respond to CSRs (Certificate Signing Request) via a network application interface, the following must also be present:</p> Extension Critical Value Key Usage Yes Bits <code>digitalSignature</code> and <code>keyEncipherment</code> must be set in addititon. Extended Key Usage No Purposes <code>serverAuth</code> and <code>clientAuth</code> must be specified. Subject Alternative Name No At least one IP address, DNS name or other identifier to which CSRs can be sent."},{"location":"help/certificate-profiles/#on-boarding-profile","title":"On-Boarding Profile","text":"<p>An On-Boarding certificate allows for a device in an Arrowhead local cloud to request a new device certificate. It is used for both, either to provide new devices and/or to facilitate renewal of certificates as they are about to expire. Certificates adhering to this profile must only be provided to devices known or assumed to be trustworthy.</p> <p>Issuer</p> <p>Must be issued by a Local Cloud certificate.</p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>&lt;on-boarding-system-name&gt;.&lt;cloud-name&gt;.&lt;organization-name&gt;.arrowhead.eu</code> DN Qualifier (DN) <code>on</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Basic Constraints Yes <code>cA: false</code> Key Usage Yes Bits <code>digitalSignature</code> and <code>keyEncipherment</code> must be set. Extended Key Usage No Purposes <code>serverAuth</code> and <code>clientAuth</code> must be specified. Subject Alternative Name No At least one IP address, DNS name or other identifier through which the owning device can be reached."},{"location":"help/certificate-profiles/#device-profile","title":"Device Profile","text":"<p>A Device certificate allows for a device in an Arrowhead local cloud to request new system certificates. One system certificate is required for each system a given device intends to run. Certificates adhering to this profile must only be provided to devices known or assumed to be trustworthy.</p> <p>Issuer</p> <p>Must be issued by a Local Cloud certificate.</p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>&lt;device-name&gt;.&lt;cloud-name&gt;.&lt;organization-name&gt;.arrowhead.eu</code> DN Qualifier (DN) <code>de</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Basic Constraints Yes <code>cA: false</code> Key Usage Yes Bits <code>digitalSignature</code> and <code>keyEncipherment</code> must be set. Extended Key Usage No Purposes <code>serverAuth</code> and <code>clientAuth</code> must be specified. Subject Alternative Name No At least one IP address, DNS name or other identifier through which the device can be reached."},{"location":"help/certificate-profiles/#broker-profile","title":"Broker Profile","text":"<p>A Broker certificate is associated with a message broker that exists to guarantee delivery of messages between the systems within a Local Cloud when secured publish-subscribe communication strategy is required (like MQTT protocol).</p> <p>Issuer</p> <p>Must be issued by a Local Cloud certificate.</p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>&lt;broker-name&gt;.&lt;cloud-name&gt;.&lt;organization-name&gt;.arrowhead.eu</code> DN Qualifier (DN) <code>br</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Basic Constraints Yes <code>cA: false</code> Key Usage Yes Bits <code>digitalSignature</code> and <code>keyEncipherment</code> must be set. Extended Key Usage No Purposes <code>serverAuth</code> and <code>clientAuth</code> must be specified. Subject Alternative Name No At least one IP address, DNS name or other identifier through which the system can be reached."},{"location":"help/certificate-profiles/#system-profile","title":"System Profile","text":"<p>A System certificate allows for a device in an Arrowhead local cloud to provide the services associated with a particular system, and/or to act as a service consumer.</p> <p>Issuer</p> <p>Must be issued by a Local Cloud certificate.</p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>&lt;system-name&gt;.&lt;cloud-name&gt;.&lt;organization-name&gt;.arrowhead.eu</code> DN Qualifier (DN) <code>sy</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Basic Constraints Yes <code>cA: false</code> Key Usage Yes Bits <code>digitalSignature</code> and <code>keyEncipherment</code> must be set. Extended Key Usage No Purposes <code>serverAuth</code> and <code>clientAuth</code> must be specified. Subject Alternative Name No At least one IP address, DNS name or other identifier through which the system can be reached."},{"location":"help/certificate-profiles/#operator-profile","title":"Operator Profile","text":"<p>An Operator certificate allows for a human or computer operator to administer a particular Arrowhead Local Cloud.</p> <p>Issuer</p> <p>Must be issued by a Local Cloud certificate.</p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>&lt;system-name&gt;.&lt;cloud-name&gt;.&lt;organization-name&gt;.arrowhead.eu</code> DN Qualifier (DN) <code>sy</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Basic Constraints Yes <code>cA: false</code> Key Usage Yes Bits <code>digitalSignature</code> and <code>keyEncipherment</code> must be set. Extended Key Usage No Purposes <code>serverAuth</code> and <code>clientAuth</code> must be specified. Subject Alternative Name No At least one IP address, DNS name or other identifier through which the system can be reached."},{"location":"help/faq/","title":"FAQ","text":"<p>Coming soon...</p>"},{"location":"help/tutorials/create-certificates/","title":"Create Certificates","text":"<p>TODO</p>"},{"location":"help/tutorials/mosquitto-mqtt-broker/","title":"Mosquitto MQTT Broker","text":"<p>Eclipse Mosquitto is an open source (EPL/EDL licensed) message broker that implements the MQTT protocol and is a good choice to use in an Arrowhead Local Cloud when MQTT is required.</p>"},{"location":"help/tutorials/mosquitto-mqtt-broker/#install","title":"Install","text":"<p>For the installation possibilities please consult with their official site.</p>"},{"location":"help/tutorials/mosquitto-mqtt-broker/#access-control","title":"Access Control","text":"<p>In a properly secured Local Cloud, when MQTT is required, the access to the broker and topics should also be controlled. Connecting clients should be authenticated and reading/writing of topics for service providing should be limited to the actual service provider clients.</p>"},{"location":"help/tutorials/mosquitto-mqtt-broker/#client-authentication","title":"Client authentication","text":"<p>In order to set up client authentication a \"password file\" has to be created which contains user name and password combinations for the clients. </p> <ul> <li>It is recommended that Arrowhead Core Systems have unique credentials.</li> <li>It is recommended that service providing application systems have unique credentials.</li> <li>It is acceptable that application systems with service consumption purpose only, share a common credential.</li> </ul> <p>You can manage the users by using the <code>mosquitto_passwd</code> command (which comes with the broker installation).</p> <p>Create the password file with the first user:</p> <pre><code>mosquitto_passwd -c /etc/mosquitto/users &lt;username&gt;\n</code></pre> <p>You will be prompted to set a password and the <code>users</code> file will be created. Only the hashed version of the password is stored in the file.</p> <p>Add additional users to the file (without overwriting it):</p> <pre><code>mosquitto_passwd /etc/mosquitto/users &lt;username&gt;\n</code></pre> <p>Modify the broker configuration:</p> <p>The Mosquitto configuration file is usually located at <code>/etc/mosquitto/mosquitto.conf</code>. To enable password authentication add the following lines:</p> <pre><code>allow_anonymous false\npassword_file /etc/mosquitto/users\n</code></pre> <p>After making changes, always restart the broker!</p>"},{"location":"help/tutorials/mosquitto-mqtt-broker/#topic-read-control","title":"Topic read control","text":"<p>Having read or write access control on the topics used for service providing ensures that only the actual service providers are allowed</p> <ul> <li>to write to a publish kind service topic, and</li> <li>to read a request-response kind service topic.</li> </ul> <p>Create an access control file</p> <p>Create an <code>accesctrl</code> file under the <code>/etc/mosquitto</code> folder with a similar content:</p> <pre><code># Arrowhead Core Systems\n\nuser serviceregistry\ntopic read arrowhead/serviceregistry/system-discovery\ntopic read arrowhead/serviceregistry/service-discovery\n\n...\n\n# Publish kind service topics\n\nuser &lt;username_a&gt;\ntopic write &lt;its/specific/service/topic/&gt;\n\nuser &lt;username_b&gt;\ntopic write &lt;its/specific/service/topic/&gt;\n\n...\n\n# Request-response kind service topics\n\nuser &lt;username_c&gt;\ntopic read &lt;its/specific/service/topic/&gt;\n\nuser &lt;username_d&gt;\ntopic read &lt;its/specific/service/topic/&gt;\n\n...\n\n</code></pre> <p>Modify the broker configuration:</p> <p>The Mosquitto configuration file is usually located at <code>/etc/mosquitto/mosquitto.conf</code>. To enable topic access control add the following line:</p> <pre><code>acl_file /etc/mosquitto/accesctrl\n</code></pre> <p>After making changes, always restart the broker!</p>"},{"location":"help/tutorials/mosquitto-mqtt-broker/#ssl-with-arrowhead-certificate","title":"SSL with Arrowhead Certificate","text":"<p>Using Arrowhead compliant broker certificate makes your MQTT Broker part of your Local Cloud when secure network communication (SSL) is required. However the certificates in the default <code>PKCS#12</code> format (<code>broker.p12</code> file for example) can't be directly utilized by the Eclipse Mosquitto. It requires a separated CA certificate file, a public certificate file and a private key file what you can extract from your <code>PKCS#12</code> file with the help of the following openssl library commands:</p> <p>Extract the CA certificate:</p> <pre><code>openssl pkcs12 -in your-broker-certificate.p12 -cacerts -nokeys -out ca.crt\n</code></pre> <p>Now you can configure the <code>ca.crt</code> file as your broker's CA certificate.</p> <p>Extract the public certificate:</p> <pre><code>openssl pkcs12 -in your-broker-certificate.p12 -clcerts -nokeys -out public.crt\n</code></pre> <p>Now you can configure the <code>public.crt</code> file as your broker's public certificate.</p> <p>Extract the private key:</p> <pre><code>openssl pkcs12 -in your-broker-certificate.p12 -nocerts -out private.key\n</code></pre> <ul> <li>You may be prompted to enter the password for the <code>.p12</code> file.</li> <li>You will be prompted to add a passphrase to the extracted key.</li> </ul> <p>Now you can configure the <code>private.key</code> file as your broker's private key.</p> <p>Mosquitto will prompt for the private key password on startup. To avoid this (in secure environments), re-export the private key without a password:</p> <pre><code>openssl rsa -in private.key -out private.key\n</code></pre> <p>At the end of this process your Mosquitto configuration file should contain something similar:</p> <pre><code>cafile /path/to/ca.crt\ncertfile /path/to/public.crt\nkeyfile /path/to/private.key\n</code></pre> <p>After making changes, always restart the broker!</p>"},{"location":"help/tutorials/serviceregistry-http-demo/","title":"Service Registry HTTP Demo","text":""},{"location":"help/tutorials/serviceregistry-http-demo/#recap","title":"Recap","text":"<p>In this demo, we will demonstrate through a concrete example how a system should use the Service Registry endpoints.</p> <p></p> <p>Let's say, we have a greenhouse. Inside the greenhouse, there are plantations  divided into blocks, and close to the blocks, thermometers are placed. We can monitor the temperature of the blocks, using the systems that run on the thermometers. If the temperature is too extreme, the systems may send a warning to our office.</p> <p>There are two types of thermometers: indoor and outdoor thermometers, so we can even monitor the temperature outside the greenhouse.</p> <p></p> <p>In our office, there are different weather displayers that can show various data about the weather, such as wind or temperature. The temperature data measured by the thermometers in the greenhouse is sent to these weather displayers. We also have alarms, this way we are immediately informed about extreme temperatures.</p> <p>Thermometers can provide information on temperature in Celsius, Fahrenheit or Kelvin scales, but not all thermometers are capable of sending data at all scales.</p> <p>The concrete entities used in our example can be mapped to Service Registry entities as follows:</p> <p></p> <ul> <li>Devices: thermometers, weather displayers and alarms</li> <li>Systems: temperature providers running on the thermometers, temperature consumers running on the weather displayers, and alert consumers running on the alarms.</li> <li>Services: Fahrenheit info, Kelvin info, Celsius info, and alert service, provided by the temperature providers and consumed by the temperature consumers and the alert consumers</li> </ul> <p>We will demonstrate the usage of the endpoints via two examples: example 1 is about a provider system, and example 2 is about a consumer system.</p>"},{"location":"help/tutorials/serviceregistry-http-demo/#example-1-provider","title":"Example 1: Provider","text":"<p>In the following, we'll see how:</p> <ul> <li>a system called temperature-provider2, </li> <li>running on the device named thermometer2,</li> <li>publishes its services: Kelvin-info, Celsius-info and alert-service</li> </ul> <p>after registering itself into the Local Cloud.</p>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-1-authentication","title":"Step 1: Authentication","text":"<p>First of all, the system should perform some kind of authentication. In this example the declared authentication strategy will be used.</p> <p>To perform this type of authentication, the system must provide an authentication header for each request. This should consist of the SYSTEM// prefix, followed by the name of the system. </p> <p>In our example, the authorization header will look like this:</p> <pre><code>-H 'Authorization: Bearer SYSTEM//temperature-provider2'\n</code></pre>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-2-lookup-devices","title":"Step 2: Lookup Devices","text":"<p>During registration, the system can specify which device it is running on. In this case, our device is called thermometer2. Specifying the device is optional, but let's say, that in our example it is relevant to the operation of temperature-provider-2. Therefore, the system first looks up if there is a device with name thermometer2 in the Local Cloud, to make sure that the device it is running on is already registered. (Otherwise you must register the device first, as shown in example 2.)</p> <p>The request looks like this:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/device-discovery/lookup' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//temperature-provider2' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"deviceNames\": [\n    \"thermometer2\"\n  ],\n  \"addresses\": [\n  ],\n  \"addressType\": \"\",\n  \"metadataRequirementList\": [\n  ]\n}'\n</code></pre> <p>Which leads to the following response from the Service Registry:</p> <pre><code>{\n  \"entries\": [\n    {\n      \"name\": \"thermometer2\",\n      \"metadata\": {\n        \"scales\": [\n          \"Kelvin\",\n          \"Celsius\"\n        ],\n        \"max-temperature\": {\n          \"Kelvin\": 310,\n          \"Celsius\": 40\n        },\n        \"min-temperature\": {\n          \"Kelvin\": 260,\n          \"Celsius\": -10\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"81:ef:1a:44:7a:f5\"\n        }\n      ],\n      \"createdAt\": \"2024-11-04T01:53:02Z\",\n      \"updatedAt\": \"2024-11-04T01:53:02Z\"\n    }\n  ],\n  \"count\": 1\n}\n</code></pre> <p>Since we have an existing entity back, thermometer2 is indeed a registered device.</p>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-3-register-system","title":"Step 3: Register System","text":"<p>Now we can perform the registration operation of our temperature-provider2 system.</p> <p>To register, we need to provide the following information about the system:</p> <ul> <li>metadata: It's totally up to us what we put into it. For temperature-provider2, we want to make sure, that it contains a list about the temperature scales that the system can manage (Kelvin and Celsius), a location in the greenhouse from which the system's device measures the temperature (North side, 2. block), and the type of the thermometer (indoor).</li> <li>version: Since there was no prior version of this system, we can leave this field empty. The Service Registry will initialize this value to a default, which is 1.0.0.</li> <li>addresses: This is typically an IP address or a hostname for the system. In case of the temperature-provider2, we want to provide both. For IP address, we are using 192.168.56.116, and the hostname is tp2.greenhouse.com.</li> <li>device name: This can be left blank, but we will set it to the name of our device: thermometer2.</li> </ul> <p>It is not necessary to specify the system name explicitly, because the Service Registry extracts it from the authorization header.</p> <p>Based on the above, the request looks like this:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/system-discovery/register' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//temperature-provider2' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"metadata\": {\n    \"scales\": [\"Kelvin\", \"Celsius\"],\n    \"location\": {\"side\": \"North\", \"block\": 2},\n    \"indoor\": true\n  },\n  \"version\": \"\",\n  \"addresses\": [\n    \"192.168.56.116\",\n    \"tp2.greenhouse.com\"\n  ],\n  \"deviceName\": \"thermometer2\"\n}'\n</code></pre> <p>We receive the following response:</p> <pre><code>{\n  \"name\": \"temperature-provider2\",\n  \"metadata\": {\n    \"scales\": [\n      \"Kelvin\",\n      \"Celsius\"\n    ],\n    \"location\": {\n      \"side\": \"North\",\n      \"block\": 2\n    },\n    \"indoor\": true\n  },\n  \"version\": \"1.0.0\",\n  \"addresses\": [\n    {\n      \"type\": \"IPV4\",\n      \"address\": \"192.168.56.116\"\n    },\n    {\n      \"type\": \"HOSTNAME\",\n      \"address\": \"tp2.greenhouse.com\"\n    }\n  ],\n  \"device\": {\n    \"name\": \"thermometer2\",\n    \"metadata\": {\n      \"scales\": [\n        \"Kelvin\",\n        \"Celsius\"\n      ],\n      \"max-temperature\": {\n        \"Kelvin\": 310,\n        \"Celsius\": 40\n      },\n      \"min-temperature\": {\n        \"Kelvin\": 260,\n        \"Celsius\": -10\n      }\n    },\n    \"addresses\": [\n      {\n        \"type\": \"MAC\",\n        \"address\": \"81:ef:1a:44:7a:f5\"\n      }\n    ],\n    \"createdAt\": \"2024-11-04T01:53:02Z\",\n    \"updatedAt\": \"2024-11-04T01:53:02Z\"\n  },\n  \"createdAt\": \"2024-11-08T10:21:10.950683800Z\",\n  \"updatedAt\": \"2024-11-08T10:21:10.950683800Z\"\n}\n</code></pre>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-4-register-service-instances","title":"Step 4: Register Service Instances","text":"<p>The temperature-provider2 system that we have just registered provides three services in the Local Cloud:</p> <ul> <li>Kelvin info: provides temperature information using the Kelvin scale,</li> <li>Celsius info: provides temperature information using the Celsius scale,</li> <li>alert service: sends an alert if the temperature is extreme (by default, these thresholds are 10 and 25 Celsius, but the consumer can overwrite them).</li> </ul> <p>We have to register these services one by one.</p> <p>1. Kelvin info:  We have to provide the following information:</p> <ul> <li>service definition name: In this example, we use kelvin-info, which is already an existing service definition stored in the Local Cloud. You can use a non-existing service definition as well, because in that case, the registration process will create it.</li> <li>version: We will use the default version, so we can leave this field blank.</li> <li>expires at: This is a timestamp in the future, when the service is no longer funtioning. For Kelvin info, we set this to 01. 01. 2030. </li> <li>metadata: This can be customised depending on the service. For temperature information, we define the margin of error, which is 0.5 degree.</li> <li>interfaces: All the services use HTTP protocol, so we will go with the template named generic-http, that already exists in the Local Cloud. Note that in our case, the service discovery interface policy is set to restricted, which means that only already existing interface templates can be used. If you set this to extendable or open, you can use non-existent interface templates, and they will be created as well. The interface provided by the Kelvin info service is the following:<ul> <li>GET tp2.greenhouse.com:8080/kelvin/query</li> </ul> </li> </ul> <p>Based on these specifications, the request looks like this:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/service-discovery/register' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//temperature-provider2' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"serviceDefinitionName\": \"kelvin-info\",\n  \"version\": \"\",\n  \"expiresAt\": \"2030-01-01T00:00:00Z\",\n  \"metadata\": {\n    \"margin-of-error\": 0.5\n  },\n  \"interfaces\": [\n    {\n      \"templateName\": \"generic-http\",\n      \"protocol\": \"http\",\n      \"policy\": \"NONE\",\n      \"properties\": {\n        \"accessAddresses\": [\"192.168.56.116\", \"tp2.greenhouse.com\"],\n        \"accessPort\": 8080,\n        \"basePath\": \"/kelvin\",\n        \"operations\": {\"query-temperature\": { \"method\": \"GET\", \"path\": \"/query\"} }\n      }\n    }\n  ]\n}'\n</code></pre> <p>After successful operation, we will receive the JSON object representation of the registered service:</p> <pre><code>{\n  \"instanceId\": \"temperature-provider2::kelvin-info::1.0.0\",\n  \"provider\": {\n    \"name\": \"temperature-provider2\",\n    \"metadata\": {\n      \"scales\": [\n        \"Kelvin\",\n        \"Celsius\"\n      ],\n      \"location\": {\n        \"side\": \"North\",\n        \"block\": 2\n      },\n      \"indoor\": true\n    },\n    \"version\": \"1.0.0\",\n    \"addresses\": [\n      {\n        \"type\": \"IPV4\",\n        \"address\": \"192.168.56.116\"\n      },\n      {\n        \"type\": \"HOSTNAME\",\n        \"address\": \"tp2.greenhouse.com\"\n      }\n    ],\n    \"device\": {\n      \"name\": \"thermometer2\",\n      \"metadata\": {\n        \"scales\": [\n          \"Kelvin\",\n          \"Celsius\"\n        ],\n        \"max-temperature\": {\n          \"Kelvin\": 310,\n          \"Celsius\": 40\n        },\n        \"min-temperature\": {\n          \"Kelvin\": 260,\n          \"Celsius\": -10\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"81:ef:1a:44:7a:f5\"\n        }\n      ],\n      \"createdAt\": \"2024-11-04T01:53:02Z\",\n      \"updatedAt\": \"2024-11-04T01:53:02Z\"\n    },\n    \"createdAt\": \"2024-11-08T10:21:11Z\",\n    \"updatedAt\": \"2024-11-08T10:21:11Z\"\n  },\n  \"serviceDefinition\": {\n    \"name\": \"kelvin-info\",\n    \"createdAt\": \"2024-11-08T11:24:43Z\",\n    \"updatedAt\": \"2024-11-08T11:24:43Z\"\n  },\n  \"version\": \"1.0.0\",\n  \"expiresAt\": \"2030-01-01T00:00:00Z\",\n  \"metadata\": {\n    \"margin-of-error\": 0.5\n  },\n  \"interfaces\": [\n    {\n      \"templateName\": \"generic-http\",\n      \"protocol\": \"http\",\n      \"policy\": \"NONE\",\n      \"properties\": {\n        \"accessAddresses\": [\n          \"192.168.56.116\",\n          \"tp2.greenhouse.com\"\n        ],\n        \"accessPort\": 8080,\n        \"operations\": {\n          \"query-temperature\": {\n            \"path\": \"/query\",\n            \"method\": \"GET\"\n          }\n        },\n        \"basePath\": \"/kelvin\"\n      }\n    }\n  ],\n  \"createdAt\": \"2024-11-19T12:00:07.959849300Z\",\n  \"updatedAt\": \"2024-11-19T12:00:07.959849300Z\"\n}\n</code></pre> <p>2. Celsius info:  The only difference with the Kelvin info is the service definition name (celsius-info) and the interface (GET tp2.greenhouse.com:8080/celsius/query). All the other registation data will remain the same.</p> <p>So the request will look like this:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/service-discovery/register' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//temperature-provider2' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"serviceDefinitionName\": \"celsius-info\",\n  \"version\": \"\",\n  \"expiresAt\": \"2030-01-01T00:00:00Z\",\n  \"metadata\": {\n    \"margin-of-error\": 0.5\n  },\n  \"interfaces\": [\n    {\n      \"templateName\": \"generic-http\",\n      \"protocol\": \"http\",\n      \"policy\": \"NONE\",\n      \"properties\": {\n        \"accessAddresses\": [\"192.168.56.116\", \"tp2.greenhouse.com\"],\n        \"accessPort\": 8080,\n        \"basePath\": \"/celsius\",\n        \"operations\": {\"query-temperature\": { \"method\": \"GET\", \"path\": \"/query\"} }\n      }\n    }\n  ]\n}'\n</code></pre> <p>The received response is the following:</p> <pre><code>{\n  \"instanceId\": \"temperature-provider2::celsius-info::1.0.0\",\n  \"provider\": {\n    \"name\": \"temperature-provider2\",\n    \"metadata\": {\n      \"scales\": [\n        \"Kelvin\",\n        \"Celsius\"\n      ],\n      \"location\": {\n        \"side\": \"North\",\n        \"block\": 2\n      },\n      \"indoor\": true\n    },\n    \"version\": \"1.0.0\",\n    \"addresses\": [\n      {\n        \"type\": \"IPV4\",\n        \"address\": \"192.168.56.116\"\n      },\n      {\n        \"type\": \"HOSTNAME\",\n        \"address\": \"tp2.greenhouse.com\"\n      }\n    ],\n    \"device\": {\n      \"name\": \"thermometer2\",\n      \"metadata\": {\n        \"scales\": [\n          \"Kelvin\",\n          \"Celsius\"\n        ],\n        \"max-temperature\": {\n          \"Kelvin\": 310,\n          \"Celsius\": 40\n        },\n        \"min-temperature\": {\n          \"Kelvin\": 260,\n          \"Celsius\": -10\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"81:ef:1a:44:7a:f5\"\n        }\n      ],\n      \"createdAt\": \"2024-11-04T01:53:02Z\",\n      \"updatedAt\": \"2024-11-04T01:53:02Z\"\n    },\n    \"createdAt\": \"2024-11-08T10:21:11Z\",\n    \"updatedAt\": \"2024-11-08T10:21:11Z\"\n  },\n  \"serviceDefinition\": {\n    \"name\": \"celsius-info\",\n    \"createdAt\": \"2024-10-24T21:48:36Z\",\n    \"updatedAt\": \"2024-10-24T21:48:36Z\"\n  },\n  \"version\": \"1.0.0\",\n  \"expiresAt\": \"2030-01-01T00:00:00Z\",\n  \"metadata\": {\n    \"margin-of-error\": 0.5\n  },\n  \"interfaces\": [\n    {\n      \"templateName\": \"generic-http\",\n      \"protocol\": \"http\",\n      \"policy\": \"NONE\",\n      \"properties\": {\n        \"accessAddresses\": [\n          \"192.168.56.116\",\n          \"tp2.greenhouse.com\"\n        ],\n        \"accessPort\": 8080,\n        \"operations\": {\n          \"query-temperature\": {\n            \"path\": \"/query\",\n            \"method\": \"GET\"\n          }\n        },\n        \"basePath\": \"/celsius\"\n      }\n    }\n  ],\n  \"createdAt\": \"2024-11-19T16:56:06.439181300Z\",\n  \"updatedAt\": \"2024-11-19T16:56:06.439181300Z\"\n}\n</code></pre> <p>3. Alert service: </p> <p>Our last service will be responsible for sending error messages. The registration data is the following:</p> <ul> <li>service definition name: In this case this is alert-service.</li> <li>version: We will use the default version.</li> <li>expires at: The alert service expires a bit earlier than the previous ones, so we set this to 01. 01. 2025.</li> <li>metadata: For alert service, the maximum possible delay is given, which is 15 sec.</li> <li>interfaces: The interface's endpoints provided by the alert service are the following:<ul> <li>POST tp2.greenhouse.com:8000/alert/subscribe </li> <li>DELETE tp2.greenhouse.com:8000/alert/unsubscribe</li> <li>POST tp2.greenhouse.com:8000/alert/threshold</li> </ul> </li> </ul> <p>We will register this service with the following request:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/service-discovery/register' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//temperature-provider2' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"serviceDefinitionName\": \"alert-service\",\n  \"version\": \"\",\n  \"expiresAt\": \"2025-01-01T00:00:00Z\",\n  \"metadata\": {\n    \"max-delay\": {\"value\": 15, \"unit\": \"sec\"}\n  },\n  \"interfaces\": [\n    {\n      \"templateName\": \"generic-http\",\n      \"protocol\": \"http\",\n      \"policy\": \"NONE\",\n      \"properties\": {\n        \"accessAddresses\": [\"192.168.56.116\", \"tp2.greenhouse.com\"],\n        \"accessPort\": 8080,\n        \"basePath\": \"/alert\",\n        \"operations\": {\n          \"subscribe\": { \"method\": \"POST\", \"path\": \"/subscribe\"},\n          \"unsubscribe\": { \"method\": \"DELETE\", \"path\": \"/unsubscribe\"},\n          \"set-threshold\": { \"method\": \"POST\", \"path\": \"/threshold\"}\n        }\n      }\n    }\n  ]\n}'\n</code></pre> <p>The received answer:</p> <pre><code>{\n  \"instanceId\": \"temperature-provider2::alert-service::1.0.0\",\n  \"provider\": {\n    \"name\": \"temperature-provider2\",\n    \"metadata\": {\n      \"scales\": [\n        \"Kelvin\",\n        \"Celsius\"\n      ],\n      \"location\": {\n        \"side\": \"North\",\n        \"block\": 2\n      },\n      \"indoor\": true\n    },\n    \"version\": \"1.0.0\",\n    \"addresses\": [\n      {\n        \"type\": \"IPV4\",\n        \"address\": \"192.168.56.116\"\n      },\n      {\n        \"type\": \"HOSTNAME\",\n        \"address\": \"tp2.greenhouse.com\"\n      }\n    ],\n    \"device\": {\n      \"name\": \"thermometer2\",\n      \"metadata\": {\n        \"scales\": [\n          \"Kelvin\",\n          \"Celsius\"\n        ],\n        \"max-temperature\": {\n          \"Kelvin\": 310,\n          \"Celsius\": 40\n        },\n        \"min-temperature\": {\n          \"Kelvin\": 260,\n          \"Celsius\": -10\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"81:ef:1a:44:7a:f5\"\n        }\n      ],\n      \"createdAt\": \"2024-11-04T01:53:02Z\",\n      \"updatedAt\": \"2024-11-04T01:53:02Z\"\n    },\n    \"createdAt\": \"2024-11-08T10:21:11Z\",\n    \"updatedAt\": \"2024-11-08T10:21:11Z\"\n  },\n  \"serviceDefinition\": {\n    \"name\": \"alert-service\",\n    \"createdAt\": \"2024-11-08T15:23:10Z\",\n    \"updatedAt\": \"2024-11-08T15:23:10Z\"\n  },\n  \"version\": \"1.0.0\",\n  \"expiresAt\": \"2025-01-01T00:00:00Z\",\n  \"metadata\": {\n    \"max-delay\": {\n      \"value\": 15,\n      \"unit\": \"sec\"\n    }\n  },\n  \"interfaces\": [\n    {\n      \"templateName\": \"generic-http\",\n      \"protocol\": \"http\",\n      \"policy\": \"NONE\",\n      \"properties\": {\n        \"accessAddresses\": [\n          \"192.168.56.116\",\n          \"tp2.greenhouse.com\"\n        ],\n        \"accessPort\": 8080,\n        \"operations\": {\n          \"subscribe\": {\n            \"path\": \"/subscribe\",\n            \"method\": \"POST\"\n          },\n          \"unsubscribe\": {\n            \"path\": \"/unsubscribe\",\n            \"method\": \"DELETE\"\n          },\n          \"set-threshold\": {\n            \"path\": \"/threshold\",\n            \"method\": \"POST\"\n          }\n        },\n        \"basePath\": \"/alert\"\n      }\n    }\n  ],\n  \"createdAt\": \"2024-11-19T17:08:47.706960300Z\",\n  \"updatedAt\": \"2024-11-19T17:08:47.706960300Z\"\n}\n</code></pre>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-5-lookup-and-revoke-service","title":"Step 5: Lookup and Revoke Service","text":"<p>Let's say  we have decided to no longer provide temperature-provider2's  alert service. </p> <p>For deleting the service, we have to know the service instance ID, which was generated by the Service Registry, when we registered our service into the Local Cloud. We can find out what the ID is, if we perform a lookup operation. Of course, if we know the ID, this step can be skipped.</p> <p>Since we know that the provider name is temperature-provider2, the service definition name is alert-service, and the version was 1.0.0, we will send a lookup request with these filters. We will set the verbose flag to false, because we only need the service instance ID here, all the other additional data is unnecessary.</p> <p>Note that our case, the service discovery policy is set to OPEN. If the discovery policy is RESTRICTED, we will only retrieve the services that have the  metadata key unrestricted-discovery, and this is set to true.</p> <p>The lookup request looks like this:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/service-discovery/lookup?verbose=false' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//temperature-provider2' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"instanceIds\": [\n  ],\n  \"providerNames\": [\n    \"temperature-provider2\"\n  ],\n  \"serviceDefinitionNames\": [\n    \"alert-service\"\n  ],\n  \"versions\": [\n    \"1.0.0\"\n  ],\n  \"alivesAt\": \"\",\n  \"metadataRequirementsList\": [\n  ],\n  \"interfaceTemplateNames\": [\n  ],\n  \"interfacePropertyRequirementsList\": [\n  ],\n  \"policies\": [\n  ]\n}'\n</code></pre> <p>The lookup response:</p> <pre><code>{\n  \"entries\": [\n    {\n      \"instanceId\": \"temperature-provider2::alert-service::1.0.0\",\n      \"provider\": {\n        \"name\": \"temperature-provider2\",\n        \"metadata\": {\n          \"scales\": [\n            \"Kelvin\",\n            \"Celsius\"\n          ],\n          \"location\": {\n            \"side\": \"North\",\n            \"block\": 2\n          },\n          \"indoor\": true\n        },\n        \"version\": \"1.0.0\",\n        \"addresses\": [\n          {\n            \"type\": \"IPV4\",\n            \"address\": \"192.168.56.116\"\n          },\n          {\n            \"type\": \"HOSTNAME\",\n            \"address\": \"tp2.greenhouse.com\"\n          }\n        ],\n        \"device\": {\n          \"name\": \"thermometer2\",\n          \"metadata\": {\n            \"scales\": [\n              \"Kelvin\",\n              \"Celsius\"\n            ],\n            \"max-temperature\": {\n              \"Kelvin\": 310,\n              \"Celsius\": 40\n            },\n            \"min-temperature\": {\n              \"Kelvin\": 260,\n              \"Celsius\": -10\n            }\n          },\n          \"addresses\": [\n            {\n              \"type\": \"MAC\",\n              \"address\": \"81:ef:1a:44:7a:f5\"\n            }\n          ],\n          \"createdAt\": \"2024-11-04T01:53:02Z\",\n          \"updatedAt\": \"2024-11-04T01:53:02Z\"\n        },\n        \"createdAt\": \"2024-11-08T10:21:11Z\",\n        \"updatedAt\": \"2024-11-08T10:21:11Z\"\n      },\n      \"serviceDefinition\": {\n        \"name\": \"alert-service\",\n        \"createdAt\": \"2024-11-08T15:23:10Z\",\n        \"updatedAt\": \"2024-11-08T15:23:10Z\"\n      },\n      \"version\": \"1.0.0\",\n      \"expiresAt\": \"2025-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"max-delay\": {\n          \"value\": 15,\n          \"unit\": \"sec\"\n        }\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic-http\",\n          \"protocol\": \"http\",\n          \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\n              \"192.168.56.116\",\n              \"tp2.greenhouse.com\"\n            ],\n            \"accessPort\": 8080,\n            \"operations\": {\n              \"subscribe\": {\n                \"path\": \"/subscribe\",\n                \"method\": \"POST\"\n              },\n              \"unsubscribe\": {\n                \"path\": \"/unsubscribe\",\n                \"method\": \"DELETE\"\n              },\n              \"set-threshold\": {\n                \"path\": \"/threshold\",\n                \"method\": \"POST\"\n              }\n            },\n            \"basePath\": \"/alert\"\n          }\n        }\n      ],\n      \"createdAt\": \"2024-11-19T17:08:48Z\",\n      \"updatedAt\": \"2024-11-19T17:08:48Z\"\n    }\n  ],\n  \"count\": 1\n}\n</code></pre> <p>Since there was exactly one response, we learned that the service instance id is temperature-provider2::alert-service::1.0.0. We can revoke the service by sending the following request:</p> <pre><code>curl -X 'DELETE' \\\n  'http://localhost:8443/serviceregistry/service-discovery/revoke/temperature-provider2%3A%3Aalert-service%3A%3A1.0.0' \\\n  -H 'accept: */*' \\\n  -H 'Authorization: Bearer SYSTEM//temperature-provider2'\n</code></pre> <p>Note, the service instance id contains double double colons (::) as separator characters, which is a reserved character in the URL with a special meaning. Because of that, the colon has to be encoded as %3A, that is why we used these in the URL.</p> <p>This operation only works, if the service we are deleting is associated with our system. Otherwise, the following error message will be received:</p> <pre><code>{\n  \"errorMessage\": \"Revoking other systems' service is forbidden\",\n  \"errorCode\": 403,\n  \"exceptionType\": \"FORBIDDEN\",\n  \"origin\": \"DELETE /serviceregistry/service-discovery/revoke/temperature-provider2%3A%3Aalert-service%3A%3A1.0.0\"\n}\n</code></pre>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-6-revoke-system","title":"Step 6:  Revoke System","text":"<p>Maybe later we want to revoke the provider-system2 because we will not use it anymore. We can remove the system from the Local Cloud by using the revoke system operation:</p> <pre><code>curl -X 'DELETE' \\\n  'http://localhost:8443/serviceregistry/system-discovery/revoke' \\\n  -H 'accept: */*' \\\n  -H 'Authorization: Bearer SYSTEM//temperature-consumer1'\n</code></pre> <p>The Service Registry will delete our system.</p>"},{"location":"help/tutorials/serviceregistry-http-demo/#example-2-consumer","title":"Example 2: Consumer","text":"<p>In this example, we'll see how:</p> <ul> <li>a system called temperature-consumer1, </li> <li>running on the device named weather-displayer1,</li> <li>looks up for available Kelvin-info services,</li> </ul> <p>after registering itself and its device into the Local Cloud.</p>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-1-authentication_1","title":"Step 1: Authentication","text":"<p>Similar to the providers's authentication, we will use self declared authentication, and use the following authorization header:</p> <pre><code>-H 'Authorization: Bearer SYSTEM//temperature-consumer1'\n</code></pre>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-2-register-and-revoke-device","title":"Step 2: Register and Revoke Device","text":"<p>Before registrating the system, we will register our device, because it doesn't exist in the Local Cloud yet. We provide the following information about the device:</p> <ul> <li>name: weather-displayer1</li> <li>metadata: We specify here that the displayer type is digital, and it is capable to display data about temperature and wind.</li> <li>addresses: The device has a MAC address, which is 57:2a:b8:ff:c8:f1.</li> </ul> <p>The request will look like this:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/device-discovery/register' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//temperature-consumer1' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"weather-displayer1\",\n  \"metadata\": {\n    \"type\": \"digital\",\n    \"displayed-data\": \"[wind, temperature]\"\n  },\n  \"addresses\": [\n    \"57:2a:b8:ff:c8:f1\"\n  ]\n}'\n</code></pre> <p>After successful registration, we receive the following response:</p> <pre><code>{\n  \"name\": \"weather-displayer1\",\n  \"metadata\": {\n    \"type\": \"digital\",\n    \"displayed-data\": \"[wind, temperature]\"\n  },\n  \"addresses\": [\n    {\n      \"type\": \"MAC\",\n      \"address\": \"57:2a:b8:ff:c8:f1\"\n    }\n  ],\n  \"createdAt\": \"2024-11-10T15:36:53.720922100Z\",\n  \"updatedAt\": \"2024-11-10T15:36:53.720922100Z\"\n}\n</code></pre> <p>If for some reason we want to delete this device in the future, we can do this by sending the following request:</p> <pre><code>curl -X 'DELETE' \\\n  'http://localhost:8443/serviceregistry/device-discovery/revoke/weather-displayer1' \\\n  -H 'accept: */*' \\\n  -H 'Authorization: Bearer SYSTEM//temperature-consumer1'\n</code></pre> <p>Note that this operation will only be successful, if no system is connected to the device anymore. Otherwise you will get the following error message:</p> <pre><code>{\n  \"errorMessage\": \"At least one system is assigned to this device.\",\n  \"errorCode\": 423,\n  \"exceptionType\": \"LOCKED\",\n  \"origin\": \"DELETE /serviceregistry/device-discovery/revoke/weather-displayer1\"\n}\n</code></pre> <p>In this example, we will not delete the device yet, because temperature-consumer1 runs on it.</p>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-3-register-system_1","title":"Step 3: Register System","text":"<p>Now, that we registered the device, we will register the system too with the following data:</p> <ul> <li>metadata: The system uses Kelvin, Celsius and Fahrenheit scales. It is placed indoor and is located in room 14. </li> <li>version: This is the second version of this system. We can set it to 2, the Service Registry will normalize it later according to semantic versioning.</li> <li>addresses: We specify an IP address (192.168.49.1) and the hostname (tc1.greenhouse.com).</li> <li>device name: This will be weather-displayer1, which we registered earlier.</li> </ul> <p>The registation request:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/system-discovery/register' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//temperature-consumer1' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"metadata\": {\n    \"scales\": [\"Kelvin\", \"Celsius\", \"Fahrenheit\"],\n    \"location\": {\"room\": 14},\n    \"indoor\": true\n  },\n  \"version\": \"2\",\n  \"addresses\": [\n    \"192.168.49.1\",\n    \"tc1.greenhouse.com\"\n  ],\n  \"deviceName\": \"weather-displayer1\"\n}'\n</code></pre> <p>Here is the response we received:</p> <pre><code>{\n  \"name\": \"temperature-consumer1\",\n  \"metadata\": {\n    \"scales\": [\n      \"Kelvin\",\n      \"Celsius\",\n      \"Fahrenheit\"\n    ],\n    \"location\": {\n      \"room\": 14\n    },\n    \"indoor\": true\n  },\n  \"version\": \"2.0.0\",\n  \"addresses\": [\n    {\n      \"type\": \"IPV4\",\n      \"address\": \"192.168.49.1\"\n    },\n    {\n      \"type\": \"HOSTNAME\",\n      \"address\": \"tc1.greenhouse.com\"\n    }\n  ],\n  \"device\": {\n    \"name\": \"weather-displayer1\",\n    \"metadata\": {\n      \"type\": \"digital\",\n      \"displayed-data\": \"[wind, temperature]\"\n    },\n    \"addresses\": [\n      {\n        \"type\": \"MAC\",\n        \"address\": \"57:2a:b8:ff:c8:f1\"\n      }\n    ],\n    \"createdAt\": \"2024-11-10T15:36:54Z\",\n    \"updatedAt\": \"2024-11-10T15:36:54Z\"\n  },\n  \"createdAt\": \"2024-11-10T16:05:55.973663300Z\",\n  \"updatedAt\": \"2024-11-10T16:05:55.973663300Z\"\n}\n</code></pre>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-4-lookup-services","title":"Step 4: Lookup Services","text":"<p>Let's say that the temperature-consumer1 wants to consume the Kelvin info service. We have to perform a lookup operation to find out the service instances registered into the Local Cloud with the corresponding service definition name. We are looking for services, that will not expire until 31. december 2024, and the margin of error is not higher than 1 degree.</p> <p>We will use the following filters during lookup:</p> <ul> <li>Service definition names: We are looking for services named kelvin-info.</li> <li>Alives at: This should be the UTC string representation of 31. 12. 2024.</li> <li>Metadata requirements list: As specified, the margin of error sould be less than or equals to 1. However, the service might not contain this metadata, if the measured temperature is always perfectly accurate. In this case, there has to be a reliabe flag which is set to true. So we will have two metadata requitements, one is a limit for the margin of error metadata, and the other one is to check the reliable flag. </li> </ul> <p>We will set the verbose parameter to true, because we want all the possible details about the services, so we can make an optimal decision, which one to consume.</p> <p>As mentioned in example 1, the service discovery policy here is set to OPEN. If the discovery policy is RESTRICTED, we may face some restrictions.</p> <p>The request looks like this:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/service-discovery/lookup?verbose=true' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//temperature-consumer1' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"instanceIds\": [\n  ],\n  \"providerNames\": [\n  ],\n  \"serviceDefinitionNames\": [\n    \"kelvin-info\"\n  ],\n  \"versions\": [\n  ],\n  \"alivesAt\": \"2024-12-31T00:00:00Z\",\n  \"metadataRequirementsList\": [\n    {\n      \"margin-of-error\": { \"op\": \"LESS_THAN_OR_EQUALS_TO\", \"value\": 1}\n    },\n    {\n      \"reliable\": true\n    }\n  ],\n  \"interfaceTemplateNames\": [\n  ],\n  \"interfacePropertyRequirementsList\": [\n  ],\n  \"policies\": [\n  ]\n}'\n</code></pre> <p>The result contains two entities, temperature-provider2::kelvin-info::1.0.0 and temperature-provider1::kelvin-info::1.0.0:</p> <pre><code>{\n  \"entries\": [\n    {\n      \"instanceId\": \"temperature-provider2::kelvin-info::1.0.0\",\n      \"provider\": {\n        \"name\": \"temperature-provider2\",\n        \"metadata\": {\n          \"scales\": [\n            \"Kelvin\",\n            \"Celsius\"\n          ],\n          \"location\": {\n            \"side\": \"North\",\n            \"block\": 2\n          },\n          \"indoor\": true\n        },\n        \"version\": \"1.0.0\",\n        \"addresses\": [\n          {\n            \"type\": \"IPV4\",\n            \"address\": \"192.168.56.116\"\n          },\n          {\n            \"type\": \"HOSTNAME\",\n            \"address\": \"tp2.greenhouse.com\"\n          }\n        ],\n        \"device\": {\n          \"name\": \"thermometer2\",\n          \"metadata\": {\n            \"scales\": [\n              \"Kelvin\",\n              \"Celsius\"\n            ],\n            \"max-temperature\": {\n              \"Kelvin\": 310,\n              \"Celsius\": 40\n            },\n            \"min-temperature\": {\n              \"Kelvin\": 260,\n              \"Celsius\": -10\n            }\n          },\n          \"addresses\": [\n            {\n              \"type\": \"MAC\",\n              \"address\": \"81:ef:1a:44:7a:f5\"\n            }\n          ],\n          \"createdAt\": \"2024-11-04T01:53:02Z\",\n          \"updatedAt\": \"2024-11-04T01:53:02Z\"\n        },\n        \"createdAt\": \"2024-11-08T10:21:11Z\",\n        \"updatedAt\": \"2024-11-08T10:21:11Z\"\n      },\n      \"serviceDefinition\": {\n        \"name\": \"kelvin-info\",\n        \"createdAt\": \"2024-11-08T11:24:43Z\",\n        \"updatedAt\": \"2024-11-08T11:24:43Z\"\n      },\n      \"version\": \"1.0.0\",\n      \"expiresAt\": \"2030-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"margin-of-error\": 0.5\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic-http\",\n          \"protocol\": \"http\",\n          \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\n              \"192.168.56.116\",\n              \"tp2.greenhouse.com\"\n            ],\n            \"accessPort\": 8080,\n            \"operations\": {\n              \"query-temperature\": {\n                \"path\": \"/query\",\n                \"method\": \"GET\"\n              }\n            },\n            \"basePath\": \"/kelvin\"\n          }\n        }\n      ],\n      \"createdAt\": \"2024-11-10T14:24:13Z\",\n      \"updatedAt\": \"2024-11-10T22:43:19Z\"\n    },\n    {\n      \"instanceId\": \"temperature-provider1::kelvin-info::1.0.0\",\n      \"provider\": {\n        \"name\": \"temperature-provider1\",\n        \"metadata\": {\n          \"scales\": [\n            \"Kelvin\"\n          ],\n          \"location\": {\n            \"side\": \"East\",\n            \"block\": 2\n          },\n          \"indoor\": false\n        },\n        \"version\": \"1.0.0\",\n        \"addresses\": [\n          {\n            \"type\": \"IPV4\",\n            \"address\": \"192.168.56.110\"\n          },\n          {\n            \"type\": \"HOSTNAME\",\n            \"address\": \"tp1.greenhouse.com\"\n          }\n        ],\n        \"createdAt\": \"2024-11-10T16:15:23Z\",\n        \"updatedAt\": \"2024-11-10T16:15:23Z\"\n      },\n      \"serviceDefinition\": {\n        \"name\": \"kelvin-info\",\n        \"createdAt\": \"2024-11-08T11:24:43Z\",\n        \"updatedAt\": \"2024-11-08T11:24:43Z\"\n      },\n      \"version\": \"1.0.0\",\n      \"expiresAt\": \"2030-05-31T00:00:00Z\",\n      \"metadata\": {\n        \"reliable\": true\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic-http\",\n          \"protocol\": \"http\",\n          \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\n              \"192.168.56.110\",\n              \"tp1.greenhouse.com\"\n            ],\n            \"accessPort\": 8080,\n            \"operations\": {\n              \"query-temperature\": {\n                \"path\": \"/info\",\n                \"method\": \"GET\"\n              }\n            },\n            \"basePath\": \"/kelvin\"\n          }\n        }\n      ],\n      \"createdAt\": \"2024-11-10T21:08:21Z\",\n      \"updatedAt\": \"2024-11-10T22:43:19Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>Now we are free to choose, which instance of kelvin-info service to consume.</p>"},{"location":"home/contribute/","title":"Contribute","text":""},{"location":"home/contribute/#eclipse-contributor-agreement","title":"Eclipse Contributor Agreement","text":"<p>Since Arrowhead project is governed within the Eclipse Foundation, the authors of any contribution must agree and accept the Eclipse Contributor Agreement (\"ECA\").</p> <p>Technically it means that contributors need an Eclipse Fundation Account which makes possible to submit a signed ECA! GitHub Pull Requests could be accepted only when all the authors own an Eclipse Foundation Account with the signed ECA!</p>"},{"location":"home/contribute/#eca-verification","title":"ECA verification","text":"<p>The existence of the signed ECA is verified based on the authors commits. Your local Git client should hold and push the commits with the same email address like the Eclipse Foundation Account was created with. When the email address is different, than the verification process will fail and the Pull Request is not possible to merge. </p>"},{"location":"home/contribute/#configuring-git-client","title":"Configuring Git client","text":"<p>Use the command below to configure your git client globally:</p> <p><code>$ git config --global user.email anybody@example.com</code></p> <p>Whithout the <code>--global</code> flag you can set the email address only for that specific project where the command was executed.</p>"},{"location":"home/contribute/#way-of-contributing","title":"Way of contributing","text":"<p>1) Fork (and not clone) the project repository.</p> <ul> <li>Working with forks</li> </ul> <p>2) Create a new branch in your fork and from the <code>development</code> branch for your contribution.</p> <p>(Creating and pushing new branches within a cloned repository is allowed only for official Committers)</p> <p>3) Take care of coding clean!</p> <ul> <li>Clean coding in Java</li> <li>A short summary of Java coding best practices</li> </ul> <p>4) Make sure you have a working contribution</p> <ul> <li>Write unit tests</li> <li>Run several test scenario</li> </ul> <p>5) Make sure you are not using restricted third party library</p> <ul> <li>Build the project with <code>mvn clean install -P license-check -DskipTests</code>. After the project build has been finished, you will find a summary about the used libraries in the <code>\\target\\dash\\summary</code> file. Look for your newly added libraries and make sure they are not restricted. </li> </ul> <p>6) Synchronize the <code>development</code> branch in your fork and merge it into your contribution branch </p> <p>7) Rise a Pull Request from your fork to the <code>development</code> branch of the original project repository.</p> <ul> <li>Creating a pull request from a fork</li> </ul> <p>8) Wait for the review.</p> <ul> <li>Pull requests with ECA issue, merge conflict, unit test issues or running issues will be closed without review</li> </ul> <p>9) Deal with the requested fixes if any.</p> <p>10) When your Pull Request is approved, then it will be merged by a committer and will be contained by the coming release</p>"},{"location":"home/getting_started/","title":"Getting Started","text":"<p>Coming soon...</p>"},{"location":"home/implementation/","title":"Impementation","text":"<p>Coming soon...</p>"},{"location":"home/welcome/","title":"Welcome","text":"<p>This site provides all the specification, description and example what is necessary for dealing with the java-spring implementation of Eclipse Arrowhead Framework.</p> <p> eclipse-arrowhead/java-spring</p>"},{"location":"home/welcome/#what-is-it","title":"What is it?","text":"<p>The Eclipse Arrowhead Framework is addressing IoT based automation and digitalisation. The generic concept is based on the principles of Service Oriented Architectures, and aims at enabling all of its users to work in a common and unified approach \u2013 leading towards high levels of interoperability. The approach taken is that the information exchange of elements in the Internet of Things is abstracted to loosely coupled services. This is to enable IoT interoperability in-between almost any IoT elements.</p> <p>The smallest unit of governance within the Arrowhead Framework is related to a Local Cloud, which in general is a closed, local industrial network. Each Local Cloud is recommended to host the core systems within its network: creating the minimal supported functionality needed to enable collaboration and information exchange between the various systems within the Local Cloud. The four recommended core system for each Local Cloud are the Service Registry, the Service Orchestration, the Service Authorization and the Authentication.</p> <p>In addition to the recommended core systems, a number of additional, supporting core systems and services are provided to enable the design, engineering, operation and maintenance of IoT-based automation system of systems.</p>"},{"location":"home/welcome/#learn-more","title":"Learn more","text":"<p> arrowhead technology eclipse governance</p>"},{"location":"support_systems/blacklist/","title":"Blacklist","text":"<p>Coming soon.</p>"},{"location":"support_systems/blacklist/#services","title":"Services","text":"<p>Coming soon.</p>"},{"location":"support_systems/blacklist/#configuration","title":"Configuration","text":"<p>Coming soon.</p>"},{"location":"support_systems/blacklist/#changelog","title":"Changelog","text":""},{"location":"support_systems/blacklist/#v500","title":"v5.0.0","text":"<p>Related in CL-5.0.0</p> <ul> <li>general</li> <li>arrowhead-common-utils</li> <li>arrowhead-data-transfer-objects</li> <li>arrowhead-blacklist</li> </ul>"},{"location":"support_systems/configuration/","title":"Configuration","text":"<p>Coming soon...</p>"},{"location":"support_systems/qos_evaluator/","title":"QoS Evaluator","text":"<p>Coming soon...</p>"},{"location":"support_systems/translation_manager/","title":"Translation Manager","text":"<p>Coming soon...</p>"}]}