{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Redirect","text":""},{"location":"client_libraries/","title":"Client Libraries","text":"<p>Client libraries in various programming languages may be used to simplify integration and reduce boilerplate code. However, they are entirely optional \u2014 the framework exposes its full functionality through standard interfaces and protocols (such as HTTP and MQTT), and can be used independently of any client library. See the Communication Profile pages.</p>"},{"location":"client_libraries/#java","title":"Java","text":"<p>Not yet available.</p>"},{"location":"client_libraries/#python","title":"Python","text":"<p>Not yet available.</p>"},{"location":"client_libraries/#nodejs","title":"NodeJs","text":"<p>Not yet available.</p>"},{"location":"client_libraries/#golang","title":"GoLang","text":"<p>Not yet available.</p>"},{"location":"api/authentication_policy/","title":"Authentication Policy","text":"<p>During the interactions with the Arrowhead Core and Support systems, all clients are required to prove their identity by providing appropriate identity info. The authentication can be done based on the given identity info.</p> <p>Three authentication policies are offered: declared, certificate and outsourced.</p> <p>The actual policy in force is depending on how the Core and Support systems are configured. See the <code>authentication.policy</code> configuration property under the general configurations.</p>"},{"location":"api/authentication_policy/#policies","title":"Policies","text":""},{"location":"api/authentication_policy/#declared","title":"declared","text":"<p>Applying the declared authentication policy results in no real identity verification taking place. The Core and Supports systems simply accept the identity provided by the application systems. This policy is not recommended for use in production environment. </p> <p>Applicable to HTTP and MQTT interface protocols.</p>"},{"location":"api/authentication_policy/#certificate","title":"certificate","text":"<p>Applying the certificate authentication policy results in requiring client side system profile certificate being provided by the application systems. The issuer and the identity related content of the certificate are always verified during every interaction with the Arrowhead Core and Support systems.</p> <p>Applicable to HTTP and MQTT interface protocols.</p>"},{"location":"api/authentication_policy/#outsourced","title":"outsourced","text":"<p>Applying the outsourced authentication policy results in requiring the identity service being provided by a Core/Support system within the Local Cloud. This dedicated system can be the offical Authentication Core System or any third party solution that implements this service.</p> <p>The actual credentials required to be authenticated and to join the Local Cloud always depend on the actual authentication method behind the identity service, but the outcome is always an identity token (and optionally an expiration time) that the authenticated system is required to use to prove its own identity when interacting with the Arrowhead Core and Support systems. </p> <p>The interactions between the consumers and providers should never contain identity tokens in order to prevent any kind of identity theft. Identities should only be shared with the trusted Arrowhead Core and Support systems.</p> <p>Applicable to HTTP and MQTT interface protocols.</p>"},{"location":"api/authentication_policy/#usage","title":"Usage","text":""},{"location":"api/authentication_policy/#http","title":"HTTP","text":""},{"location":"api/authentication_policy/#declared-http","title":"declared-http","text":"<p>The declared identity info is the unique system name itself that must be present in the HTTP Authorization request header according to the following scheme: </p> <pre><code>Bearer SYSTEM//&lt;system-name&gt;\n</code></pre> <p>Example:</p> <pre><code>curl -X 'DELETE' \\\n  'http://localhost:8443/serviceregistry/system-discovery/revoke' \\\n  -H 'accept: */*' \\\n  -H 'Authorization: Bearer SYSTEM//TemperatureConsumer1'\n</code></pre>"},{"location":"api/authentication_policy/#certificate-http","title":"certificate-http","text":"<p>The certificate identity info is contained in the client certificate that must be attached to the HTTPS request.</p> <p>Example:</p> <pre><code>curl -X 'DELETE' \\\n  'https://localhost:8443/serviceregistry/system-discovery/revoke' \\\n  -H 'accept: */*' \\\n  --cert my-cert.p12 --cert-type P12 --pass 123456\n</code></pre>"},{"location":"api/authentication_policy/#outsourced-http","title":"outsourced-http","text":"<p>The outsourced identity info is a string token generated by a dedicated Core or Support system and obtained as a result of a successful authentication attempt. This token must be present in the HTTP Authorization request header according to the following scheme: </p> <pre><code>Bearer IDENTITY-TOKEN//&lt;token&gt;\n</code></pre> <p>Example:</p> <pre><code>curl -X 'DELETE' \\\n  'http://localhost:8443/serviceregistry/system-discovery/revoke' \\\n  -H 'accept: */*' \\\n  -H 'Authorization: Bearer IDENTITY-TOKEN//3d7b084d-1259-4a04-8789-880b7da3a530'\n</code></pre>"},{"location":"api/authentication_policy/#mqtt","title":"MQTT","text":""},{"location":"api/authentication_policy/#declared-mqtt","title":"declared-mqtt","text":"<p>The declared identity info is the unique system name itself that must be present in the authentication field of the MqttRequestTemplate according to the following scheme: </p> <pre><code>SYSTEM//&lt;system-name&gt;\n</code></pre> <p>Example:</p> <pre><code>Topic: arrowhead/serviceregistry/system-discovery/revoke\n\n{\n   \"traceId\":\"abc123\",\n   \"authentication\":\"SYSTEM//TemperatureConsumer1\",\n   \"responseTopic\":\"my/response/topic\",\n   \"qosRequirement\":2\n\n}\n</code></pre>"},{"location":"api/authentication_policy/#certificate-mqtt","title":"certificate-mqtt","text":"<p>The certificate identity info is contained by the client certificate that must be present in the authentication field of the MqttRequestTemplate where the PEM format of the certificate is expected as a Base64 encoded string.</p> <p>Example:</p> <pre><code>Topic: arrowhead/serviceregistry/system-discovery/revoke\n\n{\n   \"traceId\":\"abc123\",\n   \"authentication\":\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUgvVENDQmVXZ0...\",\n   \"responseTopic\":\"my/response/topic\",\n   \"qosRequirement\":2\n\n}\n</code></pre>"},{"location":"api/authentication_policy/#outsourced-mqtt","title":"outsourced-mqtt","text":"<p>The outsourced identity info is a string token generated by a dedicated Core or Support system and obtained as a result of a successful authentication attempt. This token must be present in the authentication field of the MqttRequestTemplate according to the following scheme:</p> <pre><code>IDENTITY-TOKEN//&lt;token&gt;\n</code></pre> <p>Example:</p> <pre><code>Topic: arrowhead/serviceregistry/system-discovery/revoke\n\n{\n   \"traceId\":\"abc123\",\n   \"authentication\":\"IDENTITY-TOKEN//3d7b084d-1259-4a04-8789-880b7da3a530\",\n   \"responseTopic\":\"my/response/topic\",\n   \"qosRequirement\":2\n\n}\n</code></pre>"},{"location":"api/primitives/","title":"Primitives","text":""},{"location":"api/primitives/#accesstoken","title":"AccessToken","text":"<p>A unique String of characters that is issued for a beneficiary system and is associated with a target, a target system, a scope and is expiring.</p>"},{"location":"api/primitives/#accesstokenvariant","title":"AccessTokenVariant","text":"<p>String value that specifies an exact token technology variant. The possible values are <code>TIME_LIMITED_TOKEN_AUTH</code>, <code>USAGE_LIMITED_TOKEN_AUTH</code>, <code>BASE64_SELF_CONTAINED_TOKEN_AUTH</code>, <code>RSA_SHA256_JSON_WEB_TOKEN_AUTH</code>, <code>RSA_SHA512_JSON_WEB_TOKEN_AUTH</code>.</p>"},{"location":"api/primitives/#address","title":"Address","text":"<p>A String representation of a network address. An address can be a version 4 IP address, a version 6 IP address, DNS name or MAC address.</p>"},{"location":"api/primitives/#addresstype","title":"AddressType","text":"<p>String value of a network address type. Could be only <code>HOSTNAME</code>, <code>IPV4</code>, <code>IPV6</code> or <code>MAC</code>.</p>"},{"location":"api/primitives/#authenticationmethod","title":"AuthenticationMethod","text":"<p>A String representation of an authentication method. Currently, only <code>PASSWORD</code> is supported.`</p>"},{"location":"api/primitives/#authorizationlevel","title":"AuthorizationLevel","text":"<p>A String representation of an authorization policy's priority level. Can only be <code>PR</code> (for policies that were created by their own providers), or <code>MGMT</code> (for policies that were created by a higher entity).</p>"},{"location":"api/primitives/#authorizationpolicyinstanceid","title":"AuthorizationPolicyInstanceID","text":"<p>A composite String identifier that is intended to be both human and machine-readable. It consists of the instance\u2019s level (<code>PR</code> for provider and <code>MGMT</code> for management), cloud identifier (or the word <code>LOCAL</code> in case of the Local Cloud), provider name, target type and target, each separated by a pipe as follows: <code>&lt;Level&gt;|&lt;CloudIdentifier&gt;|&lt;ProviderName&gt;|&lt;TargetType&gt;&lt;Target&gt;</code>. Each part must follow its related naming convention. An example for a valid policy instance ID: PR|LOCAL|TemperatureProvider|SERVICE_DEF|celsiusInfo. </p>"},{"location":"api/primitives/#authorizationpolicytype","title":"AuthorizationPolicyType","text":"<p>A String representation of the type of the authorization policy. Can only be <code>ALL</code> (everybody can use the target in the appropriate cloud), <code>WHITELIST</code> (whitelist-based policy), <code>BLACKLIST</code> (blacklist-based policy) or <code>SYS_METADATA</code> (system-level metadata-based policy).</p>"},{"location":"api/primitives/#authorizationtargettype","title":"AuthorizationTargetType","text":"<p>A String representation of the type of target in authorization policies. Can only be <code>SERVICE_DEF</code> (for service definitions) or <code>EVENT_TYPE</code> (for event types).</p>"},{"location":"api/primitives/#blacklistreason","title":"BlacklistReason","text":"<p>A chain of UTF-8 characters with a maximum length of 1024.</p>"},{"location":"api/primitives/#boolean","title":"Boolean","text":"<p>A boolean value, one out of <code>true</code> or <code>false</code>.</p>"},{"location":"api/primitives/#cloudidentifier","title":"CloudIdentifier","text":"<p>A String identifier of a Local Cloud. It consists of the cloud name and the organization name separated by a pipe, as follows: <code>&lt;CloudName&gt;|&lt;OrganizationName&gt;</code>. An example for a valid cloud identifier: TestCloud|AitiaInc. (Here the cloud name is TestCloud and the organization name is AitiaInc.) In certain cases, the word <code>LOCAL</code> is also considered valid and it references the Local Cloud.</p>"},{"location":"api/primitives/#datetime","title":"DateTime","text":"<p>A String value that pinpoints a moment in time in the format of ISO8601 standard <code>yyyy-mm-ddThh:MM:ssZ</code>, where \u201dyyyy\u201d denotes year (4 digits), \u201dmm\u201d denotes month starting from 01, \u201ddd\u201d denotes day starting from 01, \u201dT\u201d is the separator between date and time part, \u201dhh\u201d denotes hour in the 24-hour format (00-23), \u201dMM\u201d denotes minute (00-59), \u201dss\u201d denotes second (00-59). \u201dZ\u201d indicates that the time is in UTC. An example of a valid date/time string is \u201d2024-12-05T12:00:00Z\u201d</p>"},{"location":"api/primitives/#devicename","title":"DeviceName","text":"<p>A String identifier that is intended to be both human and machine-readable. The allowed characters are uppercase letters (English alphabet only), numbers and underscore (_). A name has to start with a letter, cannot end with an underscore and must follow the UPPER_SNAKE_CASE naming convention. The identifier maximum length is 63 characters.</p>"},{"location":"api/primitives/#direction","title":"Direction","text":"<p>The direction of a sorting operation. Possible values are the String representation of ascending (<code>ASC</code>) or descending (<code>DESC</code>) order.</p>"},{"location":"api/primitives/#encryptionalgorithmname","title":"EncryptionAlgorithmName","text":"<p>A String identifier that belongs to an encryption algorithm. Possible values are: * <code>AES/ECB/PKCS5Padding</code>: encryption without any addition to the encryption key. * <code>AES/CBC/PKCS5Padding</code>: encryption with a generated initialization vector as an addition to the encryption key.</p>"},{"location":"api/primitives/#errortype","title":"ErrorType","text":"<p>String value of the error type. Could be <code>ARROWHEAD</code>, <code>INVALID_PARAMETER</code>, <code>AUTH</code>, <code>FORBIDDEN</code>, <code>DATA_NOT_FOUND</code>, <code>TIMEOUT</code>, <code>LOCKED</code>, <code>INTERNAL_SERVER_ERROR</code> or <code>EXTERNAL_SERVER_ERROR</code>.</p>"},{"location":"api/primitives/#eventtypename","title":"EventTypeName","text":"<p>A String identifier that is intended to be both human and machine-readable. The allowed characters are letters (english alphabet only) and numbers. A name has to start with a letter and must follow the camelCase naming convention. The identifier maximum length is 63 characters.</p>"},{"location":"api/primitives/#identitytoken","title":"IdentityToken","text":"<p>A unique and expiring String data issued by a central component to verify a system's identity during the interactions with the trusted Core and Support systems, allowing access without sharing the credentials with each and every Core/Support system at each and every interaction.  </p>"},{"location":"api/primitives/#interfacename","title":"InterfaceName","text":"<p>A String identifier that is intended to be both human and machine-readable. The allowed characters are letters (English alphabet only), numbers and underscore (_). A name has to start with a letter and must follow the snake_case naming convention. The identifier maximum length is 63 characters.</p>"},{"location":"api/primitives/#keyvaluepair","title":"KeyValuePair","text":"<p>Association of a key of type String and a value of any type. It is represented as a Map&lt;String, Object&gt; Some examples:</p> <pre><code>{\n    \"verbose\": true,\n    \"name\": \"TemperatureProvider1\",\n    \"size\": 500\n}\n</code></pre>"},{"location":"api/primitives/#logseverity","title":"LogSeverity","text":"<p>Alias for a String value that describes the kind and seriousness of a log message. Could be <code>ALL</code>, <code>TRACE</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, <code>ERROR</code> or <code>FATAL</code>.</p>"},{"location":"api/primitives/#mode","title":"Mode","text":"<p>Specifies whether the queried records should have the active flag set. The possible values are: <code>ALL</code>, <code>ACTIVES</code>, <code>INACTIVES</code>.</p>"},{"location":"api/primitives/#mqttqos","title":"MQTTQoS","text":"<p>QoS in MQTT refers to the level of guarantee for message delivery between the publisher and the subscriber. It is represented as an Integer. It can be <code>0</code>, <code>1</code> or <code>2</code> (learn more).</p>"},{"location":"api/primitives/#number","title":"Number","text":"<p>Decimal number, it is represented as int/Integer or long/Long depending on the range of possible values.</p>"},{"location":"api/primitives/#propertyvalidator","title":"PropertyValidator","text":"<p>A String identifier of any suitable validator function chosen by the implementor of service. The validators have different kinds of inputs, depending on what to validate. Some validators have optional or mandatory String arguments. The implemented validators are the following:</p> <ul> <li><code>NOT_EMPTY_ADDRESS_LIST</code>: The input is a list of Addresses and must contain at least one element. The validator checks if the addresses are valid and in alignment with the supported address types and performs normalization. An example for usage: validating HTTP interface access addresses.</li> <li><code>NOT_EMPTY_STRING_SET</code>: The input is a list of Strings and must contain at least one element. The validator checks if the are not empty and performs normalization. It can be used with the optional <code>OPERATION</code> argument. In that case, normalization and validation happens according to the naming convention. An example for usage: validating possible MQTT interface operations.</li> <li><code>PORT</code>: This validator is meant to be used for ports. The input is an integer that represents a port number. The validator checks if the given value is between 1 and 65535, since in practice all valid port numbers fall within this range.</li> <li><code>MINMAX</code>: The input is a Number. It is mandatory to give two Strings as arguments, that represent the lower and upper limits of a closed interval. The validator checks if the input falls within the interval. (The <code>PORT</code> validator is a specific <code>MINMAX</code> validator, where the arguments are \"1\" and \"65535\".)</li> <li><code>HTTP_OPERATIONS</code>: This validator is meant to be used for HTTP operations. The input is one or more key-value pair where the keys are Strings and the values are also key-value pairs, where the keys are path and method. A concrete example:     <code>\"query-temperature\": {                 \"path\": \"/query\",                 \"method\": \"GET\"             },             \"set-temperature\": {                 \"path\": \"/set\",                 \"method\": \"PUT\"             }</code>     The validation and normalization happens according to the HTTP standards.</li> </ul>"},{"location":"api/primitives/#protocol","title":"Protocol","text":"<p>A String representation of a communication protocol. Examples: http, https, tcp, ssl...</p>"},{"location":"api/primitives/#publickey","title":"PublicKey","text":"<p>A Base64 String representation of the public byte array cryptographic key retrieved from an X.509 certificate.</p>"},{"location":"api/primitives/#securitypolicy","title":"SecurityPolicy","text":"<p>A String representation of security policies. The possible values are: <code>NONE</code>, <code>CERT_AUTH</code>, <code>TIME_LIMITED_TOKEN_AUTH</code>, <code>USAGE_LIMITED_TOKEN_AUTH</code>, <code>BASE64_SELF_CONTAINED_TOKEN_AUTH</code>, <code>RSA_SHA256_JSON_WEB_TOKEN_AUTH</code>, <code>RSA_SHA512_JSON_WEB_TOKEN_AUTH</code>.</p>"},{"location":"api/primitives/#serviceinstanceid","title":"ServiceInstanceID","text":"<p>A String identifier of a service instance. It consists of the instance's provider name, service definition and version, each separated by pipe, as follows: <code>&lt;provider-name&gt;|&lt;service-definition&gt;|&lt;version&gt;</code>. An example for a valid service instance ID: AlertProvider1|alertService1|1.0.0. (Here the provider name is AlertProvider1, the service definition is alertService1, and the version is 1.0.0.)</p>"},{"location":"api/primitives/#servicename","title":"ServiceName","text":"<p>A String identifier that is intended to be both human and machine-readable. The allowed characters are letters (English alphabet only) and numbers. A name has to start with a letter and must follow the camelCase naming convention. The identifier maximum length is 63 characters.</p>"},{"location":"api/primitives/#serviceoperationname","title":"ServiceOperationName","text":"<p>A String identifier that is intended to be both human and machine-readable. The allowed characters are letters (English alphabet only) and numbers and dash (<code>-</code>). A name has to start with a letter, cannot end with dash and must follow the kebab-case naming convention. The identifier maximum length is 63 characters.</p>"},{"location":"api/primitives/#serviceorchestrationjobstatus","title":"ServiceOrchestrationJobStatus","text":"<p>Alias for a String value that describes the actual state of a job. Can be: <code>PENDING</code>, <code>IN_PROGRESS</code>, <code>DONE</code>, <code>ERROR</code>.</p>"},{"location":"api/primitives/#serviceorchestrationtype","title":"ServiceOrchestrationType","text":"<p>Alias for a String value that can be only <code>PULL</code> or <code>PUSH</code>.</p>"},{"location":"api/primitives/#string","title":"String","text":"<p>A chain of UTF-8 characters.</p>"},{"location":"api/primitives/#systemname","title":"SystemName","text":"<p>A String identifier that is intended to be both human and machine-readable. The allowed characters are letters (English alphabet only) and numbers. A name has to start with a letter and must follow the PascalCase naming convention. The identifier maximum length is 63 characters.</p>"},{"location":"api/primitives/#tokentype","title":"TokenType","text":"<p>A String name that groups token technologies by usage characteristics. Can be <code>USAGE_LIMITED_TOKEN</code>, <code>TIME_LIMITED_TOKEN</code> or <code>SELF_CONTAINED_TOKEN</code>.</p>"},{"location":"api/primitives/#uuid","title":"UUID","text":"<p>A UUID (Universally Unique Identifier) is a 128-bit String identifier used to uniquely distinguish objects in distributed systems (e.g.: <code>550e8400-e29b-41d4-a716-446655440000</code>)</p>"},{"location":"api/primitives/#version","title":"Version","text":"<p>A String value that specifies a system or service instance version. Version must follow the Semantic Versioning, which means, it consists of three numbers separated by dots. These numbers represent the <code>MAJOR</code>, <code>MINOR</code> and <code>PATCH</code> version. An example: 5.0.0</p>"},{"location":"api/authentication/identity-generic-http/","title":"identity IDD","text":"<p>generic_http &amp; generic_https</p>"},{"location":"api/authentication/identity-generic-http/#overview","title":"Overview","text":"<p>This page describes the generic_http and generic_https service interface of identity which enables both application and Core/Support systems to get and release a proof of identity token which also can be verified. Furthermore, it also allows a system to change its own credentials. </p> <p>Hereby the Interface Design Description (IDD) is provided to the identity \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/authentication/identity-generic-http/#interface-description","title":"Interface Description","text":""},{"location":"api/authentication/identity-generic-http/#login","title":"login","text":"<p>The service operation request requires an IdentityRequest JSON encoded body.</p> <pre><code>POST /authentication/identity/login HTTP/1.1\n\n{\n  \"systemName\": \"Consumer1\",\n  \"credentials\": {\n    \"password\": \"abcdef\"\n  }\n}\n\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response also contains an IdentityLoginResponse JSON encoded body.</p> <pre><code>{\n  \"token\": \"713bca0b-c550-4cb9-ae60-4852b9ee3669\",\n  \"expirationTime\": \"2025-03-07T11:59:01.178225900Z\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>500</code> if an unexpected error happens. If the Authentication system needs contacting an external server during the login process, error code <code>503</code> can also be used if there was a problem with the external server. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Invalid name and/or credentials\",\n  \"errorCode\": 401,\n  \"exceptionType\": \"AUTH\",\n  \"origin\": \"POST /authentication/identity/login\"\n}\n</code></pre>"},{"location":"api/authentication/identity-generic-http/#logout","title":"logout","text":"<p>The service operation request requires an IdentityRequest JSON encoded body.</p> <pre><code>POST /authentication/identity/logout HTTP/1.1\n\n{\n  \"systemName\": \"Consumer1\",\n  \"credentials\": {\n    \"password\": \"abcdef\"\n  }\n}\n\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response does not contain any response body.</p> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>500</code> if an unexpected error happens. If the Authentication system needs contacting an external server during the logout process, error code <code>503</code> can also be used if there was a problem with the external server. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Invalid name and/or credentials\",\n  \"errorCode\": 401,\n  \"exceptionType\": \"AUTH\",\n  \"origin\": \"POST /authentication/identity/logout\"\n}\n</code></pre>"},{"location":"api/authentication/identity-generic-http/#change","title":"change","text":"<p>The service operation request requires an IdentityChangeRequest JSON encoded body.</p> <pre><code>POST /authentication/identity/change HTTP/1.1\n\n{\n  \"systemName\": \"Consumer1\",\n  \"credentials\": {\n    \"password\": \"abcdef\"\n  },\n  \"newCredentials\": {\n    \"password\": \"123456\"\n  }\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response does not contain any response body.</p> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>500</code> if an unexpected error happens. If the Authentication system needs contacting an external server during the credential change process, error code <code>503</code> can also be used if there was a problem with the external server. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Missing credentials\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /authentication/identity/change\"\n}\n</code></pre>"},{"location":"api/authentication/identity-generic-http/#verify","title":"verify","text":"<p>The service operation request requires an outsourced identity related header and the IdentityToken that has to be verified as a path parameter.</p> <pre><code>GET /authentication/identity/verify/713bca0b-c550-4cb9-ae60-4852b9ee3669 HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response also contains an IdentityVerifyResponse JSON encoded body.</p> <pre><code>{\n  \"verified\": true,\n  \"systemName\": \"Consumer1\",\n  \"sysop\": false,\n  \"loginTime\": \"2025-03-07T11:54:01Z\",\n  \"expirationTime\": \"2025-03-07T12:54:01Z\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"No authorization header has been provided\",\n  \"errorCode\": 401,\n  \"exceptionType\": \"AUTH\"\n}\n</code></pre>"},{"location":"api/authentication/identity-generic-mqtt/","title":"identity IDD","text":"<p>generic_mqtt &amp; generic_mqtts</p>"},{"location":"api/authentication/identity-generic-mqtt/#overview","title":"Overview","text":"<p>This page describes the generic_mqtt and generic_mqtts service interface of identity which enables both application and Core/Support systems to get and release a proof of identity token which also can be verified. Furthermore, it also allows a system to change its own credentials.</p> <p>Hereby the Interface Design Description (IDD) is provided to the identity \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/authentication/identity-generic-mqtt/#interface-description","title":"Interface Description","text":""},{"location":"api/authentication/identity-generic-mqtt/#login","title":"login","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the payload is an IdentityRequest.</p> <pre><code>Topic: arrowhead/authentication/identity/identity-login\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": \"&lt;0|1|2&gt;\",\n  \"payload\": {\n    \"systemName\": \"Consumer1\",\n    \"credentials\": {\n      \"password\": \"abcdef\"\n    }\n  }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is an IdentityLoginResponse.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"token\": \"713bca0b-c550-4cb9-ae60-4852b9ee3669\",\n    \"expirationTime\": \"2025-03-07T11:59:01.178225900Z\"\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>500</code> if an unexpected error happens. If the Authentication System needs contacting an external server during the login process, error code <code>503</code> can also be used if there was a problem with the external server.  In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 401,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"Invalid name and/or credentials\",\n    \"errorCode\": 401,\n    \"exceptionType\": \"AUTH\",\n    \"origin\": \"arrowhead/authentication/identity/identity-login\"\n  }\n}\n</code></pre>"},{"location":"api/authentication/identity-generic-mqtt/#logout","title":"logout","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the payload is an IdentityRequest.</p> <pre><code>Topic: arrowhead/authentication/identity/identity-logout\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": \"&lt;0|1|2&gt;\",\n  \"payload\": {\n    \"systemName\": \"Consumer1\",\n    \"credentials\": {\n      \"password\": \"abcdef\"\n    }\n  }\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response template payload is empty.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": \"\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>500</code> if an unexpected error happens. If the Authentication system needs contacting an external server during the logout process, error code <code>503</code> can also be used if there was a problem with the external server.  In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 401,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"Invalid name and/or credentials\",\n    \"errorCode\": 401,\n    \"exceptionType\": \"AUTH\",\n    \"origin\": \"arrowhead/authentication/identity/identity-logout\"\n  }\n}\n</code></pre>"},{"location":"api/authentication/identity-generic-mqtt/#change","title":"change","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the payload is an IdentityChangeRequest.</p> <pre><code>Topic: arrowhead/authentication/identity/identity-change-credentials\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": \"&lt;0|1|2&gt;\",\n  \"payload\": {\n    \"systemName\": \"Consumer1\",\n    \"credentials\": {\n      \"password\": \"abcdef\"\n    },\n    \"newCredentials\": {\n      \"password\": \"123456\"\n    }\n  }\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response template payload is empty.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": \"\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>500</code> if an unexpected error happens. If the Authentication System needs contacting an external server during the credential change process, error code <code>503</code> can also be used if there was a problem with the external server. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"Missing credentials\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"arrowhead/authentication/identity/identity-change-credentials\"\n  }\n}\n</code></pre>"},{"location":"api/authentication/identity-generic-mqtt/#verify","title":"verify","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper outsourced identity info and the payload is the IdentityToken (as a string) that has to be verified.</p> <pre><code>Topic: arrowhead/authentication/identity/identity-verify\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": \"&lt;0|1|2&gt;\",\n  \"payload\": \"713bca0b-c550-4cb9-ae60-4852b9ee3669\"\n}\n\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response template payload is an IdentityVerifyResponse.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"verified\": true,\n    \"systemName\": \"Consumer1\",\n    \"sysop\": false,\n    \"loginTime\": \"2025-03-07T11:54:01Z\",\n    \"expirationTime\": \"2025-03-07T12:54:01Z\"\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"Missing identity token\",\n    \"errorCode\": 401,\n    \"exceptionType\": \"AUTH\"\n  }\n}\n</code></pre>"},{"location":"api/authentication/identity-management-generic-http/","title":"identityManagement IDD","text":"<p>generic_http &amp; generic_https</p>"},{"location":"api/authentication/identity-management-generic-http/#overview","title":"Overview","text":"<p>This page describes the generic_http and generic_https service interface of identity-management which enables systems (with operator role or proper permissions) to handle identities (create, update, remove, query) and active sessions (close, query) in bulk.</p> <p>Hereby the Interface Design Description (IDD) is provided to the identityManagement \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/authentication/identity-management-generic-http/#interface-description","title":"Interface Description","text":""},{"location":"api/authentication/identity-management-generic-http/#identity-mgmt-query","title":"identity-mgmt-query","text":"<p>The service operation request requires an outsourced identity related header and an IdentityQueryRequest JSON encoded body.</p> <pre><code>POST /authentication/mgmt/identities/query HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n  \"pagination\": {\n    \"page\": 0,\n    \"size\": 10,\n    \"direction\": \"ASC\",\n    \"sortField\": \"name\"\n  },\n  \"createdBy\": \"Sysop\",\n  \"creationFrom\": \"2025-03-07T06:00:00Z\"\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response also contains an IdentityListResponse JSON encoded body.</p> <pre><code>{\n  \"identities\": [\n    {\n      \"systemName\": \"Consumer1\",\n      \"authenticationMethod\": \"PASSWORD\",\n      \"sysop\": false,\n      \"createdBy\": \"Sysop\",\n      \"createdAt\": \"2025-03-07T12:52:30Z\",\n      \"updatedBy\": \"Sysop\",\n      \"updatedAt\": \"2025-03-07T12:52:30Z\"\n    },\n    {\n      \"systemName\": \"Provider1\",\n      \"authenticationMethod\": \"PASSWORD\",\n      \"sysop\": false,\n      \"createdBy\": \"Sysop\",\n      \"createdAt\": \"2025-03-07T12:52:30Z\",\n      \"updatedBy\": \"Sysop\",\n      \"updatedAt\": \"2025-03-07T12:52:30Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"If size parameter is defined then page parameter cannot be undefined\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /authentication/mgmt/identities/query\"\n}\n</code></pre>"},{"location":"api/authentication/identity-management-generic-http/#identity-mgmt-create","title":"identity-mgmt-create","text":"<p>The service operation request requires an outsourced identity related header and an IdentityListCreateRequest JSON encoded body.</p> <pre><code>POST /authentication/mgmt/identities HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n  \"authenticationMethod\": \"PASSWORD\",\n  \"identities\": [\n    {\n      \"systemName\": \"Consumer1\",\n      \"credentials\": {\n        \"password\": \"abcdef\"\n      },\n      \"sysop\": false\n    },\n    {\n      \"systemName\": \"Provider1\",\n      \"credentials\": {\n        \"password\": \"123456\"\n      },\n      \"sysop\": false\n    }\n  ]\n}\n\n</code></pre> <p>The service operation responds with the status code <code>201</code> if called successfully. The response also contains an IdentityListResponse JSON encoded body.</p> <pre><code>{\n  \"identities\": [\n    {\n      \"systemName\": \"Consumer1\",\n      \"authenticationMethod\": \"PASSWORD\",\n      \"sysop\": false,\n      \"createdBy\": \"Sysop\",\n      \"createdAt\": \"2025-03-07T12:52:30Z\",\n      \"updatedBy\": \"Sysop\",\n      \"updatedAt\": \"2025-03-07T12:52:30Z\"\n    },\n    {\n      \"systemName\": \"Provider1\",\n      \"authenticationMethod\": \"PASSWORD\",\n      \"sysop\": false,\n      \"createdBy\": \"Sysop\",\n      \"createdAt\": \"2025-03-07T12:52:30Z\",\n      \"updatedBy\": \"Sysop\",\n      \"updatedAt\": \"2025-03-07T12:52:30Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. If the Authentication System needs contacting an external server during the creation process, error code <code>503</code> can also be used if there was a problem with the external server. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Missing credentials\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /authentication/mgmt/identities\"\n}\n</code></pre>"},{"location":"api/authentication/identity-management-generic-http/#identity-mgmt-update","title":"identity-mgmt-update","text":"<p>The service operation request requires an outsourced identity related header and an IdentityListUpdateRequest JSON encoded body.</p> <pre><code>PUT /authentication/mgmt/identities HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n  \"identities\": [\n    {\n      \"systemName\": \"Consumer1\",\n      \"credentials\": {\n        \"password\": \"123456\"\n      },\n      \"sysop\": false\n    },\n    {\n      \"systemName\": \"Provider1\",\n      \"credentials\": {\n        \"password\": \"123456\"\n      },\n      \"sysop\": true\n    }\n  ]\n}\n\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response also contains an IdentityListResponse JSON encoded body.</p> <pre><code>{\n  \"identities\": [\n    {\n      \"systemName\": \"Consumer1\",\n      \"authenticationMethod\": \"PASSWORD\",\n      \"sysop\": false,\n      \"createdBy\": \"Sysop\",\n      \"createdAt\": \"2025-03-07T12:52:30\",\n      \"updatedBy\": \"Sysop\",\n      \"updatedAt\": \"2025-03-07T12:59:01\"\n    },\n    {\n      \"systemName\": \"Provider1\",\n      \"authenticationMethod\": \"PASSWORD\",\n      \"sysop\": true,\n      \"createdBy\": \"Sysop\",\n      \"createdAt\": \"2025-03-07T12:52:30Z\",\n      \"updatedBy\": \"Sysop\",\n      \"updatedAt\": \"2025-03-07T12:59:01Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. If the Authentication System needs contacting an external server during the update process, error code <code>503</code> can also be used if there was a problem with the external server. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Missing credentials\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"PUT /authentication/mgmt/identities\"\n}\n</code></pre>"},{"location":"api/authentication/identity-management-generic-http/#identity-mgmt-remove","title":"identity-mgmt-remove","text":"<p>The service operation request requires an outsourced identity related header and a List&lt;SystemName&gt; as query parameter, which contains the names of systems that needs to be removed.</p> <pre><code>DELETE /authentication/mgmt/identities?names=Provider1&amp;names=Provider2 HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The success response does not contain any response body.</p> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. If the Authentication System needs contacting an external server during the deletion process, error code <code>503</code> can also be used if there was a problem with the external server. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Invalid identity token\",\n  \"errorCode\": 401,\n  \"exceptionType\": \"AUTH\"\n}\n</code></pre>"},{"location":"api/authentication/identity-management-generic-http/#identity-mgmt-session-query","title":"identity-mgmt-session-query","text":"<p>The service operation request requires an outsourced identity related header and an IdentitySessionQueryRequest JSON encoded body.</p> <pre><code>POST /authentication/mgmt/sessions HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n  \"pagination\": {\n    \"page\": 0,\n    \"size\": 10,\n    \"direction\": \"ASC\",\n    \"sortField\": \"name\"\n  },\n  \"loginFrom\": \"2025-03-07T10:00:00Z\"\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response also contains an IdentitySessionListResponse JSON encoded body.</p> <pre><code>{\n  \"sessions\": [\n    {\n      \"systemName\": \"Consumer1\",\n      \"loginTime\": \"2025-03-07T11:54:01Z\",\n      \"expirationTime\": \"2025-03-08T11:59:01Z\"\n    },\n    {\n      \"systemName\": \"Sysop\",\n      \"loginTime\": \"2025-03-07T12:40:54Z\",\n      \"expirationTime\": \"2025-03-08T12:45:54Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"If size parameter is defined then page parameter cannot be undefined\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /authentication/mgmt/sessions\"\n}\n</code></pre>"},{"location":"api/authentication/identity-management-generic-http/#identity-mgmt-session-close","title":"identity-mgmt-session-close","text":"<p>The service operation request requires an outsourced identity related header and a List&lt;SystemName&gt; as query parameter, which contains the names of systems whose sessions needs to be closed.</p> <pre><code>DELETE /authentication/mgmt/sessions?names=Consumer1 HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The success response does not contain any response body.</p> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Invalid identity token\",\n  \"errorCode\": 401,\n  \"exceptionType\": \"AUTH\"\n}\n</code></pre>"},{"location":"api/authentication/identity-management-generic-mqtt/","title":"identityManagement IDD","text":"<p>generic_mgtt &amp; generic_mqtts</p>"},{"location":"api/authentication/identity-management-generic-mqtt/#overview","title":"Overview","text":"<p>This page describes the generic_mqtt and generic_mqtts service interface of identity-management which enables systems (with operator role or proper permissions) to handle identities (create, update, remove, query) and active sessions (close, query) in bulk.</p> <p>Hereby the Interface Design Description (IDD) is provided to the identityManagement \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/authentication/identity-management-generic-mqtt/#interface-description","title":"Interface Description","text":""},{"location":"api/authentication/identity-management-generic-mqtt/#identity-mgmt-query","title":"identity-mgmt-query","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper outsourced identity info and the payload is an an IdentityQueryRequest.</p> <pre><code>Topic: arrowhead/authentication/identity/management/identity-mgmt-query\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": \"&lt;0|1|2&gt;\",\n  \"payload\": {\n    \"pagination\": {\n      \"page\": 0,\n      \"size\": 10,\n      \"direction\": \"ASC\",\n      \"sortField\": \"name\"\n    },\n    \"createdBy\": \"Sysop\",\n    \"creationFrom\": \"2025-03-07T06:00:00Z\"\n  }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is an IdentityListResponse.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"identities\": [\n      {\n        \"systemName\": \"Consumer1\",\n        \"authenticationMethod\": \"PASSWORD\",\n        \"sysop\": false,\n        \"createdBy\": \"Sysop\",\n        \"createdAt\": \"2025-03-07T12:52:30Z\",\n        \"updatedBy\": \"Sysop\",\n        \"updatedAt\": \"2025-03-07T12:52:30Z\"\n      },\n      {\n        \"systemName\": \"Provider1\",\n        \"authenticationMethod\": \"PASSWORD\",\n        \"sysop\": false,\n        \"createdBy\": \"Sysop\",\n        \"createdAt\": \"2025-03-07T12:52:30Z\",\n        \"updatedBy\": \"Sysop\",\n        \"updatedAt\": \"2025-03-07T12:52:30Z\"\n      }\n    ],\n    \"count\": 2\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"If size parameter is defined then page parameter cannot be undefined\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"arrowhead/authentication/identity/management/identity-mgmt-query\"\n  }\n}\n</code></pre>"},{"location":"api/authentication/identity-management-generic-mqtt/#identity-mgmt-create","title":"identity-mgmt-create","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper outsourced identity info and the payload is an IdentityListCreateRequest.</p> <pre><code>Topic: arrowhead/authentication/identity/management/identity-mgmt-create\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": \"&lt;0|1|2&gt;\",\n  \"payload\": {\n    \"authenticationMethod\": \"PASSWORD\",\n    \"identities\": [\n      {\n        \"systemName\": \"Consumer1\",\n        \"credentials\": {\n          \"password\": \"abcdef\"\n        },\n        \"sysop\": false\n      },\n      {\n        \"systemName\": \"Provider1\",\n        \"credentials\": {\n          \"password\": \"123456\"\n        },\n        \"sysop\": false\n      }\n    ]\n  }\n}\n\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>201</code> if called successfully. The response template payload is an IdentityListResponse.</p> <pre><code>{\n  \"status\": 201,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"identities\": [\n      {\n        \"systemName\": \"Consumer1\",\n        \"authenticationMethod\": \"PASSWORD\",\n        \"sysop\": false,\n        \"createdBy\": \"Sysop\",\n        \"createdAt\": \"2025-03-07T12:52:30Z\",\n        \"updatedBy\": \"Sysop\",\n        \"updatedAt\": \"2025-03-07T12:52:30Z\"\n      },\n      {\n        \"systemName\": \"Provider1\",\n        \"authenticationMethod\": \"PASSWORD\",\n        \"sysop\": false,\n        \"createdBy\": \"Sysop\",\n        \"createdAt\": \"2025-03-07T12:52:30Z\",\n        \"updatedBy\": \"Sysop\",\n        \"updatedAt\": \"2025-03-07T12:52:30Z\"\n      }\n    ],\n    \"count\": 2\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. If the Authentication System needs contacting an external server during the creation process, error code <code>503</code> can also be used if there was a problem with the external server. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"Missing credentials\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"arrowhead/authentication/identity/management/identity-mgmt-create\"\n  }\n}\n</code></pre>"},{"location":"api/authentication/identity-management-generic-mqtt/#identity-mgmt-update","title":"identity-mgmt-update","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper outsourced identity info and the payload is an IdentityListUpdateRequest.</p> <pre><code>Topic: arrowhead/authentication/identity/management/identity-mgmt-update\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": \"&lt;0|1|2&gt;\",\n  \"payload\": {\n    \"identities\": [\n      {\n        \"systemName\": \"Consumer1\",\n        \"credentials\": {\n          \"password\": \"123456\"\n        },\n        \"sysop\": false\n      },\n      {\n        \"systemName\": \"Provider1\",\n        \"credentials\": {\n          \"password\": \"123456\"\n        },\n        \"sysop\": true\n      }\n    ]\n  }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is an IdentityListResponse.</p> <pre><code>{\n  \"status\": 201,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"identities\": [\n      {\n        \"systemName\": \"Consumer1\",\n        \"authenticationMethod\": \"PASSWORD\",\n        \"sysop\": false,\n        \"createdBy\": \"Sysop\",\n        \"createdAt\": \"2025-03-07T12:52:30\",\n        \"updatedBy\": \"Sysop\",\n        \"updatedAt\": \"2025-03-07T12:59:01\"\n      },\n      {\n        \"systemName\": \"Provider1\",\n        \"authenticationMethod\": \"PASSWORD\",\n        \"sysop\": true,\n        \"createdBy\": \"Sysop\",\n        \"createdAt\": \"2025-03-07T12:52:30Z\",\n        \"updatedBy\": \"Sysop\",\n        \"updatedAt\": \"2025-03-07T12:59:01Z\"\n      }\n    ],\n    \"count\": 2\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. If the Authentication System needs contacting an external server during the update process, error code <code>503</code> can also be used if there was a problem with the external server. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"Missing credentials\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"arrowhead/authentication/identity/management/identity-mgmt-update\"\n  }\n}\n</code></pre>"},{"location":"api/authentication/identity-management-generic-mqtt/#identity-mgmt-remove","title":"identity-mgmt-remove","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper outsourced identity info and the payload is a List&lt;SystemName&gt;, which contains the names of systems that need to be removed.</p> <pre><code>Topic: arrowhead/authentication/identity/management/identity-mgmt-remove\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": \"&lt;0|1|2&gt;\",\n  \"payload\": [ \"Provider1\", \"Provider2\" ]\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response template payload is empty.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": \"\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. If the Authentication System needs contacting an external server during the deletion process, error code <code>503</code> can also be used if there was a problem with the external server. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 401,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"Invalid identity token\",\n    \"errorCode\": 401,\n    \"exceptionType\": \"AUTH\"\n  }\n}\n</code></pre>"},{"location":"api/authentication/identity-management-generic-mqtt/#identity-mgmt-session-query","title":"identity-mgmt-session-query","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper outsourced identity info and the payload is an IdentitySessionQueryRequest.</p> <pre><code>Topic: arrowhead/authentication/identity/management/identity-mgmt-session-query\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": \"&lt;0|1|2&gt;\",\n  \"payload\": {\n    \"pagination\": {\n      \"page\": 0,\n      \"size\": 10,\n      \"direction\": \"ASC\",\n      \"sortField\": \"name\"\n    },\n    \"loginFrom\": \"2025-03-07T10:00:00Z\"\n  }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is an IdentitySessionListResponse.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"sessions\": [\n      {\n        \"systemName\": \"Consumer1\",\n        \"loginTime\": \"2025-03-07T11:54:01Z\",\n        \"expirationTime\": \"2025-03-08T11:59:01Z\"\n      },\n      {\n        \"systemName\": \"Sysop\",\n        \"loginTime\": \"2025-03-07T12:40:54Z\",\n        \"expirationTime\": \"2025-03-08T12:45:54Z\"\n      }\n    ],\n    \"count\": 2\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"If size parameter is defined then page parameter cannot be undefined\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"arrowhead/authentication/identity/management/identity-mgmt-session-query\"\n  }\n}\n</code></pre>"},{"location":"api/authentication/identity-management-generic-mqtt/#identity-mgmt-session-close","title":"identity-mgmt-session-close","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper outsourced identity info and the payload is a List&lt;SystemName&gt;, which contains the names of systems whose sessions need to be closed.</p> <pre><code>Topic: arrowhead/authentication/identity/management/identity-mgmt-session-query\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": \"&lt;0|1|2&gt;\",\n  \"payload\": [ \"Consumer1\" ]\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response template payload is empty.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": \"\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens.  In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 401,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"Invalid identity token\",\n    \"errorCode\": 401,\n    \"exceptionType\": \"AUTH\"\n  }\n}\n</code></pre>"},{"location":"api/blacklist/blacklistDiscovery-generic-http/","title":"blacklistDiscovery IDD","text":"<p>generic_http &amp; generic_https</p>"},{"location":"api/blacklist/blacklistDiscovery-generic-http/#overview","title":"Overview","text":"<p>This page describes the generic_http and generic_https service interface of blacklistDiscovery which enables both Application and Core/Support systems to query the blacklist entries in force that apply to them, or check if a system is blacklisted. Note that a record is in force if it is <code>ACTIVE</code> and not expired.</p> <p>Hereby the Interface Design Description (IDD) is provided to the blacklistDiscovery - Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/blacklist/blacklistDiscovery-generic-http/#interface-description","title":"Interface Description","text":""},{"location":"api/blacklist/blacklistDiscovery-generic-http/#lookup","title":"lookup","text":"<p>The requester can lookup for relevant entries that apply to them and are in force. The service operation request requires an identity related header or certificate. The requester name will be identified during authentication.</p> <pre><code>GET /blacklist/lookup HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and with a BlacklistEntryListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"systemName\": \"TemperatureProvider1\",\n      \"createdBy\": \"Sysop\",\n      \"createdAt\": \"2025-06-05T14:15:02Z\",\n      \"updatedAt\": \"2025-06-05T14:15:02Z\",\n      \"reason\": \"Needs further repair.\",\n      \"active\": true\n    }\n  ],\n  \"count\": 1\n}\n</code></pre> <p>The error codes are <code>401</code> if the requester authentication was unsuccessful or <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Invalid authorization header\",\n  \"errorCode\": 401,\n  \"exceptionType\": \"AUTH\"\n}\n</code></pre>"},{"location":"api/blacklist/blacklistDiscovery-generic-http/#check","title":"check","text":"<p>The requester can check whether a system is on the blacklist. The service operation request requires an identity related header or certificate and a SystemName as path parameter, which identifies the name of the system to check.</p> <pre><code>GET /blacklist/check/AlertConsumer1 HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and a Boolean value which idicates if the system is blacklisted or not.</p> <pre><code>false\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"The specified system name does not match the naming convention: AlertCon$umer1\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"GET /blacklist/check/AlertCon$umer1\"\n}\n</code></pre>"},{"location":"api/blacklist/blacklistDiscovery-generic-mqtt/","title":"blacklistDiscovery IDD","text":"<p>generic_mqtt &amp; generic_mqtts</p>"},{"location":"api/blacklist/blacklistDiscovery-generic-mqtt/#overview","title":"Overview","text":"<p>This page describes the generic_mqtt and generic_mqtts service interface of blacklistDiscovery which enables both Application and Core/Support systems to query the blacklist entries in force that apply to them, or check if a system is blacklisted. Note that a record is in force if it is <code>ACTIVE</code> and not expired.</p> <p>Hereby the Interface Design Description (IDD) is provided to the blacklistDiscovery - Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/blacklist/blacklistDiscovery-generic-mqtt/#interface-description","title":"Interface Description","text":""},{"location":"api/blacklist/blacklistDiscovery-generic-mqtt/#lookup","title":"lookup","text":"<p>The requester can lookup for relevant entries that apply to them and are in force. The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is empty. The requester name will be identified during authentication.</p> <pre><code>Topic: arrowhead/blacklist/lookup\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\":\"&lt;identity-info&gt;\",\n  \"responseTopic\":\"&lt;response-topic&gt;\",\n  \"qosRequirement\":\"&lt;0|1|2&gt;\"\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is a BlacklistEntryListResponse.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\":\"&lt;trace-id&gt;\",\n  \"receiver\":\"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"entries\": [\n      {\n        \"systemName\": \"TemperatureProvider1\",\n        \"createdBy\": \"Sysop\",\n        \"createdAt\": \"2025-06-05T14:15:02Z\",\n        \"updatedAt\": \"2025-06-05T14:15:02Z\",\n        \"reason\": \"Needs further repair.\",\n        \"active\": true\n      }\n    ],\n    \"count\": 1\n  }\n}\n</code></pre> <p>The error codes are <code>401</code> if the requester authentication was unsuccessful or <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 401,\n  \"traceId\":\"&lt;trace-id&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"Invalid authentication info\",\n    \"errorCode\": 401,\n    \"exceptionType\": \"AUTH\",\n    \"origin\": \"arrowhead/blacklist/lookup\"\n  }\n}\n</code></pre>"},{"location":"api/blacklist/blacklistDiscovery-generic-mqtt/#check","title":"check","text":"<p>The requester can check whether a system is on the blacklist. The service operation request requires an identity related header or certificate and the payload is a SystemName, which identifies the name of the system to check.</p> <pre><code>Topic: arrowhead/blacklist/check\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\":\"&lt;identity-info&gt;\",\n  \"responseTopic\":\"&lt;response-topic&gt;\",\n  \"qosRequirement\":\"&lt;0|1|2&gt;\"\n  \"payload\": \"AlertConsumer1\"\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response payload is a Boolean value which idicates if the system is blacklisted or not.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\":\"&lt;trace-id&gt;\",\n  \"receiver\":\"&lt;receiver-system-identifier&gt;\",\n  \"payload\": false\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\":\"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"The specified system name does not match the naming convention: AlertCon$umer1\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"arrowhead/blacklist/check\"\n  }\n}\n</code></pre>"},{"location":"api/blacklist/blacklistManagement-generic-http/","title":"blacklistManagement IDD","text":"<p>generic_http &amp; generic_https</p>"},{"location":"api/blacklist/blacklistManagement-generic-http/#overview","title":"Overview","text":"<p>This page describes the generic_http and generic_https service interface of blacklistManagement which enables systems (with operator role or proper permissions) to handle (query, create, remove) blacklist entries.</p> <p>Hereby the Interface Design Description (IDD) is provided to the blacklistManagement - Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/blacklist/blacklistManagement-generic-http/#interface-description","title":"Interface Description","text":""},{"location":"api/blacklist/blacklistManagement-generic-http/#query","title":"query","text":"<p>The service operation request requires an identity related header or certificate and a BlacklistQueryRequest JSON encoded body. Note that if alivesAt is set, inactive records will not be returned.</p> <pre><code>POST /blacklist/mgmt/query HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n  \"pagination\": {\n    \"page\": 0,\n    \"size\": 5,\n    \"direction\": \"ASC\",\n    \"sortField\": \"createdAt\"\n  },\n  \"systemNames\": [\n  ],\n  \"mode\": \"ACTIVES\",\n  \"issuers\": [\n    \"Sysop\"\n  ],\n  \"revokers\": [\n  ],\n  \"reason\": \"temporary_ban\",\n  \"alivesAt\": \"2025-06-05T23:59:59Z\"\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and with a BlacklistEntryListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"systemName\": \"AlertConsumer1\",\n      \"createdBy\": \"Sysop\",\n      \"createdAt\": \"2025-06-05T13:43:07Z\",\n      \"updatedAt\": \"2025-06-05T13:43:07Z\",\n      \"reason\": \"temporary_ban\",\n      \"expiresAt\": \"2025-12-31T23:59:59Z\",\n      \"active\": true\n    },\n    {\n      \"systemName\": \"AlertConsumer2\",\n      \"createdBy\": \"Sysop\",\n      \"createdAt\": \"2025-06-05T13:43:07Z\",\n      \"updatedAt\": \"2025-06-05T13:43:07Z\",\n      \"reason\": \"temporary_ban\",\n      \"expiresAt\": \"2025-12-31T23:59:59Z\",\n      \"active\": true\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Mode is invalid. Possible values: ALL, ACTIVES, INACTIVES\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /blacklist/mgmt/query\"\n}\n</code></pre>"},{"location":"api/blacklist/blacklistManagement-generic-http/#create","title":"create","text":"<p>The service operation request requires an identity related header or certificate and a BlacklistCreateListRequest JSON encoded body.</p> <pre><code>POST /blacklist/mgmt/create HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n  \"entities\": [\n    {\n      \"systemName\": \"TemperatureProvider1\",\n      \"expiresAt\": \"\",\n      \"reason\": \"This provider is broken and sends too many false alarms. Should be fixed.\"\n    },\n    {\n      \"systemName\": \"AlertConsumer1\",\n      \"expiresAt\": \"2025-12-31T23:59:59Z\",\n      \"reason\": \"temporary_ban\"\n    },\n    {\n      \"systemName\": \"AlertConsumer2\",\n      \"expiresAt\": \"2025-12-31T23:59:59Z\",\n      \"reason\": \"temporary_ban\"\n    }\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>201</code> if the blacklist entries were successfully created. The response also contains a BlacklistEntryListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"systemName\": \"TemperatureProvider1\",\n      \"createdBy\": \"Sysop\",\n      \"createdAt\": \"2025-06-05T13:43:06.568772600Z\",\n      \"updatedAt\": \"2025-06-05T13:43:06.568772600Z\",\n      \"reason\": \"This provider is broken and sends too many false alarms. Should be fixed.\",\n      \"active\": true\n    },\n    {\n      \"systemName\": \"AlertConsumer1\",\n      \"createdBy\": \"Sysop\",\n      \"createdAt\": \"2025-06-05T13:43:06.705704400Z\",\n      \"updatedAt\": \"2025-06-05T13:43:06.705704400Z\",\n      \"reason\": \"temporary_ban\",\n      \"expiresAt\": \"2025-12-31T23:59:59Z\",\n      \"active\": true\n    },\n    {\n      \"systemName\": \"AlertConsumer2\",\n      \"createdBy\": \"Sysop\",\n      \"createdAt\": \"2025-06-05T13:43:06.707704700Z\",\n      \"updatedAt\": \"2025-06-05T13:43:06.707704700Z\",\n      \"reason\": \"temporary_ban\",\n      \"expiresAt\": \"2025-12-31T23:59:59Z\",\n      \"active\": true\n    }\n  ],\n  \"count\": 3\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"You cannot blacklist a system without specifying the reason\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /blacklist/mgmt/create\"\n}\n</code></pre>"},{"location":"api/blacklist/blacklistManagement-generic-http/#remove","title":"remove","text":"<p>The service operation request requires an identity related header or certificate and a query parameter names, which is a List&lt;SystemName&gt;. It contains the names of the systems to remove from the blacklist. This means that their active entries will be inactivated.</p> <pre><code>DELETE /blacklist/mgmt/remove?names=AlertConsumer1&amp;names=AlertConsumer2 HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The success response does not contain any response body.</p> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"TemperatureProvider1 system is blacklisted\",\n  \"errorCode\": 403,\n  \"exceptionType\": \"FORBIDDEN\"\n}\n</code></pre>"},{"location":"api/blacklist/blacklistManagement-generic-mqtt/","title":"blacklistManagement IDD","text":"<p>generic_mqtt &amp; generic_mqtts</p>"},{"location":"api/blacklist/blacklistManagement-generic-mqtt/#overview","title":"Overview","text":"<p>This page describes the generic_mqtt and generic_mqtts service interface of blacklistManagement which enables systems (with operator role or proper permissions) to handle (query, create, remove) blacklist entries.</p> <p>Hereby the Interface Design Description (IDD) is provided to the blacklistManagement - Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/blacklist/blacklistManagement-generic-mqtt/#interface-description","title":"Interface Description","text":""},{"location":"api/blacklist/blacklistManagement-generic-mqtt/#query","title":"query","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a BlacklistQueryRequest JSON encoded body. Note that if alivesAt is set, inactive records will not be returned.</p> <pre><code>Topic: arrowhead/blacklist/management/query\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\":\"&lt;identity-info&gt;\",\n  \"responseTopic\":\"&lt;response-topic&gt;\",\n  \"qosRequirement\":\"&lt;0|1|2&gt;\"\n  \"qosRequirement\": 1,\n  \"payload\": {\n    \"pagination\": {\n      \"page\": 0,\n      \"size\": 5,\n      \"direction\": \"ASC\",\n      \"sortField\": \"createdAt\"\n    },\n    \"systemNames\": [\n    ],\n    \"mode\": \"ACTIVES\",\n    \"issuers\": [\n      \"Sysop\"\n    ],\n    \"revokers\": [\n    ],\n    \"reason\": \"temporary_ban\",\n    \"alivesAt\": \"2025-06-05T23:59:59Z\"\n  }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is a BlacklistEntryListResponse JSON encoded body.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\":\"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"entries\": [\n      {\n        \"systemName\": \"AlertConsumer1\",\n        \"createdBy\": \"Sysop\",\n        \"createdAt\": \"2025-06-10T07:51:20Z\",\n        \"updatedAt\": \"2025-06-10T07:51:20Z\",\n        \"reason\": \"temporary_ban\",\n        \"expiresAt\": \"2025-12-31T23:59:59Z\",\n        \"active\": true\n      },\n      {\n        \"systemName\": \"AlertConsumer2\",\n        \"createdBy\": \"Sysop\",\n        \"createdAt\": \"2025-06-10T07:51:20Z\",\n        \"updatedAt\": \"2025-06-10T07:51:20Z\",\n        \"reason\": \"temporary_ban\",\n        \"expiresAt\": \"2025-12-31T23:59:59Z\",\n        \"active\": true\n      }\n    ],\n    \"count\": 2\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\":\"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"Mode is invalid. Possible values: ALL, ACTIVES, INACTIVES\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"arrowhead/blacklist/management/query\"\n  }\n}\n</code></pre>"},{"location":"api/blacklist/blacklistManagement-generic-mqtt/#create","title":"create","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a BlacklistCreateListRequest JSON encoded body.</p> <pre><code>Topic: arrowhead/blacklist/management/create\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\":\"&lt;identity-info&gt;\",\n  \"responseTopic\":\"&lt;response-topic&gt;\",\n  \"qosRequirement\":\"&lt;0|1|2&gt;\"\n  \"payload\": {\n    \"entities\": [\n      {\n        \"systemName\": \"TemperatureProvider1\",\n        \"expiresAt\": \"\",\n        \"reason\": \"This provider is broken and sends too many false alarms. Should be fixed.\"\n      },\n      {\n        \"systemName\": \"AlertConsumer1\",\n        \"expiresAt\": \"2025-12-31T23:59:59Z\",\n        \"reason\": \"temporary_ban\"\n      },\n      {\n        \"systemName\": \"AlertConsumer2\",\n        \"expiresAt\": \"2025-12-31T23:59:59Z\",\n        \"reason\": \"temporary_ban\"\n      }\n    ]\n  }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>201</code> if called successfully. The response template payload is a BlacklistEntryListResponse JSON encoded body.</p> <pre><code>{\n  \"status\": 201,\n  \"traceId\":\"&lt;trace-id&gt;\",\n  \"receiver\":\"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"entries\": [\n      {\n        \"systemName\": \"TemperatureProvider1\",\n        \"createdBy\": \"Sysop\",\n        \"createdAt\": \"2025-06-10T07:51:19.816605300Z\",\n        \"updatedAt\": \"2025-06-10T07:51:19.816605300Z\",\n        \"reason\": \"This provider is broken and sends too many false alarms. Should be fixed.\",\n        \"active\": true\n      },\n      {\n        \"systemName\": \"AlertConsumer1\",\n        \"createdBy\": \"Sysop\",\n        \"createdAt\": \"2025-06-10T07:51:20.296195800Z\",\n        \"updatedAt\": \"2025-06-10T07:51:20.296195800Z\",\n        \"reason\": \"temporary_ban\",\n        \"expiresAt\": \"2025-12-31T23:59:59Z\",\n        \"active\": true\n      },\n      {\n        \"systemName\": \"AlertConsumer2\",\n        \"createdBy\": \"Sysop\",\n        \"createdAt\": \"2025-06-10T07:51:20.303375Z\",\n        \"updatedAt\": \"2025-06-10T07:51:20.303375Z\",\n        \"reason\": \"temporary_ban\",\n        \"expiresAt\": \"2025-12-31T23:59:59Z\",\n        \"active\": true\n      }\n    ],\n    \"count\": 3\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\":\"&lt;trace-id&gt;\",\n  \"receiver\":\"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"You cannot blacklist a system without specifying the reason\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"arrowhead/blacklist/management/create\"\n  }\n}\n</code></pre>"},{"location":"api/blacklist/blacklistManagement-generic-mqtt/#remove","title":"remove","text":"<p>The service operation request requires an identity related header or certificate and the payload is a List&lt;SystemName&gt;, which contains the names of the systems to remove from the blacklist. This means that their active entries will be inactivated.</p> <pre><code>Topic: arrowhead/blacklist/management/remove\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\":\"&lt;identity-info&gt;\",\n  \"responseTopic\":\"&lt;response-topic&gt;\",\n  \"qosRequirement\":\"&lt;0|1|2&gt;\"\n  \"payload\": [\"AlertConsumer1\", \"AlertConsumer2\"]\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is empty.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\":\"&lt;receiver-system-identifier&gt;\",\n  \"payload\": \"\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 403,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\":\"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"TemperatureProvider1 system is blacklisted\",\n    \"errorCode\": 403,\n    \"exceptionType\": \"FORBIDDEN\",\n    \"origin\": \"arrowhead/blacklist/management/remove\"\n  }\n}\n</code></pre>"},{"location":"api/communication-profiles/communication-profiles-overview/","title":"Communication Profiles","text":"<p>A Communication Profile (CP) defines the rules to be followed and the properties to be applied to a given communication protocol.</p> <p>This Arrowhead FW implementation is offering the following CPs to interact with services of the Core/Support systems and also to apply by the provider systems developers:</p> CP Security Generic HTTP Not secured Generic HTTPS Encrypted data transfer Generic MQTT Not secured Generic MQTTS Encrypted data transfer <p>Important! These CPs are required only for interactions with the Arrowhead Framework. Consumer and provider systems must use one of the defined profiles when communicating with an Arrowhead Core or Suppor system. However, this requirement does not apply to the communication between the consumer and provider systems themselves \u2014 they are free to use any communication method or protocol that best suits their needs.</p>"},{"location":"api/communication-profiles/generic-http-template/","title":"Generic HTTP - Communication Profile","text":"<p>This page describes the Generic HTTP Communication Profile (CP), which templates an unsecure request-response based network communication using the Hypertext Transfer Protocol. </p>"},{"location":"api/communication-profiles/generic-http-template/#characteristics","title":"Characteristics","text":"Overview ID generic_http Transfer protocol HTTP 1.1 Data Encryption N/A Data Compression N/A Payload Format JSON / Text"},{"location":"api/communication-profiles/generic-http-template/#service-interface-template","title":"Service Interface Template","text":"<p>This section lists the interface properties that are necessarry to apply the Generic HTTP - CP as Service interface and that Interface Design Descriptions (IDD) and/or the service registration should include. </p>"},{"location":"api/communication-profiles/generic-http-template/#access-address-list","title":"Access Address List","text":"<p>List of unique identifiers assigned to the same device or node on a network where the given Service is hosted from. An access address can be a hostname, an IPv4 address or an IPv6 address. It is mandatory to publish them (at least one) in the Local Cloud.</p>"},{"location":"api/communication-profiles/generic-http-template/#access-port","title":"Access Port","text":"<p>A numerical identifier within a device or node on a network where the given Service can be accessed. Valid port number range is 1-65535. It is mandatory to publish it in the Local Cloud.</p>"},{"location":"api/communication-profiles/generic-http-template/#base-path","title":"Base Path","text":"<p>The root URL segment that serves as a common prefix for a given Service that goups a set of service-operations (endpoints). It is mandatory to specify it in IDDs and to publish in the Local Cloud.</p>"},{"location":"api/communication-profiles/generic-http-template/#operations","title":"Operations","text":"<p>Set of endpoints, each of them is performing some kind of action related to the given Service. An operation constists of a method and a path. It is mandatory to specify them in IDDs and is optional to publish in the Local Cloud.</p>"},{"location":"api/communication-profiles/generic-http-template/#method","title":"Method","text":"<p>An HTTP method, that applies to the given service-operation.</p>"},{"location":"api/communication-profiles/generic-http-template/#path","title":"Path","text":"<p>The service-operation specific URL segment.</p>"},{"location":"api/communication-profiles/generic-http-template/#authorization-header","title":"Authorization Header","text":"<p>HTTP Authorization request header with Bearer scheme must be used for providing identity or access related data if required in case of a given Service. It is mandatory to specify it in IDDs if authentication or access validation is required by a given service instance.</p>"},{"location":"api/communication-profiles/generic-http-template/#identity","title":"Identity","text":"<p>If requester identity is required to be proven, then an Identity Info or Identiy Token should be provided in this header. The exact Identity data to be provided is depending on the applied Authentication Policy.</p>"},{"location":"api/communication-profiles/generic-http-template/#access","title":"Access","text":"<p>If the access right is required to be proven, then an Access Token should be provided in this header.</p>"},{"location":"api/communication-profiles/generic-http-template/#payload","title":"Payload","text":"<p>The data to be transmitted to or from a given service-operation (endpoint). In case of hierarchical data, the payload must be in JSON data format and must be placed into the HTTP Meassage Body. In case of non-hierarchical data, text data format can be used and placed into the HTTP Meassage Body or into the request URI as URI encoded path variable or query parameter. It is mandatory to specify it in IDDs.</p>"},{"location":"api/communication-profiles/generic-http-template/#response-status","title":"Response Status","text":"<p>The HTTP Response Status that indicates the result of a service-operation. It is mandatory to specify it in IDDs.</p>"},{"location":"api/communication-profiles/generic-http-template/#examples","title":"Examples","text":""},{"location":"api/communication-profiles/generic-http-template/#request","title":"Request","text":"<pre><code>&lt;METHOD&gt; /&lt;basepath&gt;/&lt;operation-path&gt;/&lt;path-variable&gt;?&lt;query-parameter-key&gt;=&lt;query-parameter-value&gt; HTTP/1.1\nHost: &lt;access-address&gt;:&lt;access-port&gt;\nAccept: application/json\nAuthorization: Bearer &lt;access-token&gt;\nContent-Type: application/json\n\n&lt;body&gt;\n</code></pre> <pre><code>POST /temperatureInfo/query-temperature/sensor-abc?scale=celsius HTTP/1.1\nHost: 192.168.0.103:4132\nAccept: application/json\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsI.eyJzdWIiOiIxMjM0NTY3ODkw.SflKxwRJSMeKKF2QT4fwpMeJ\nContent-Type: application/json\n\n{\n    \"from\": \"2025-02-01T00:00:00Z\",\n    \"to\": \"2025-02-06T23:59:00Z\",\n    \"moreThan\": 12,\n    \"lessThan\": 24\n}\n</code></pre>"},{"location":"api/communication-profiles/generic-http-template/#response","title":"Response","text":"<pre><code>HTTP/1.1 &lt;STATUS&gt;\nDate: &lt;response-date&gt;\nContent-Type: application/json; charset=UTF-8\n\n&lt;body&gt;\n</code></pre> <pre><code>HTTP/1.1 200 OK\nDate: Wed, 07 Feb 2025 12:00:00 GMT\nContent-Type: application/json; charset=UTF-8\n\n[\n    {\n        \"timestamp\": \"2025-02-03T12:31:00Z\",\n        \"celsius\": 13,\n    },\n    {\n        \"timestamp\": \"2025-02-05T12:10:00Z\",\n        \"celsius\": 14\n    }\n]\n</code></pre>"},{"location":"api/communication-profiles/generic-https-template/","title":"Generic HTTPS - Communication Profile","text":"<p>This page describes the Generic HTTPS Communication Profile (CP), which templates a secure request-response based network communication using the Hypertext Transfer Protocol over Transport Layer Security. </p>"},{"location":"api/communication-profiles/generic-https-template/#characteristics","title":"Characteristics","text":"Overview ID generic_https Transfer protocol HTTP 1.1 Data Encryption TLS Data Compression N/A Payload Format JSON / Text"},{"location":"api/communication-profiles/generic-https-template/#service-interface-template","title":"Service Interface Template","text":"<p>At interface template level Generic HTTPS is identical with the Generic HTTP - CP.</p>"},{"location":"api/communication-profiles/generic-mqtt-template/","title":"Generic MQTT - Communication Profile","text":"<p>This page describes the Generic MQTT Communication Profile (CP), which templates an unsecure request-response based network communication applied to the fundamentally publish-subscribe based Message Queuing Telemetry Transport protocol. </p>"},{"location":"api/communication-profiles/generic-mqtt-template/#characteristics","title":"Characteristics","text":"Overview ID generic_mqtt Transfer protocol MQTT 3.1 MQTT 3.1.1 Data Encryption N/A Data Compression N/A Payload Format JSON"},{"location":"api/communication-profiles/generic-mqtt-template/#service-interface-template","title":"Service Interface Template","text":"<p>This section lists the interface properties that are necessarry to apply the Generic MQTT - CP as Service interface and that Interface Design Descriptions (IDD) and/or the service registration should include.</p>"},{"location":"api/communication-profiles/generic-mqtt-template/#access-address-list","title":"Access Address List","text":"<p>List of unique identifiers assigned to the same MQTT Broker on a network over which the given Service is accessable. An access address can be a hostname, an IPv4 address or an IPv6 address. It is mandatory to publish them (at least one) in the Local Cloud.</p>"},{"location":"api/communication-profiles/generic-mqtt-template/#access-port","title":"Access Port","text":"<p>A numerical identifier within a device or node on a network where the MQTT Broker and therfore the given Service can be accessed. Valid port number range is 1-65535. It is mandatory to publish it in the Local Cloud.</p>"},{"location":"api/communication-profiles/generic-mqtt-template/#base-topic","title":"Base Topic","text":"<p>The root topic segment that serves as a common prefix for a given Service that groups a set of service-operations. It is mandatory to specify it in IDDs and to publish in the Local Cloud.</p>"},{"location":"api/communication-profiles/generic-mqtt-template/#operations","title":"Operations","text":"<p>Set of operation names. Together with the base topic prefix, each of them is a fully qualified MQTT Topic and is performing some kind of action related to the given Service. It is mandatory to specify them in IDDs and is optional to publish in the Local Cloud.</p>"},{"location":"api/communication-profiles/generic-mqtt-template/#message-templates","title":"Message Templates","text":""},{"location":"api/communication-profiles/generic-mqtt-template/#request-message-template","title":"Request Message Template","text":"<p>Messages with request intent always have to follow the MQTTRequestTemplate data model in JSON format.</p>"},{"location":"api/communication-profiles/generic-mqtt-template/#reponse-message-template","title":"Reponse Message Template","text":"<p>Messages with response intent always have to follow the MQTTResponseTemplate data model in JSON format.</p>"},{"location":"api/communication-profiles/generic-mqtt-template/#trace-id","title":"Trace ID","text":"<p>A string reference choosen by the requester party to identifiy the request message (not mandatory). Service porviders are obliged to present the received trace id in the response messages.</p>"},{"location":"api/communication-profiles/generic-mqtt-template/#authentication","title":"Authentication","text":"<p>Authentication property must be used for providing identity or access related data if required in case of a given Service. It is mandatory to specify it in IDDs if authentication or access validation is required by a given service instance.</p>"},{"location":"api/communication-profiles/generic-mqtt-template/#identity","title":"Identity","text":"<p>If requester identity is required to be proven, then an Identity Info or Identiy Token should be provided in this property. The exact Identity data to be provided is depending on the applied Authentication Policy.</p>"},{"location":"api/communication-profiles/generic-mqtt-template/#access","title":"Access","text":"<p>If the access right is required to be proven, then an Access Token should be provided in this property.</p>"},{"location":"api/communication-profiles/generic-mqtt-template/#response-topic","title":"Response Topic","text":"<p>The topic on which the response is expected.</p>"},{"location":"api/communication-profiles/generic-mqtt-template/#qos-requirement","title":"QoS Requirement","text":"<p>Required response MQTT Quality of Service.</p>"},{"location":"api/communication-profiles/generic-mqtt-template/#payload","title":"Payload","text":"<p>The data to be transmitted to or from a given service-operation.</p>"},{"location":"api/communication-profiles/generic-mqtt-template/#request-parameters","title":"Request Parameters","text":"<p>The request parameters (alias params) are string key-value pairs to be transmitted to a given service-operation.</p>"},{"location":"api/communication-profiles/generic-mqtt-template/#response-status","title":"Response Status","text":"<p>Numerical values that indicates the result of a service-operation. It is mandatory to specify it in IDDs.</p>"},{"location":"api/communication-profiles/generic-mqtt-template/#receiver","title":"Receiver","text":"<p>Requester's identifier in the response message.</p>"},{"location":"api/communication-profiles/generic-mqtt-template/#examples","title":"Examples","text":""},{"location":"api/communication-profiles/generic-mqtt-template/#request","title":"Request","text":"<pre><code>Topic: &lt;base-topic&gt;&lt;delimiter&gt;&lt;operation-name&gt;\nQoS: &lt;0|1|2&gt;\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;access-token&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": &lt;0|1|2&gt;,\n   \"params\": {\n        \"&lt;key&gt;\": \"&lt;value&gt;\"\n   },\n   \"payload\": {\n      &lt;data&gt;\n   }\n}\n</code></pre> <pre><code>Topic: temperatureInfo/query-temperature\nQoS: 2\n\n{\n   \"traceId\": \"abc123\",\n   \"authentication\": \"eyJhbGciOiJIUzI1NiIsI.eyJzdWIiOiIxMjM0NTY3ODkw.SflKxwRJSMeKKF2QT4fwpMeJ\",\n   \"responseTopic\": \"example/response/topic\",\n   \"qosRequirement\": 2,\n   \"params\": {\n        \"sensor-id\": \"sensor-abc\",\n        \"scale\": \"celsius\"\n   },\n   \"payload\": {\n        \"from\": \"2025-02-01T00:00:00Z\",\n        \"to\": \"2025-02-06T23:59:00Z\",\n        \"moreThan\": 12,\n        \"lessThan\": 24\n    }\n}\n</code></pre>"},{"location":"api/communication-profiles/generic-mqtt-template/#response","title":"Response","text":"<pre><code>Topic: &lt;response-topic&gt;\nQoS: &lt;0|1|2&gt;\n\n{\n   \"status\": &lt;response-status&gt;,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-id&gt;\",\n   \"payload\": {\n      &lt;data&gt;\n   }\n}\n</code></pre> <pre><code>Topic: example/response/topic\nQoS: 2\n\n{\n   \"status\": 200,\n   \"traceId\": \"abc123\",\n   \"receiver\": \"ExampleConsumer\",\n   \"payload\": [\n        {\n            \"timestamp\": \"2025-02-03T12:31:00Z\",\n            \"celsius\": 13,\n        },\n        {\n            \"timestamp\": \"2025-02-05T12:10:00Z\",\n            \"celsius\": 14\n        }\n    ]\n}\n</code></pre>"},{"location":"api/communication-profiles/generic-mqtts-template/","title":"Generic MQTTS - Communication Profile","text":"<p>This page describes the Generic MQTTS Communication Profile (CP), which templates a secure request-response based network communication applied to the fundamentally publish-subscribe based Message Queuing Telemetry Transport protocol. </p>"},{"location":"api/communication-profiles/generic-mqtts-template/#characteristics","title":"Characteristics","text":"Overview ID generic_mqtts Transfer protocol MQTT 3.1 MQTT 3.1.1 Data Encryption TLS Data Compression N/A Payload Format JSON"},{"location":"api/communication-profiles/generic-mqtts-template/#service-interface-template","title":"Service Interface Template","text":"<p>At interface template level Generic MQTTS is identical with the Generic MQTT - CP.</p>"},{"location":"api/consumerauthorization/authorization-generic-http/","title":"authorization IDD","text":"<p>generic_http &amp; generic_https</p>"},{"location":"api/consumerauthorization/authorization-generic-http/#overview","title":"Overview","text":"<p>This page describes the generic_http and generic_https service interface of authorization, which enables service consumption permission validations for both providers and consumers. Additionally, providers can lookup, grant and revoke those permissions. An example of this interaction is when a provider system creates authorization policies about its offered service. An other example is when a consumer can check whether a service is allowed to use before trying an actual service consumption. Event notification permission is also handled by this service in an event publisher/subscriber scenario. To enable other systems to use, to consume it, this service needs to be offered through the ServiceRegistry. </p> <p>Hereby the Interface Design Description (IDD) is provided to the authorization \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/consumerauthorization/authorization-generic-http/#interface-description","title":"Interface Description","text":""},{"location":"api/consumerauthorization/authorization-generic-http/#grant","title":"grant","text":"<p>The service operation request requires an identity related header or certificate and an AuthorizationGrantRequest JSON encoded body.</p> <pre><code>POST /consumerauthorization/authorization/grant HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"targetType\": \"SERVICE_DEF\",\n  \"target\": \"kelvinInfo\",\n  \"description\": \"query for everyone, config for TemperatureManager only\",\n  \"defaultPolicy\": {\n    \"policyType\": \"ALL\"\n  },\n  \"scopedPolicies\": {\n    \"config\": {\n      \"policyType\": \"WHITELIST\",\n      \"policyList\": [\n        \"TemperatureManager\"\n      ]\n    }\n  }\n}\n</code></pre> <p>The service operation responds with 200 if called successfully and the policy instance is already existing or 201 if the entity was newly created. The response also contains an AuthorizationPolicyResponse JSON encoded body.</p> <pre><code>{\n  \"instanceId\": \"PR|LOCAL|TemperatureProvider2|SERVICE_DEF|kelvinInfo\",\n  \"level\": \"PROVIDER\",\n  \"cloud\": \"LOCAL\",\n  \"provider\": \"TemperatureProvider2\",\n  \"targetType\": \"SERVICE_DEF\",\n  \"target\": \"kelvinInfo\",\n  \"description\": \"query for everyone, config for TemperatureManager only\",\n  \"defaultPolicy\": {\n    \"policyType\": \"ALL\"\n  },\n  \"scopedPolicies\": {\n    \"config\": {\n      \"policyType\": \"WHITELIST\",\n      \"policyList\": [\n        \"TemperatureManager\"\n      ]\n    }\n  },\n  \"createdBy\": \"TemperatureProvider2\",\n  \"createdAt\": \"2025-06-18T13:51:19.727425900Z\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Target is missing\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /consumerauthorization/authorization/grant\"\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-generic-http/#revoke","title":"revoke","text":"<p>The service operation request  requires an identity related header or certificate and an AuthorizationPolicyInstanceID as path parameter, which is a unique identifier of the policy instance to be deleted.</p> <pre><code>DELETE /consumerauthorization/authorization/revoke/PR%7CLOCAL%7CTemperatureProvider%7CSERVICE_DEF%7CcelsiusInfo HTTP1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and an existing policy instance entity was removed and <code>204</code> if no matching entity was found. The success response does not contain any response body.</p> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Revoking other systems' policy is forbidden\",\n  \"errorCode\": 403,\n  \"exceptionType\": \"FORBIDDEN\",\n  \"origin\": \"DELETE /consumerauthorization/authorization/revoke/PR|LOCAL|TemperatureProvider2|SERVICE_DEF|kelvinInfo\"\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-generic-http/#lookup","title":"lookup","text":"<p>The service operation request requires an identity related header or certificate and an AuthorizationLookupRequest JSON encoded body.</p> <pre><code>POST /consumerauthorization/authorization/lookup HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"instanceIds\": [\n  ],\n  \"cloudIdentifiers\": [\n  ],\n  \"targetNames\": [\n    \"kelvinInfo\"\n  ],\n  \"targetType\": \"SERVICE_DEF\"\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and with an AuthorizationPolicyListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"instanceId\": \"PR|LOCAL|TemperatureProvider2|SERVICE_DEF|kelvinInfo\",\n      \"level\": \"PROVIDER\",\n      \"cloud\": \"LOCAL\",\n      \"provider\": \"TemperatureProvider2\",\n      \"targetType\": \"SERVICE_DEF\",\n      \"target\": \"kelvinInfo\",\n      \"description\": \"query for everyone, config for TemperatureManager only\",\n      \"defaultPolicy\": {\n        \"policyType\": \"ALL\"\n      },\n      \"scopedPolicies\": {\n        \"config\": {\n          \"policyType\": \"WHITELIST\",\n          \"policyList\": [\n            \"TemperatureManager\"\n          ]\n        }\n      },\n      \"createdBy\": \"TemperatureProvider2\",\n      \"createdAt\": \"2025-06-18T13:51:20Z\"\n    }\n  ],\n  \"count\": 1\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> Error if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"One of the following filters must be used: 'instanceIds', 'targetNames', 'cloudIdentifiers'\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /consumerauthorization/authorization/lookup\"\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-generic-http/#verify","title":"verify","text":"<p>The service operation request requires an identity related header or certificate and an AuthorizationVerifyRequest JSON encoded body.</p> <pre><code>POST /consumerauthorization/authorization/verify HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"provider\": \"TemperatureProvider2\",\n  \"consumer\": \"TemperatureManager\",\n  \"targetType\": \"SERVICE_DEF\",\n  \"target\": \"kelvinInfo\",\n  \"scope\": \"config\"\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and with a Boolean value.</p> <pre><code>true\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> Error if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Only the related provider or consumer can use this operation\",\n  \"errorCode\": 403,\n  \"exceptionType\": \"FORBIDDEN\",\n  \"origin\": \"POST /consumerauthorization/authorization/verify\"\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-generic-mqtt/","title":"authorization IDD","text":"<p>generic_mqtt &amp; generic_mqtts</p>"},{"location":"api/consumerauthorization/authorization-generic-mqtt/#overview","title":"Overview","text":"<p>This page describes the generic_mqtt and generic_mqtts service interface of authorization, which enables service consumption permission validations for both providers and consumers. Additionally, providers can lookup, grant and revoke those permissions. An example of this interaction is when a provider system creates authorization policies about its offered service. An other example is when a consumer can check whether a service is allowed to use before trying an actual service consumption. Event notification permission is also handled by this service in an event publisher/subscriber scenario. To enable other systems to use, to consume it, this service needs to be offered through the ServiceRegistry. </p> <p>Hereby the Interface Design Description (IDD) is provided to the authorization \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/consumerauthorization/authorization-generic-mqtt/#interface-description","title":"Interface Description","text":""},{"location":"api/consumerauthorization/authorization-generic-mqtt/#grant","title":"grant","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is an AuthorizationGrantRequest.</p> <pre><code>Topic: arrowhead/consumer-authorization/authorization/grant\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;identity-info&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": \"&lt;0|1|2&gt;\",\n   \"payload\": {\n     \"targetType\": \"SERVICE_DEF\",\n     \"target\": \"kelvinInfo\",\n     \"description\": \"query for everyone, config for TemperatureManager only\",\n     \"defaultPolicy\": {\n       \"policyType\": \"ALL\"\n     },\n     \"scopedPolicies\": {\n        \"config\": {\n        \"policyType\": \"WHITELIST\",\n        \"policyList\": [\n          \"TemperatureManager\"\n        ]\n      }\n    }\n  }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully and the policy instance is already existing or <code>201</code> if the entity was newly created. The response template payload is an AuthorizationPolicyResponse.</p> <pre><code>{\n   \"status\": 201,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n   \"payload\": {\n     \"instanceId\": \"PR|LOCAL|TemperatureProvider2|SERVICE_DEF|kelvinInfo\",\n     \"level\": \"PROVIDER\",\n     \"cloud\": \"LOCAL\",\n     \"provider\": \"TemperatureProvider2\",\n     \"targetType\": \"SERVICE_DEF\",\n     \"target\": \"kelvinInfo\",\n     \"description\": \"query for everyone, config for TemperatureManager only\",\n     \"defaultPolicy\": {\n       \"policyType\": \"ALL\"\n     },\n     \"scopedPolicies\": {\n       \"config\": {\n         \"policyType\": \"WHITELIST\",\n         \"policyList\": [\n           \"TemperatureManager\"\n         ]\n       }\n     },\n     \"createdBy\": \"TemperatureProvider2\",\n     \"createdAt\": \"2025-06-18T13:51:19.727425900Z\"\n   }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 400,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n   \"payload\": {\n     \"errorMessage\": \"Target is missing\"\",\n     \"errorCode\": 400,\n     \"exceptionType\": \"INVALID_PARAMETER\",\n     \"origin\": \"arrowhead/consumer-authorization/authorization/grant\"\n   }\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-generic-mqtt/#revoke","title":"revoke","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is an AuthorizationPolicyInstanceID.</p> <pre><code>Topic: arrowhead/consumer-authorization/authorization/revoke \n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;identity-info&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": \"&lt;0|1|2&gt;\",\n   \"payload\": \"PR|LOCAL|TemperatureProvider|SERVICE_DEF|celsiusInfo\"\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully and an existing policy instance entity was removed or <code>204</code> if no matching entity was found. </p> <pre><code>{\n   \"status\": 200,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\"\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 403,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n   \"payload\": {\n     \"errorMessage\": \"Revoking other systems' policy is forbidden\",\n     \"errorCode\": 403,\n     \"exceptionType\": \"FORBIDDEN\",\n     \"origin\": \"arrowhead/consumer-authorization/authorization/revoke \"\n   }\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-generic-mqtt/#lookup","title":"lookup","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is an AuthorizationLookupRequest.</p> <pre><code>Topic: arrowhead/consumer-authorization/authorization/lookup\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;identity-info&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": \"&lt;0|1|2&gt;\",\n   \"payload\": {\n     \"instanceIds\": [\n     ],\n     \"cloudIdentifiers\": [\n     ],\n     \"targetNames\": [\n       \"kelvinInfo\"\n     ],\n     \"targetType\": \"SERVICE_DEF\"\n   }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is an AuthorizationPolicyListResponse.</p> <pre><code>\n{\n   \"status\": 200,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n   \"payload\": {\n     \"entries\": [\n       {\n         \"instanceId\": \"PR|LOCAL|TemperatureProvider2|SERVICE_DEF|kelvinInfo\",\n         \"level\": \"PROVIDER\",\n         \"cloud\": \"LOCAL\",\n         \"provider\": \"TemperatureProvider2\",\n         \"targetType\": \"SERVICE_DEF\",\n         \"target\": \"kelvinInfo\",\n         \"description\": \"query for everyone, config for TemperatureManager only\",\n         \"defaultPolicy\": {\n           \"policyType\": \"ALL\"\n         },\n         \"scopedPolicies\": {\n           \"config\": {\n             \"policyType\": \"WHITELIST\",\n             \"policyList\": [\n               \"TemperatureManager\"\n             ]\n           }\n         },\n         \"createdBy\": \"TemperatureProvider2\",\n         \"createdAt\": \"2025-06-18T13:51:20Z\"\n       }\n     ],\n     \"count\": 1\n   }\n}   \n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> Error if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>\n{\n   \"status\": 400,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n   \"payload\": {\n     \"errorMessage\": \"One of the following filters must be used: 'instanceIds', 'targetNames', 'cloudIdentifiers'\",\n     \"errorCode\": 400,\n     \"exceptionType\": \"INVALID_PARAMETER\",\n     \"origin\": \"arrowhead/consumer-authorization/authorization/lookup\"\n   }\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-generic-mqtt/#verify","title":"verify","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is an AuthorizationVerifyRequest.</p> <pre><code>Topic: arrowhead/consumer-authorization/authorization/verify\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;identity-info&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": \"&lt;0|1|2&gt;\",\n   \"payload\": {\n     \"provider\": \"TemperatureProvider2\",\n     \"consumer\": \"TemperatureManager\",\n     \"targetType\": \"SERVICE_DEF\",\n     \"target\": \"kelvinInfo\",\n     \"scope\": \"config\"\n   }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is a Boolean.</p> <pre><code>{\n   \"status\": 200,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n   \"payload\": true\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> Error if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 403,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n   \"payload\": {\n     \"errorMessage\": \"Only the related provider or consumer can use this operation\",\n     \"errorCode\": 403,\n     \"exceptionType\": \"FORBIDDEN\",\n     \"origin\": \"arrowhead/consumer-authorization/authorization/verify\"\n  }\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-management-generic-http/","title":"authorizationManagement IDD","text":"<p>generic_http &amp; generic_https</p>"},{"location":"api/consumerauthorization/authorization-management-generic-http/#overview","title":"Overview","text":"<p>This page describes the generic_http and generic_https service interface of authorizationManagement, which enables systems (with operator role or proper permissions) to handle (grant, revoke, query, check) authorization policies in bulk. An example of this interaction is when an operator uses the Management Tool to set up authorization policies manually before the related systems even register themselves. To enable other systems to use, to consume it, this service needs to be offered through the ServiceRegistry. </p> <p>Hereby the Interface Design Description (IDD) is provided to the authorizationManagement \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/consumerauthorization/authorization-management-generic-http/#interface-description","title":"Interface Description","text":""},{"location":"api/consumerauthorization/authorization-management-generic-http/#grant-policies","title":"grant-policies","text":"<p>The service operation request requires an identity related header or certificate and an AuthorizationMgmtGrantListRequest JSON encoded body.</p> <pre><code>POST /consumerauthorization/authorization/mgmt/grant HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"list\": [\n    {\n      \"provider\": \"TemperatureProvider2\",\n      \"targetType\": \"SERVICE_DEF\",\n      \"target\": \"kelvinInfo\",\n      \"description\": \"query for everyone, config for TemperatureManager only\",\n      \"defaultPolicy\": {\n        \"policyType\": \"ALL\"\n      },\n      \"scopedPolicies\": {\n        \"config\": {\n          \"policyType\": \"WHITELIST\",\n          \"policyList\": [\n            \"TemperatureManager\"\n          ]\n        }\n      }\n    }\n  ]\n}\n</code></pre> <p>The service operation responds with 201 if called successfully. The response also contains an AuthorizationPolicyListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"instanceId\": \"MGMT|LOCAL|TemperatureProvider2|SERVICE_DEF|kelvinInfo\",\n      \"level\": \"MGMT\",\n      \"cloud\": \"LOCAL\",\n      \"provider\": \"TemperatureProvider2\",\n      \"targetType\": \"SERVICE_DEF\",\n      \"target\": \"kelvinInfo\",\n      \"description\": \"query for everyone, config for TemperatureManager only\",\n      \"defaultPolicy\": {\n        \"policyType\": \"ALL\"\n      },\n      \"scopedPolicies\": {\n        \"config\": {\n          \"policyType\": \"WHITELIST\",\n          \"policyList\": [\n            \"TemperatureManager\"\n          ]\n        }\n      },\n      \"createdBy\": \"Sysop\",\n      \"createdAt\": \"2025-06-23T08:35:43.217717900Z\"\n    }\n  ],\n  \"count\": 1\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Target is missing\"\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /consumerauthorization/authorization/mgmt/grant\"\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-management-generic-http/#revoke-policies","title":"revoke-policies","text":"<p>The service operation request  requires an identity related header or certificate, and a List&lt;AuthorizationPolicyInstanceID&gt; as query parameter using the key instanceIds, which contains the unique identifiers of the policy instances to be deleted.</p> <pre><code>DELETE /consumerauthorization/authorization/mgmt/revoke?instanceIds=MGMT%7CLOCAL%7CTemperatureProvider%7CSERVICE_DEF%7CcelsiusInfo HTTP1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The success response does not contain any response body.</p> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Instance id list is missing\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"DELETE /consumerauthorization/authorization/mgmt/revoke\"\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-management-generic-http/#query-policies","title":"query-policies","text":"<p>The service operation request requires an identity related header or certificate and an AuthorizationQueryRequest JSON encoded body.</p> <pre><code>POST /consumerauthorization/authorization/mgmt/query HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"pagination\": {\n    \"page\": 0,\n    \"size\": 10\n  },\n  \"level\": \"MGMT\",\n  \"instanceIds\": [\n  ],\n  \"cloudIdentifiers\": [\n  ],\n  \"targetNames\": [\n    \"kelvinInfo\"\n  ],\n  \"targetType\": \"SERVICE_DEF\"\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and with an AuthorizationPolicyListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"instanceId\": \"MGMT|LOCAL|TemperatureProvider2|SERVICE_DEF|kelvinInfo\",\n      \"level\": \"MGMT\",\n      \"cloud\": \"LOCAL\",\n      \"provider\": \"TemperatureProvider2\",\n      \"targetType\": \"SERVICE_DEF\",\n      \"target\": \"kelvinInfo\",\n      \"description\": \"query for everyone, config for TemperatureManager only\",\n      \"defaultPolicy\": {\n        \"policyType\": \"ALL\"\n      },\n      \"scopedPolicies\": {\n        \"config\": {\n          \"policyType\": \"WHITELIST\",\n          \"policyList\": [\n            \"TemperatureManager\"\n          ]\n        }\n      },\n      \"createdBy\": \"Sysop\",\n      \"createdAt\": \"2025-06-23T08:35:43Z\"\n    }\n  ],\n  \"count\": 1\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> Error if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Level is missing\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /consumerauthorization/authorization/mgmt/query\"\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-management-generic-http/#check-policies","title":"check-policies","text":"<p>The service operation request requires an identity related header or certificate and an AuthorizationMgmtVerifyListRequest JSON encoded body.</p> <pre><code>POST /consumerauthorization/authorization/mgmt/check HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"list\": [\n    {\n      \"provider\": \"TemperatureProvider2\",\n      \"consumer\": \"TemperatureManager\",\n      \"targetType\": \"SERVICE_DEF\",\n      \"target\": \"kelvinInfo\",\n      \"scope\": \"config\"\n    }\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and with an AuthorizationMgmtVerifyListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"provider\": \"TemperatureProvider2\",\n      \"consumer\": \"TemperatureManager\",\n      \"cloud\": \"LOCAL\",\n      \"targetType\": \"SERVICE_DEF\",\n      \"target\": \"kelvinInfo\",\n      \"scope\": \"config\",\n      \"granted\": true\n    }\n  ],\n  \"count\": 1\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> Error if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Provider is missing\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /consumerauthorization/authorization/mgmt/check\"\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-management-generic-mqtt/","title":"authorizationManagement IDD","text":"<p>generic_mqtt &amp; generic_mqtts</p>"},{"location":"api/consumerauthorization/authorization-management-generic-mqtt/#overview","title":"Overview","text":"<p>This page describes the generic_mqtt and generic_mqtts service interface of authorizationManagement, which enables systems (with operator role or proper permissions) to handle (grant, revoke, query, check) authorization policies in bulk. An example of this interaction is when an operator uses the Management Tool to set up authorization policies manually before the related systems even register themselves. To enable other systems to use, to consume it, this service needs to be offered through the ServiceRegistry.</p> <p>Hereby the Interface Design Description (IDD) is provided to the authorizationManagement \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/consumerauthorization/authorization-management-generic-mqtt/#interface-description","title":"Interface Description","text":""},{"location":"api/consumerauthorization/authorization-management-generic-mqtt/#grant-policies","title":"grant-policies","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is an AuthorizationMgmtGrantListRequest.</p> <pre><code>Topic: arrowhead/consumer-authorization/authorization/management/grant-policies\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;identity-info&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": \"&lt;0|1|2&gt;\",\n   \"payload\": {\n     \"list\": [\n       {\n         \"provider\": \"TemperatureProvider2\",\n         \"targetType\": \"SERVICE_DEF\",\n         \"target\": \"kelvinInfo\",\n         \"description\": \"query for everyone, config for TemperatureManager only\",\n         \"defaultPolicy\": {\n           \"policyType\": \"ALL\"\n         },\n         \"scopedPolicies\": {\n           \"config\": {\n             \"policyType\": \"WHITELIST\",\n             \"policyList\": [\n               \"TemperatureManager\"\n             ]\n           }\n         }\n       }\n     ]\n   }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully and the policy instance is already existing or <code>201</code> if the entity was newly created. The response template payload is an AuthorizationPolicyListResponse.</p> <pre><code>{\n   \"status\": 201,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n   \"payload\": {\n     \"entries\": [\n       {\n         \"instanceId\": \"MGMT|LOCAL|TemperatureProvider2|SERVICE_DEF|kelvinInfo\",\n         \"level\": \"MGMT\",\n         \"cloud\": \"LOCAL\",\n         \"provider\": \"TemperatureProvider2\",\n         \"targetType\": \"SERVICE_DEF\",\n         \"target\": \"kelvinInfo\",\n         \"description\": \"query for everyone, config for TemperatureManager only\",\n         \"defaultPolicy\": {\n            \"policyType\": \"ALL\"\n         },\n         \"scopedPolicies\": {\n           \"config\": {\n             \"policyType\": \"WHITELIST\",\n             \"policyList\": [\n               \"TemperatureManager\"\n             ]\n           }\n         },\n         \"createdBy\": \"Sysop\",\n         \"createdAt\": \"2025-06-23T08:35:43.217717900Z\"\n       }\n     ],\n     \"count\": 1\n   }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 400,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n   \"payload\": {\n     \"errorMessage\": \"Target is missing\"\",\n     \"errorCode\": 400,\n     \"exceptionType\": \"INVALID_PARAMETER\",\n     \"origin\": \"arrowhead/consumer-authorization/authorization/management/grant-policies\"\n   }\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-management-generic-mqtt/#revoke-policies","title":"revoke-policies","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a List&lt;AuthorizationPolicyInstanceID&gt;.</p> <pre><code>Topic: arrowhead/consumer-authorization/authorization/management/revoke-policies\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;identity-info&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": \"&lt;0|1|2&gt;\",\n   \"payload\": [ \n      \"MGMT|LOCAL|TemperatureProvider|SERVICE_DEF|celsiusInfo\"\n   ]\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. </p> <pre><code>{\n   \"status\": 200,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\"\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 400,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n   \"payload\": {\n     \"errorMessage\": \"Instance id list is missing\",\n     \"errorCode\": 400,\n     \"exceptionType\": \"INVALID_PARAMETER\",\n     \"origin\": \"arrowhead/consumer-authorization/authorization/management/revoke-policies\"\n   }\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-management-generic-mqtt/#query-policies","title":"query-policies","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is an AuthorizationQueryRequest.</p> <pre><code>Topic: arrowhead/consumer-authorization/authorization/management/query-policies\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;identity-info&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": \"&lt;0|1|2&gt;\",\n   \"payload\": {\n     \"pagination\": {\n       \"page\": 0,\n       \"size\": 10\n     },\n     \"level\": \"MGMT\",\n     \"instanceIds\": [\n     ],\n     \"cloudIdentifiers\": [\n     ],\n     \"targetNames\": [\n       \"kelvinInfo\"\n     ],\n     \"targetType\": \"SERVICE_DEF\"\n   }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is an AuthorizationPolicyListResponse.</p> <pre><code>\n{\n   \"status\": 200,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n   \"payload\": {\n     \"entries\": [\n       {\n         \"instanceId\": \"MGMT|LOCAL|TemperatureProvider2|SERVICE_DEF|kelvinInfo\",\n         \"level\": \"MGMT\",\n         \"cloud\": \"LOCAL\",\n         \"provider\": \"TemperatureProvider2\",\n         \"targetType\": \"SERVICE_DEF\",\n         \"target\": \"kelvinInfo\",\n         \"description\": \"query for everyone, config for TemperatureManager only\",\n         \"defaultPolicy\": {\n           \"policyType\": \"ALL\"\n         },\n         \"scopedPolicies\": {\n           \"config\": {\n             \"policyType\": \"WHITELIST\",\n             \"policyList\": [\n               \"TemperatureManager\"\n             ]\n           }\n         },\n         \"createdBy\": \"Sysop\",\n         \"createdAt\": \"2025-06-23T08:35:43Z\"\n       }\n     ],\n     \"count\": 1\n   }\n}   \n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> Error if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>\n{\n   \"status\": 400,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n   \"payload\": {\n     \"errorMessage\": \"Level is missing\",\n     \"errorCode\": 400,\n     \"exceptionType\": \"INVALID_PARAMETER\",\n     \"origin\": \"arrowhead/consumer-authorization/authorization/management/query-policies\"\n   }\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-management-generic-mqtt/#check-policies","title":"check-policies","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is an AuthorizationMgmtVerifyListRequest.</p> <pre><code>Topic: arrowhead/consumer-authorization/authorization/management/check-policies\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;identity-info&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": \"&lt;0|1|2&gt;\",\n   \"payload\": {\n     \"list\": [\n       {\n         \"provider\": \"TemperatureProvider2\",\n         \"consumer\": \"TemperatureManager\",\n         \"targetType\": \"SERVICE_DEF\",\n         \"target\": \"kelvinInfo\",\n         \"scope\": \"config\"\n       }\n     ]\n   }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is an AuthorizationMgmtVerifyListResponse.</p> <pre><code>{\n   \"status\": 200,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n   \"payload\": {\n     \"entries\": [\n       {\n         \"provider\": \"TemperatureProvider2\",\n         \"consumer\": \"TemperatureManager\",\n         \"cloud\": \"LOCAL\",\n         \"targetType\": \"SERVICE_DEF\",\n         \"target\": \"kelvinInfo\",\n         \"scope\": \"config\",\n         \"granted\": true\n       }\n     ],\n     \"count\": 1\n   }\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> Error if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 400,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n   \"payload\": {\n     \"errorMessage\": \"Provider is missing\",\n     \"errorCode\": 400,\n     \"exceptionType\": \"INVALID_PARAMETER\",\n     \"origin\": \"arrowhead/consumer-authorization/authorization/management/check-policies\"\n   }\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-token-generic-http/","title":"authorizationToken IDD","text":"<p>generic_http &amp; generic_https</p>"},{"location":"api/consumerauthorization/authorization-token-generic-http/#overview","title":"Overview","text":"<p>This page describes the generic_http and generic_https service interface of authorizationToken, which enables the verification of service consumption permissions on the provider system side, and the application of session-based service consumption control between the consumer and provider systems. An example of this interaction is when a consumer system with proper permissions obtains an expiring token of the appropriate type, which is then attached to its service consumption attempt. The provider system verifies the received token and performs the service operation only if the token has not expired and is valid for the actual service operation. Additionally, provider systems can choose to have the tokens generated for their services encrypted. Tokens for Event notification are also handled by this service in an event publisher/subscriber scenario. To enable other systems to use, to consume it, this service needs to be offered through the ServiceRegistry.</p> <p>Hereby the Interface Design Description (IDD) is provided to the authorizationToken \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/consumerauthorization/authorization-token-generic-http/#interface-description","title":"Interface Description","text":""},{"location":"api/consumerauthorization/authorization-token-generic-http/#generate","title":"generate","text":"<p>The service operation request requires an identity related header or certificate and an AuthorizationTokenGenerationRequest JSON encoded body.</p> <pre><code>POST /consumerauthorization/authorization-token/generate HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n   \"tokenVariant\": \"USAGE_LIMITED_TOKEN_AUTH\",\n   \"provider\": \"TemperatureProvider2\",\n   \"targetType\": \"SERVICE_DEF\",\n   \"target\": \"kelvinInfo\",\n   \"scope\": \"query-temperature\"\n}\n</code></pre> <p>The service operation responds with <code>201</code> if called successfully and token has been generated. The response also contains an AuthorizationTokenDescriptor JSON encoded body.</p> <pre><code>{\n   \"tokenType\": \"USAGE_LIMITED_TOKEN\",\n   \"targetType\": \"SERVICE_DEF\",\n   \"token\": \"dsalefb521vdjkdsae633\",\n   \"usageLimit\": 10\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Target is missing\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /consumerauthorization/authorization-token/generate\"\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-token-generic-http/#verify","title":"verify","text":"<p>The service operation request requires an identity related header or certificate and an AccessToken path parameter.</p> <pre><code>GET /consumerauthorization/authorization-token/verify/dsalefb521vdjkdsae633 HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n</code></pre> <p>The service operation responds with <code>200</code> if called successfully and token has been checked. The response also contains an AuthorizationTokenVerifyResponse JSON encoded body.</p> <pre><code>{\n   \"verified\": true,\n   \"consumerCloud\": \"LOCAL\",\n   \"consumer\": \"TemperatureConsumer\",\n   \"targetType\": \"SERVICE_DEF\",\n   \"target\": \"kelvinInfo\",\n   \"scope\": \"query-temperature\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Self contained tokens can't be verified this way\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"GET /consumerauthorization/authorization-token/verify\"\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-token-generic-http/#get-public-key","title":"get-public-key","text":"<p>The service operation request requires an identity related header or certificate.</p> <pre><code>GET /consumerauthorization/authorization-token/public-key HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n</code></pre> <p>The service operation responds with <code>200</code> if called successfully and public key is retrieved. The response also contains a PublicKey plain text body.</p> <pre><code>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7D8z7doc95vY0uAx8JXwvrcl+Q7MykFoFIF1tn4fesvPIXo5eCGDS8FCONW0S5igQ+l00GdN/SlE0o85lI08TvepGEkTOtm1J+hsAHRD65OpPTjzWDVzP4+GzjZSUJl41iBDSW1YHgiFG8P2TqaTqNScrfLtKyekSzy/m24uh+zX5tjNoJ4GdSUeTNttHUuCH39MBxEo5E6KpzFGbC4105WHIH1MGWozOrZ3k7udvCLbCTvZ8PFtbDN4Ymjir0PE+6E2N4I+kagL1Py/DmNpKvLLI6m+YWJh2ErOAc56ThVvbCDeLOihacb26Y9Icrda1jOa30/xGsS3CmFLIpZjWwIDAQAB\n</code></pre> <p>The error codes are <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission, <code>404</code> if public key is not available and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Public key is not available\",\n  \"errorCode\": 404,\n  \"exceptionType\": \"DATA_NOT_FOUND\",\n  \"origin\": \"GET /consumerauthorization/authorization-token/public-key\"\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-token-generic-http/#register-encryption-key","title":"register-encryption-key","text":"<p>The service operation request requires an identity related header or certificate and an AuthorizationEncryptionKeyRegistrationRequest JSON encoded body.</p> <pre><code>POST /consumerauthorization/authorization-token/encryption-key\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"key\": \"zFGbC4105WHIH1MGWozOrZ3k7udv\",\n  \"algorithm\": \"AES/CBC/PKCS5Padding\"\n}\n</code></pre> <p>The service operation responds with <code>201</code> if called successfully and the record has been created. The response might contain a Base64 String cryptographic addition plain text body (depending on the specified EncryptionAlgorithmName).</p> <pre><code>41iBDSW1YHgiFG8P2TqaTqNScrfLtKye\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Unsupported algorithm\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /consumerauthorization/authorization-token/encryption-key\"\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-token-generic-http/#unregister-encryption-key","title":"unregister-encryption-key","text":"<p>The service operation request requires an identity related header or certificate.</p> <pre><code>DELETE /consumerauthorization/authorization-token/encryption-key\nAuthorization: Bearer &lt;authorization-info&gt;\n</code></pre> <p>The service operation responds with <code>200</code> if called successfully and the associated record has been removed or <code>204</code> if there was no record associated with the requester.</p> <p>The error codes are <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"No authentication info has been provided\",\n  \"errorCode\": 401,\n  \"exceptionType\": \"AUTH\",\n  \"origin\": \"DELETE /consumerauthorization/authorization-token/encryption-key\"\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-token-generic-mqtt/","title":"authorizationToken IDD","text":"<p>generic_mqtt &amp; generic_mqtts</p>"},{"location":"api/consumerauthorization/authorization-token-generic-mqtt/#overview","title":"Overview","text":"<p>This page describes the generic_mqtt and generic_mqtts service interface of authorizationToken, which enables the verification of service consumption permissions on the provider system side, and the application of session-based service consumption control between the consumer and provider systems. An example of this interaction is when a consumer system with proper permissions obtains an expiring token of the appropriate type, which is then attached to its service consumption attempt. The provider system verifies the received token and performs the service operation only if the token has not expired and is valid for the actual service operation. Additionally, provider systems can choose to have the tokens generated for their services encrypted. Tokens for Event notification are also handled by this service in an event publisher/subscriber scenario. To enable other systems to use, to consume it, this service needs to be offered through the ServiceRegistry.</p> <p>Hereby the Interface Design Description (IDD) is provided to the authorizationToken \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/consumerauthorization/authorization-token-generic-mqtt/#interface-description","title":"Interface Description","text":""},{"location":"api/consumerauthorization/authorization-token-generic-mqtt/#generate","title":"generate","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is an AuthorizationTokenGenerationRequest.</p> <pre><code>Topic: arrowhead/consumer-authorization/authorization-token/generate\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;identity-info&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": &lt;0|1|2&gt;,\n   \"payload\": {\n      \"tokenVariant\": \"USAGE_LIMITED_TOKEN_AUTH\",\n      \"provider\": \"TemperatureProvider2\",\n      \"targetType\": \"SERVICE_DEF\",\n      \"target\": \"kelvinInfo\",\n      \"scope\": \"query-temperature\"\n   }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>201</code> if called successfully and token has been generated. The response template payload is an AuthorizationTokenDescriptor.</p> <pre><code>{\n   \"status\": 201,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureConsumer\",\n   \"payload\" :{\n      \"tokenType\": \"USAGE_LIMITED_TOKEN\",\n      \"targetType\": \"SERVICE_DEF\",\n      \"token\": \"dsalefb521vdjkdsae633\",\n      \"usageLimit\": 10\n   }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> Error if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 400,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureConsumer\",\n   \"payload\": {\n     \"errorMessage\": \"Target is missing\",\n     \"errorCode\": 400,\n     \"exceptionType\": \"INVALID_PARAMETER\",\n     \"origin\": \"arrowhead/consumer-authorization/authorization-token/generate\"\n   }\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-token-generic-mqtt/#verify","title":"verify","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is an AccessToken.</p> <pre><code>Topic: arrowhead/consumer-authorization/authorization-token/verify\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;identity-info&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": &lt;0|1|2&gt;,\n   \"payload\": \"dsalefb521vdjkdsae633\"\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully and the token has been checked. The response template payload is an AuthorizationTokenVerifyResponse.</p> <pre><code>{\n   \"status\": 200,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureProvider2\",\n   \"payload\": {\n      \"verified\": true,\n      \"consumerCloud\": \"LOCAL\",\n      \"consumer\": \"TemperatureConsumer\",\n      \"targetType\": \"SERVICE_DEF\",\n      \"target\": \"kelvinInfo\",\n      \"scope\": \"query-temperature\"\n   }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> Error if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 400,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureProvider2\",\n   \"payload\": {\n     \"errorMessage\": \"Self contained tokens can't be verified this way\",\n     \"errorCode\": 400,\n     \"exceptionType\": \"INVALID_PARAMETER\",\n     \"origin\": \"arrowhead/consumer-authorization/authorization-token/verify\"\n   }\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-token-generic-mqtt/#get-public-key","title":"get-public-key","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info.</p> <pre><code>Topic: arrowhead/consumer-authorization/authorization-token/get-public-key\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;identity-info&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": &lt;0|1|2&gt;\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully and the public key is retrieved. The response template payload is a PublicKey.</p> <pre><code>{\n   \"status\": 200,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureProvider2\",\n   \"payload\": \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7D8z7doc95vY0uAx8JXwvrcl+Q7MykFoFIF1tn4fesvPIXo5eCGDS8FCONW0S5igQ+l00GdN/SlE0o85lI08TvepGEkTOtm1J+hsAHRD65OpPTjzWDVzP4+GzjZSUJl41iBDSW1YHgiFG8P2TqaTqNScrfLtKyekSzy/m24uh+zX5tjNoJ4GdSUeTNttHUuCH39MBxEo5E6KpzFGbC4105WHIH1MGWozOrZ3k7udvCLbCTvZ8PFtbDN4Ymjir0PE+6E2N4I+kagL1Py/DmNpKvLLI6m+YWJh2ErOAc56ThVvbCDeLOihacb26Y9Icrda1jOa30/xGsS3CmFLIpZjWwIDAQAB\"\n}\n</code></pre> <p>The error codes are <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission, <code>404</code> if public key is not available and <code>500</code> Error if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 404,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureProvider2\",\n   \"payload\": {\n     \"errorMessage\": \"Public key is not available\",\n     \"errorCode\": 404,\n     \"exceptionType\": \"DATA_NOT_FOUND\",\n     \"origin\": \"arrowhead/consumer-authorization/authorization-token/get-public-key\"\n   }\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-token-generic-mqtt/#register-encryption-key","title":"register-encryption-key","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is an AuthorizationEncryptionKeyRegistrationRequest.</p> <pre><code>Topic: arrowhead/consumer-authorization/authorization-token/register-encryption-key\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;identity-info&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": &lt;0|1|2&gt;,\n   \"payload\": {\n      \"key\": \"zFGbC4105WHIH1MGWozOrZ3k7udv\",\n      \"algorithm\": \"AES/CBC/PKCS5Padding\"\n   }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>201</code> if called successfully and the record has been created. The response template payload might contain a Base64 String cryptographic addition (depending on the specified EncryptionAlgorithmName).</p> <pre><code>{\n   \"status\": 201,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureProvider2\",\n   \"payload\": \"41iBDSW1YHgiFG8P2TqaTqNScrfLtKye\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> Error if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 400,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureProvider2\",\n   \"payload\": {\n     \"errorMessage\": \"Unsupported algorithm\",\n     \"errorCode\": 400,\n     \"exceptionType\": \"INVALID_PARAMETER\",\n     \"origin\": \"arrowhead/consumer-authorization/authorization-token/register-encryption-key\"\n   }\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-token-generic-mqtt/#unregister-encryption-key","title":"unregister-encryption-key","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info.</p> <pre><code>Topic: arrowhead/consumer-authorization/authorization-token/unregister-encryption-key\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;identity-info&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": &lt;0|1|2&gt;\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully and the associated record has been removed or <code>204</code> if there was no record associated with the requester.</p> <pre><code>{\n   \"status\": 200,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureProvider2\"\n}\n</code></pre> <p>The error codes are <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> Error if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 401,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureProvider2\",\n   \"payload\": {\n     \"errorMessage\": \"No authentication info has been provided\",\n     \"errorCode\": 401,\n     \"exceptionType\": \"AUTH\",\n     \"origin\": \"arrowhead/consumer-authorization/authorization-token/unregister-encryption-key\"\n   }\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-token-management-generic-http/","title":"authorizationTokenManagement IDD","text":"<p>generic_http &amp; generic_https</p>"},{"location":"api/consumerauthorization/authorization-token-management-generic-http/#overview","title":"Overview","text":"<p>This page describes the generic_http and generic_https service interface of authorizationTokenManagement, which allows systems (with operator role or proper permission) to manage the service access tokens in bulk and on behalf of the consumer and provider systems. Access tokens enable the verification of service consumption permissions on the provider system side, and the application of session-based service consumption control between the consumer and provider systems. An example of this interaction when a Core/Support system generates tokens for a consumer system for multiple service instances. Tokens for Event notification are also handled by this service in an event publisher/subscriber scenario. To enable other systems to use, to consume it, this service needs to be offered through the ServiceRegistry.</p> <p>Hereby the Interface Design Description (IDD) is provided to the authorizationTokenManagement \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/consumerauthorization/authorization-token-management-generic-http/#interface-description","title":"Interface Description","text":""},{"location":"api/consumerauthorization/authorization-token-management-generic-http/#generate-tokens","title":"generate-tokens","text":"<p>The service operation request requires an identity related header or certificate and an AuthorizationTokenGenerationListMgmtRequest JSON encoded body. The URI can contain an optional query parameter with the key \"unbound\" and a Boolean value. If <code>true</code> the consumers' service permission check will be skipped if the requester system name is present in the unbounded.token.generation.whitelist system configuration. </p> <pre><code>POST /consumerauthorization/authorization/mgmt/token/generate?unbound=true HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"list\": [\n    {\n      \"tokenVariant\": \"TIME_LIMITED_TOKEN_AUTH\",\n      \"targetType\": \"SERVICE_DEF\",\n      \"consumerCloud\": \"LOCAL\",\n      \"consumer\": \"TemperatureConsumer\",\n      \"provider\": \"TemperatureProvider1\",\n      \"target\": \"kelvinInfo\",\n      \"scope\": \"query-temperature\",\n      \"expiresAt\": \"2025-06-18T13:51:20Z\"\n    }\n  ]\n}\n</code></pre> <p>The service operation responds with <code>201</code> if called successfully and tokens have been generated. The response also contains an AuthorizationTokenListMgmtResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"tokenType\": \"TIME_LIMITED_TOKEN\",\n      \"variant\": \"TIME_LIMITED_TOKEN_AUTH\",\n      \"token\": \"dsalefb521vdjkdsae633\",\n      \"tokenReference\": \"a4626c853f0c0c8989757bb0ecc7b992\",\n      \"requester\": \"TemperatureManager\",\n      \"consumerCloud\": \"LOCAL\",\n      \"consumer\": \"TemperatureConsumer\",\n      \"provider\": \"TemperatureProvider1\",\n      \"targetType\": \"SERVICE_DEF\",\n      \"target\": \"kelvinInfo\",\n      \"scope\": \"query-temperature\",\n      \"createdAt\": \"2025-06-18T13:40:20Z\",\n      \"expiresAt\": \"2025-06-18T13:51:20Z\"\n    }\n  ],\n  \"count\": 1\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\":\" Token variant is missing\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /consumerauthorization/authorization/mgmt/token/generate\"\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-token-management-generic-http/#query-tokens","title":"query-tokens","text":"<p>The service operation request requires an identity related header or certificate and an AuthorizationTokenQueryRequest JSON encoded body.</p> <pre><code>POST /consumerauthorization/authorization/mgmt/token/query HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"pagination\": {\n    \"page\": 0,\n    \"size\": 10\n  },\n  \"requester\": \"TemperatureManager\",\n  \"tokenType\": \"TIME_LIMITED_TOKEN\",\n  \"consumerCloud\": \"LOCAL\",\n  \"consumer\": \"TemperatureConsumer\",\n  \"provider\": \"TemperatureProvider1\",\n  \"targetType\": \"SERVICE_DEF\",\n  \"target\": \"kelvinInfo\"\n}\n</code></pre> <p>The service operation responds with <code>200</code> if called successfully and tokens have been queried. The response also contains an AuthorizationTokenListMgmtResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"tokenType\": \"TIME_LIMITED_TOKEN\",\n      \"variant\": \"TIME_LIMITED_TOKEN_AUTH\",\n      \"token\": \"dsalefb521vdjkdsae633\",\n      \"tokenReference\": \"a4626c853f0c0c8989757bb0ecc7b992\",\n      \"requester\": \"TemperatureManager\",\n      \"consumerCloud\": \"LOCAL\",\n      \"consumer\": \"TemperatureConsumer\",\n      \"provider\": \"TemperatureProvider1\",\n      \"targetType\": \"SERVICE_DEF\",\n      \"target\": \"kelvinInfo\",\n      \"scope\": \"query-temperature\",\n      \"createdAt\": \"2025-06-18T13:40:20Z\",\n      \"expiresAt\": \"2025-06-18T13:51:20Z\"\n    }\n  ],\n  \"count\": 1\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Invalid token type: SOMETHING\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /consumerauthorization/authorization/mgmt/token/query\"\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-token-management-generic-http/#revoke-tokens","title":"revoke-tokens","text":"<p>The service operation request requires an identity related header or certificate and a query parameter tokenReferences, which is a List&lt;String&gt;. It contains the references associated with the token records to be removed.</p> <pre><code>DELETE /consumerauthorization/authorization/mgmt/token/revoke?tokenReferences=a4626c853f0c0c8989757bb0ecc7b992&amp;tokenReferences=a573c531f0b0b8789757bb0ecc5b882 HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The success response does not contain any response body.</p> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"No authentication info has been provided\",\n  \"errorCode\": 401,\n  \"exceptionType\": \"AUTH\",\n  \"origin\": \"DELETE /consumerauthorization/authorization/mgmt/token/revoke\"\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-token-management-generic-http/#add-encryption-keys","title":"add-encryption-keys","text":"<p>The service operation request requires an identity related header or certificate and an AuthorizationEncryptionKeyListRequest JSON encoded body.</p> <pre><code>POST /consumerauthorization/authorization/mgmt/token/encryption-key HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n  \"list\": [\n    {\n      \"systemName\": \"TemperatureProvider2\",\n      \"key\": \"abc1234\",\n      \"algorithm\": \"AES/ECB/PKCS5Padding\"\n    }\n  ]\n}\n</code></pre> <p>The service operation responds with <code>201</code> if called successfully and the encryption key has been saved. The response also contains an AuthorizationEncryptionKeyListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"systemName\": \"TemperatureProvider2\",\n      \"rawKey\": \"abc1234\",\n      \"algorithm\": \"AES/ECB/PKCS5Padding\",\n      \"keyAdditive\": \"\",\n      \"createdAt\": \"2025-06-18T13:51:20Z\"\n    }\n  ],\n  \"count\": 1\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Unsupported algorithm\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /consumerauthorization/authorization/mgmt/token/encryption-key\"\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-token-management-generic-http/#remove-encryption-keys","title":"remove-encryption-keys","text":"<p>The service operation request requires an identity related header or certificate and a query parameter systemNames, which is a List&lt;SystemName&gt;. It contains the names of the systems to which the keys to be deleted belong.</p> <pre><code>DELETE /consumerauthorization/authorization/mgmt/token/encryption-key?systemNames=TemperatureProvider1&amp;systemNames=TemperatureProvider2 HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The success response does not contain any response body.</p> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"No authentication info has been provided\",\n  \"errorCode\": 401,\n  \"exceptionType\": \"AUTH\",\n  \"origin\": \"DELETE /consumerauthorization/authorization/mgmt/token/encryption-key\"\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-token-management-generic-mqtt/","title":"authorizationTokenManagement IDD","text":"<p>generic_mqtt &amp; generic_mqtts</p>"},{"location":"api/consumerauthorization/authorization-token-management-generic-mqtt/#overview","title":"Overview","text":"<p>This page describes the generic_mqtt and generic_mqtts service interface of authorizationTokenManagement, which allows systems (with operator role or proper permission) to manage the service access tokens in bulk and on behalf of the consumer and provider systems. Access tokens enable the verification of service consumption permissions on the provider system side, and the application of session-based service consumption control between the consumer and provider systems. An example of this interaction when a Core/Support system generates tokens for a consumer system for multiple service instances. Tokens for Event notification are also handled by this service in an event publisher/subscriber scenario. To enable other systems to use, to consume it, this service needs to be offered through the ServiceRegistry.</p> <p>Hereby the Interface Design Description (IDD) is provided to the authorizationTokenManagement \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/consumerauthorization/authorization-token-management-generic-mqtt/#interface-description","title":"Interface Description","text":""},{"location":"api/consumerauthorization/authorization-token-management-generic-mqtt/#generate-tokens","title":"generate-tokens","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is an AuthorizationTokenGenerationListMgmtRequest. The params can contain an optional KeyValuePair with the key \"unbound\" and a Boolean value. If unbound is true, the consumers' service permission check will be skipped if the requester system name is present in the unbounded.token.generation.whitelist system configuration.</p> <pre><code>Topic: arrowhead/consumer-authorization/authorization-token/management/generate-tokens\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;identity-info&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": &lt;0|1|2&gt;,\n   \"params\": {\n    \"unbound\": true,\n   },\n   \"payload\": {\n      \"list\": [\n         {\n            \"tokenVariant\": \"TIME_LIMITED_TOKEN_AUTH\",\n            \"targetType\": \"SERVICE_DEF\",\n            \"consumerCloud\": \"LOCAL\",\n            \"consumer\": \"TemperatureConsumer\",\n            \"provider\": \"TemperatureProvider1\",\n            \"target\": \"kelvinInfo\",\n            \"scope\": \"query-temperature\",\n            \"expiresAt\": \"2025-06-18T13:51:20Z\"\n         }\n      ]\n   }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>201</code> if called successfully and tokens have been generated. The response template payload is an AuthorizationTokenListMgmtResponse.</p> <pre><code>{\n   \"status\": 201,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureManager\",\n   \"payload\": {\n      \"entries\": [\n         {\n            \"tokenType\": \"TIME_LIMITED_TOKEN\",\n            \"variant\": \"TIME_LIMITED_TOKEN_AUTH\",\n            \"token\": \"dsalefb521vdjkdsae633\",\n            \"tokenReference\": \"a4626c853f0c0c8989757bb0ecc7b992\",\n            \"requester\": \"TemperatureManager\",\n            \"consumerCloud\": \"LOCAL\",\n            \"consumer\": \"TemperatureConsumer\",\n            \"provider\": \"TemperatureProvider1\",\n            \"targetType\": \"SERVICE_DEF\",\n            \"target\": \"kelvinInfo\",\n            \"scope\": \"query-temperature\",\n            \"createdAt\": \"2025-06-18T13:40:20Z\",\n            \"expiresAt\": \"2025-06-18T13:51:20Z\"\n         }\n      ],\n      \"count\": 1\n   }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> Error if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 400,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureManager\",\n   \"payload\": {\n     \"errorMessage\": \"Token variant is missing\",\n     \"errorCode\": 400,\n     \"exceptionType\": \"INVALID_PARAMETER\",\n     \"origin\": \"arrowhead/consumer-authorization/authorization-token/management/generate-tokens\"\n   }\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-token-management-generic-mqtt/#query-tokens","title":"query-tokens","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is an AuthorizationTokenQueryRequest.</p> <pre><code>Topic: arrowhead/consumer-authorization/authorization-token/management/query-tokens\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;identity-info&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": &lt;0|1|2&gt;,\n   \"payload\": {\n      \"pagination\": {\n         \"page\": 0,\n         \"size\": 10\n      },\n      \"requester\": \"TemperatureManager\",\n      \"tokenType\": \"TIME_LIMITED_TOKEN\",\n      \"consumerCloud\": \"LOCAL\",\n      \"consumer\": \"TemperatureConsumer\",\n      \"provider\": \"TemperatureProvider1\",\n      \"targetType\": \"SERVICE_DEF\",\n      \"target\": \"kelvinInfo\"\n   }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully and tokens have been queried. The response template payload is an AuthorizationTokenListMgmtResponse.</p> <pre><code>{\n   \"status\": 200,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureManager\",\n   \"payload\": {\n      \"entries\": [\n         {\n            \"tokenType\": \"TIME_LIMITED_TOKEN\",\n            \"variant\": \"TIME_LIMITED_TOKEN_AUTH\",\n            \"token\": \"dsalefb521vdjkdsae633\",\n            \"tokenReference\": \"a4626c853f0c0c8989757bb0ecc7b992\",\n            \"requester\": \"TemperatureManager\",\n            \"consumerCloud\": \"LOCAL\",\n            \"consumer\": \"TemperatureConsumer\",\n            \"provider\": \"TemperatureProvider1\",\n            \"targetType\": \"SERVICE_DEF\",\n            \"target\": \"kelvinInfo\",\n            \"scope\": \"query-temperature\",\n            \"createdAt\": \"2025-06-18T13:40:20Z\",\n            \"expiresAt\": \"2025-06-18T13:51:20Z\"\n         }\n      ],\n      \"count\": 1\n   }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> Error if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 400,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureManager\",\n   \"payload\": {\n     \"errorMessage\": \"Invalid token type: SOMETHING\",\n     \"errorCode\": 400,\n     \"exceptionType\": \"INVALID_PARAMETER\",\n     \"origin\": \"arrowhead/consumer-authorization/authorization-token/management/query-tokens\"\n   }\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-token-management-generic-mqtt/#revoke-tokens","title":"revoke-tokens","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a List&lt;String&gt; which contains the references of token records to be removed.</p> <pre><code>Topic: arrowhead/consumer-authorization/authorization-token/management/revoke-tokens\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;identity-info&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": &lt;0|1|2&gt;,\n   \"payload\": [\n    \"a4626c853f0c0c8989757bb0ecc7b992\", \"a573c531f0b0b8789757bb0ecc5b882\"\n   ]\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully and tokens have been revoked.</p> <pre><code>{\n   \"status\": 200,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureManager\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> Error if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 401,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureManager\",\n   \"payload\": {\n     \"errorMessage\": \"No authentication info has been provided\",\n     \"errorCode\": 401,\n     \"exceptionType\": \"AUTH\",\n     \"origin\": \"arrowhead/consumer-authorization/authorization-token/management/revoke-tokens\"\n   }\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-token-management-generic-mqtt/#add-encryption-keys","title":"add-encryption-keys","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is an AuthorizationEncryptionKeyListRequest.</p> <pre><code>Topic: arrowhead/consumer-authorization/authorization-token/management/add-encryption-keys\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;identity-info&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": &lt;0|1|2&gt;,\n   \"payload\": {\n      \"list\": [\n         {\n            \"systemName\": \"TemperatureProvider2\",\n            \"key\": \"abc1234\",\n            \"algorithm\": \"AES/ECB/PKCS5Padding\"\n         }\n      ]\n   }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>201</code> if called successfully and enryption keys have been saved. The response template payload is an AuthorizationEncryptionKeyListResponse.</p> <pre><code>{\n   \"status\": 201,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureManager\",\n   \"payload\": {\n      \"entries\": [\n         {\n            \"systemName\": \"TemperatureProvider2\",\n            \"rawKey\": \"abc1234\",\n            \"algorithm\": \"AES/ECB/PKCS5Padding\",\n            \"keyAdditive\": \"\",\n            \"createdAt\": \"2025-06-18T13:51:20Z\"\n         }\n      ],\n      \"count\": 1\n   }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> Error if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 400,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureManager\",\n   \"payload\": {\n     \"errorMessage\": \"Unsupported algorithm\",\n     \"errorCode\": 400,\n     \"exceptionType\": \"INVALID_PARAMETER\",\n     \"origin\": \"arrowhead/consumer-authorization/authorization-token/management/add-encryption-keys\"\n   }\n}\n</code></pre>"},{"location":"api/consumerauthorization/authorization-token-management-generic-mqtt/#remove-encryption-keys","title":"remove-encryption-keys","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a List&lt;SystemName&gt; which contains the names of the systems to which the keys to be deleted belong.</p> <pre><code>Topic: arrowhead/consumer-authorization/authorization-token/management/remove-encryption-keys\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;identity-info&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": &lt;0|1|2&gt;,\n   \"payload\": [\n    \"TemperatureProvider1\", \"TemperatureProvider2\"\n   ]\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully.</p> <pre><code>{\n   \"status\": 200,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureManager\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> Error if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 401,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureManager\",\n   \"payload\": {\n     \"errorMessage\": \"No authentication info has been provided\",\n     \"errorCode\": 401,\n     \"exceptionType\": \"AUTH\",\n     \"origin\": \"arrowhead/consumer-authorization/authorization-token/management/remove-encryption-keys\"\n   }\n}\n</code></pre>"},{"location":"api/data-models/address-descriptor/","title":"AddressDescriptor","text":"Field Type Description type AddressType Network address type. address Address Address."},{"location":"api/data-models/authorization-encryption-key-list-request/","title":"AuthorizationEncryptionKeyListRequest","text":"Field Type Mandatory Description list List&lt;AuthorizationEncryptionKeyRequest&gt; yes List of encryption key requests."},{"location":"api/data-models/authorization-encryption-key-list-response/","title":"AuthorizationEncryptionKeyListResponse","text":"Field Type Description entries List&lt;AuthorizationEncryptionKeyResponse&gt; Encryption key records. count Number Total number of records."},{"location":"api/data-models/authorization-encryption-key-registration-request/","title":"AuthorizationEncryptionKeyRegistrationRequest","text":"Field Type Mandatory Description key String yes A secret key. algorithm EncryptionAlgorithmName no Algorithm identifier. Default is <code>AES/ECB/PKCS5Padding</code>."},{"location":"api/data-models/authorization-encryption-key-request/","title":"AuthorizationEncryptionKeyRequest","text":"Field Type Mandatory Description systemName SystemName yes Name of the associated system. key String yes A secret key. algorithm EncryptionAlgorithmName no Algorithm identifier. Default is <code>AES/ECB/PKCS5Padding</code>."},{"location":"api/data-models/authorization-encryption-key-response/","title":"AuthorizationEncryptionKeyResponse","text":"Field Type Description systemName SystemName Name of the associated system. rawKey String The raw string key. algorithm EncryptionAlgorithmName Name of the encryption algorithm. keyAdditive String Any string addition that the defined algorithm is using, if any. createdAt DateTime The encryption key was registered at this timestamp."},{"location":"api/data-models/authorization-grant-request/","title":"AuthorizationGrantRequest","text":"Field Type Mandatory Description cloud CloudIdentifier no The cloud of the potential consumers. Omitted in case of the Local Cloud. targetType AuthorizationTargetType yes The type of the target (service definition or event type). target ServiceName or EventTypeName yes The target of the rule. description String no The description of the rule. defaultPolicy AuthorizationPolicyRequest yes The policy details of the rule which is used when no more specialized policy details are available. scopedPolicies ScopedPoliciesRequest no A structure that can contain specialized policy details."},{"location":"api/data-models/authorization-lookup-request/","title":"AuthorizationLookupRequest","text":"Field Type Mandatory Description instanceIds List&lt;AuthorizationPolicyInstanceID&gt; no (yes) Requester is looking for policy instances with any of the specified identifiers. Mandatory if no cloudIdentifiers nor targetNames are specified. cloudIdentifiers List&lt;CloudIdentifier&gt; no (yes) Requester is looking for policy instances that belong to any of the specified clouds. Mandatory if no instanceIds nor targetNames are specified. targetNames List&lt;ServiceName&gt; or List&lt;EventTypeName&gt; no (yes) Requester is looking for policy instances that belong to any of the specified targets (either service definitions or event types). Mandatory if no instanceIds nor cloudIdentifiers are specified. targetType AuthorizationTargetType no (yes) The type of the specified targets. Mandatory if targetNames are specified."},{"location":"api/data-models/authorization-mgmt-grant-list-request/","title":"AuthorizationMgmtGrantListRequest","text":"Field Type Mandatory Description list List&lt;AuthorizationMgmtGrantRequest&gt; yes A list of authorization policies to create."},{"location":"api/data-models/authorization-mgmt-grant-request/","title":"AuthorizationMgmtGrantRequest","text":"Field Type Mandatory Description cloud CloudIdentifier no The cloud of the potential consumers. Omitted in case of the Local Cloud. provider SystemName yes The provider of the target. targetType AuthorizationTargetType yes The type of the target (service definition or event type). target ServiceName or EventTypeName yes The target of the rule. description String no The description of the rule. defaultPolicy AuthorizationPolicyRequest yes The policy details of the rule which is used when no more specialized policy details are available. scopedPolicies ScopedPoliciesRequest no A structure that can contain specialized policy details."},{"location":"api/data-models/authorization-mgmt-verify-list-request/","title":"AuthorizationMgmtVerifyListRequest","text":"Field Type Mandatory Description list List&lt;AuthorizationMgmtVerifyRequest&gt; yes A list of verify requests."},{"location":"api/data-models/authorization-mgmt-verify-list-response/","title":"AuthorizationMgmtVerifyListResponse","text":"Field Type Description entries List&lt;AuthorizationMgmtVerifyResponse&gt; List of policy verify results. count Number The number of returned policy verify results."},{"location":"api/data-models/authorization-mgmt-verify-request/","title":"AuthorizationMgmtVerifyRequest","text":"Field Type Mandatory Description provider SystemName yes The name of the system that provides the target. consumer SystemName yes The name of the system that needs access to the target. cloud CloudIdentifier no The cloud of the consumer. Optional, if the consumer is in the Local Cloud. targetType AuthorizationTargetType yes The type of the target (service definition or event type). target ServiceName or EventTypeName yes The name of the target. scope ServiceOperationName no The service operation that the consumer wants to use. Only matters when the target is a service definition."},{"location":"api/data-models/authorization-mgmt-verify-response/","title":"AuthorizationMgmtVerifyResponse","text":"Field Type Description provider SystemName The name of the system that provides the target. consumer SystemName The name of the system that needs access to the target. cloud CloudIdentifier The cloud of the consumer. In case of the Local Cloud the word LOCAL can be used. targetType AuthorizationTargetType The type of the target (service definition or event type). target ServiceName or EventTypeName The name of the target. scope ServiceOperationName The service operation that the consumer wants to use. Omitted, if it was not specified in the related request. granted Boolean The result of the verification."},{"location":"api/data-models/authorization-policy-descriptor/","title":"AuthorizationPolicyDescriptor","text":"Field Type Description policyType AuthorizationPolicyType The type of the policy. policyList List&lt;SystemName&gt; A list of consumer system names. Only filled in case of list-based policy type. policyMetadataRequirement MetadataRequirements System-level metadata requirements. Only filled in case of metadata-based policy type."},{"location":"api/data-models/authorization-policy-list-response/","title":"AuthorizationPolicyListResponse","text":"Field Type Description entries List&lt;AuthorizationPolicyResponse&gt; List of policy instance results. count Number The total number of corresponding policy instances."},{"location":"api/data-models/authorization-policy-request/","title":"AuthorizationPolicyRequest","text":"Field Type Mandatory Description policyType AuthorizationPolicyType yes The type of the policy. policyList List&lt;SystemName&gt; no (yes) A list of consumer system names. Mandatory in case of list-based policy type. policyMetadataRequirement MetadataRequirements no (yes) System-level metadata requirements. Mandatory in case of metadata-based policy type."},{"location":"api/data-models/authorization-policy-response/","title":"AuthorizationPolicyResponse","text":"Field Type Description instanceId AuthorizationPolicyInstanceID Unique identifier of the policy instance. authorizationLevel AuthorizationLevel Level (provider or management) of the policy. cloud CloudIdentifier The cloud of the potential consumers. In case of the Local Cloud the word LOCAL is used. provider SystemName The name of the system who provides the target of the rule. targetType AuthorizationTargetType The type of the target (service definition or event type). target ServiceName or EventTypeName The target of the rule. description String The description of the rule. defaultPolicy AuthorizationPolicyDescriptor The policy details of the rule which is used when no more specialized policy details are available. scopedPolicies ScopedPoliciesDescriptor A structure that can contain specialized policy details. createdBy SystemName Authorization policy instance was created by this system. createdAt DateTime Authorization policy was registered at this timestamp."},{"location":"api/data-models/authorization-query-request/","title":"AuthorizationQueryRequest","text":"Field Type Mandatory Description pagination PageRequest no Page-related parameters. level AuthorizationLevel yes Requester is looking for policy instances with the specified level (management-level or provider-level). providers List&lt;SystemName&gt; no Requester is looking for policy instances that belong to any of the specified providers. instanceIds List&lt;AuthorizationPolicyInstanceID&gt; no Requester is looking for policy instances with any of the specified identifiers. cloudIdentifiers List&lt;CloudIdentifier&gt; no Requester is looking for policy instances that belong to any of the specified clouds. targetNames List&lt;ServiceName&gt; or List&lt;EventTypeName&gt; no Requester is looking for policy instances that belong to any of the specified targets (either service definitions or event types). targetType AuthorizationTargetType no (yes) The type of the specified targets. Mandatory if targetNames are specified."},{"location":"api/data-models/authorization-token-descriptor/","title":"AuthorizationTokenDescriptor","text":"Field Type Description tokenType TokenType Type of the token. targetType AuthorizationTargetType Type of the target. token AccessToken The token itself. usageLimit Number Maximum number of token usage, if any. expiresAt DateTime Token is valid until this time, if any."},{"location":"api/data-models/authorization-token-generation-list-mgmt-request/","title":"AuthorizationTokenGenerationListMgmtRequest","text":"Field Type Mandatory Description list List&lt;AuthorizationTokenGenerationMgmtRequest&gt; yes List of token requests."},{"location":"api/data-models/authorization-token-generation-mgmt-request/","title":"AuthorizationTokenGenerationMgmtRequest","text":"Field Type Mandatory Description tokenVariant AccessTokenVariant yes Exact token technology. targetType AuthorizationTargetType no Type of the targeted resource. Default is <code>SERVICE_DEF</code>. consumerCloud CloudIdentifier no Cloud of the consumer. Default is <code>LOCAL</code>. consumer SystemName yes Name of the consumer system. provider SystemName yes Name of the targeted provider system. target ServiceName or EventTypeName yes Target of the token. scope ServiceOperationName no Scope of the token. Only matters when the target is a service definition. expiresAt DateTime no Token will be valid until this timestamp. Only in case of time limited tokens. Default time limit is applied if not defined. usageLimit Number no How many times the token will be valid. Only in case of usage limited tokens. Default usage limit is applied if not defined."},{"location":"api/data-models/authorization-token-generation-request/","title":"AuthorizationTokenGenerationRequest","text":"Field Type Mandatory Description tokenVariant AccessTokenVariant yes Exact token technology. provider SystemName yes Name of the targeted provider system. targetType AuthorizationTargetType no Type of the targeted resource. Default is <code>SERVICE_DEF</code>. target ServiceName or EventTypeName yes Target of the token. scope ServiceOperationName no Scope of the token. Only matters when the target is a service definition."},{"location":"api/data-models/authorization-token-list-mgmt-response/","title":"AuthorizationTokenListMgmtResponse","text":"Field Type Description entries List&lt;AuthorizationTokenMgmtResponse&gt; List of token records. count Number Total number of token records."},{"location":"api/data-models/authorization-token-map/","title":"AuthorizationTokenMap","text":"<p>An Object which maps String <code>scope</code>* and <code>AuthorizationTokenDescriptor</code> KeyValuePairs to SecurityPolicy keys. Example:</p> <pre><code>{\n    \"&lt;security-policy-a&gt;\": {\n        \"&lt;scope&gt;\": {...}\n    },\n    \"&lt;security-policy-b&gt;\": {\n        \"&lt;scope-a&gt;\": {...},\n        \"&lt;scope-b&gt;\": {...}\n    }\n}\n</code></pre> <p>*scope: The ServiceOperationName or ServiceName if the token in the <code>AuthorizationTokenDescriptor</code> is valid for all the operations.</p>"},{"location":"api/data-models/authorization-token-mgmt-response/","title":"AuthorizationTokenMgmtResponse","text":"Field Type Description tokenType TokenType Type of token technology group. variant AccessTokenVariant Exact type of token technology. token AccessToken The token itself. tokenReference String Reference of the token record. requester SystemName Name of the system that requested the token. consumerCloud CloudIdentifier Cloud of the consumer. consumer SystemName Name of the consumer system. provider SystemName Name of the provider system. targetType AuthorizationTargetType Type of the targeted resource. target ServiceName or EventTypeName Target of the token. scope ServiceOperationName Scope of the token. Only matters when the target is a service definition. If null, the token is valid for all the operations of the service definition target. createdAt DateTime Token was generated at this timestamp. usageLimit Number Maximum number of token usage, if any. usageLeft Number The token can still be used this many times, if any. expiresAt DateTime Token is valid until this timestamp, if any."},{"location":"api/data-models/authorization-token-query-request/","title":"AuthorizationTokenQueryRequest","text":"Field Type Mandatory Description pagination PageRequest no Paging information about the queried token records. requester SystemName no Requester is looking for tokens that were generated by the request of the specified system. tokenType TokenType no Requester is looking for tokens that belong to the specified technology group. consumerCloud CloudIdentifier no Requester is looking for tokens that belong to the specified consumer cloud. consumer SystemName no Requester is looking for tokens that belong to the specified consumer system. provider SystemName no Requester is looking for tokens that belong to the specified provider system. targetType AuthorizationTargetType no Requester is looking for tokens that belong to the specified target type. target ServiceName or EventTypeName no Requester is looking for tokens that belong to the specified service definition or event type."},{"location":"api/data-models/authorization-token-verify-response/","title":"AuthorizationTokenVerifyResponse","text":"Field Type Description verified Boolean The result of the verification. consumerCloud CloudIdentifier The cloud of the consumer the token is associated with. consumer SystemName Name of the consumer the token is associated with. targetType AuthorizationTargetType Type of the targeted resource the token is associated with. target ServiceName or EventTypeName The target the token is associated with. scope ServiceOperationName Scope of the token. Only matters when the target is a service definition. If null, the token is valid for all the operations of the service definition target."},{"location":"api/data-models/authorization-verify-request/","title":"AuthorizationVerifyRequest","text":"Field Type Mandatory Description provider SystemName no (yes) The name of the system that provides the target. Mandatory if the consumer is the requester. consumer SystemName no (yes) The name of the system that needs access to the target. Mandatory if the provider is the requester. cloud CloudIdentifier no The cloud of the consumer. Optional, if the consumer is in the Local Cloud. targetType AuthorizationTargetType yes The type of the target (service definition or event type). target ServiceName or EventTypeName yes The name of the target. scope ServiceOperationName no The service operation that the consumer wants to use. Only matters when the target is a service definition."},{"location":"api/data-models/blacklist-create-list-request/","title":"BlacklistCreateListRequest","text":"Field Type Mandatory Description entities List&lt;BlacklistCreateRequest&gt; yes List of blacklist entries to create."},{"location":"api/data-models/blacklist-create-request/","title":"BlacklistCreateRequest","text":"Field Type Mandatory Description systemName SystemName yes The name of the system to be blacklisted. expiresAt DateTime no This rule will expire at this timestamp. reason BlacklistReason yes The system is blacklisted because of this reason."},{"location":"api/data-models/blacklist-entry-list-response/","title":"BlacklistEntryListResponse","text":"Field Type Description entries List&lt;BlacklistEntryResponse&gt; List of blacklist entry results. count Number The total number of corresponding entries."},{"location":"api/data-models/blacklist-entry-response/","title":"BlacklisEntryResponse","text":"Field Type Description systemName SystemName Unique identifier of the blacklisted system. createdBy SystemName Unique identifier of the system that created the record. revokedBy SystemName Unique identifier of the system that revoked the record. Only appears if the record was revoked. createdAt DateTime Blacklist record was created at this timestamp. updatedAt DateTime Blacklist record was updated at this timestamp. reason BlacklistReason The system was blacklisted because of this reason. expiresAt DateTime Blacklist record expires at this timestamp. Only appears if the record can expire. active Booelan Indicates if the rule defined by the entry is active. Only false if the rule has been explicitly revoked."},{"location":"api/data-models/blacklist-query-request/","title":"BlacklistQueryRequest","text":"Field Type Mandatory Description pagination PageRequest no Paging information about the queried blacklist entries. systemNames List&lt;SystemName&gt; no Requester is looking for blacklist entries that apply to systems with any of the specified names. mode Mode no Requester is looking for blacklist entries with the specified activity. issuers List&lt;SystemName&gt; no Requester is looking for blacklist entries that were created by systems with any of the specified names. revokers List&lt;SystemName&gt; no Requester is looking for blacklist entries that were revoked by systems with any of the specified names. reason BlacklistReason no Requester is looking for blacklist entries that were created for the specified reason or the reason contains this text. alivesAt DateTime no Requester is looking for active blacklist records that are not expired at this timestamp."},{"location":"api/data-models/config-map/","title":"ConfigMap","text":"<p>An Object which maps String keys String values.</p>"},{"location":"api/data-models/config-response/","title":"ConfigResponse","text":"Field Type Description map ConfigMap The actual values of the requested settings."},{"location":"api/data-models/credentials/","title":"Credentials","text":"<p>An Object which maps String keys String values.</p>"},{"location":"api/data-models/device-descriptor/","title":"DeviceDescriptor","text":"Field Type Description name DeviceName Unique identifier of the device. metadata Metadata Additional information about the device. addresses List&lt;AddressDescriptor&gt; Different kinds of addresses of the device. createdAt DateTime Device was registered at this timestamp. updatedAt DateTime Device was modified at this timestamp."},{"location":"api/data-models/device-list-request/","title":"DeviceListRequest","text":"Field Type Mandatory Description devices List&lt;DeviceRegistrationRequest&gt; yes A list of devices."},{"location":"api/data-models/device-list-response/","title":"DeviceListResponse","text":"Field Type Description entries List&lt;DeviceDescriptor&gt; A list of devices. count Number The total number of corresponding devices."},{"location":"api/data-models/device-lookup-request/","title":"DeviceLookupRequest","text":"Field Type Mandatory Description deviceNames List&lt;DeviceName&gt; no Requester is looking for devices with any of the specified names. addresses List&lt;Address&gt; no Requester is looking for devices with any of the specified addresses. addressType AddressType no Requester is looking for devices with the specified type of address. metadataRequirementsList List&lt;MetadataRequirements&gt; no Requester is looking for devices that are matching any of the specified metadata requirements"},{"location":"api/data-models/device-lookup-response/","title":"DeviceLookupResponse","text":"Field Type Description entries List&lt;DeviceLookupResult&gt; List of device results. count Long Number of returned devices."},{"location":"api/data-models/device-lookup-result/","title":"DeviceLookupResult","text":"Field Type Description name DeviceName Unique identifier of the device. metadata Metadata Additional information about the device. addresses List&lt;AddressDescriptor&gt; Different kind of addresses of the device. createdAt DateTime Device was registered at this timestamp. updatedAt DateTime Device was modified at this timestamp."},{"location":"api/data-models/device-query-request/","title":"DeviceQueryRequest","text":"Field Type Mandatory Description pagination PageRequest no Paging information about the queried devices. deviceNames List&lt;DeviceName&gt; no Requester is looking for devices with any of the specified names. addresses List&lt;Address&gt; no Requester is looking for devices with any of the specified addresses. addressType AddressType no Requester is looking for devices with the specified type of address. metadataRequirementsList List&lt;MetadataRequirements&gt; no Requester is looking for devices that are matching any of the specified metadata requirements."},{"location":"api/data-models/device-registration-request/","title":"DeviceRegistrationRequest","text":"Field Type Mandatory Description name DeviceName yes Unique identifier of the device. metadata Metadata no Additional information about the device. addresses List&lt;Address&gt; yes Different kind of addresses of the device."},{"location":"api/data-models/device-registration-response/","title":"DeviceRegistrationResponse","text":"Field Type Description name DeviceName Unique identifier of the device. metadata Metadata Additional information about the device. addresses List&lt;AddressDescriptor&gt; Different kind of addresses of the registered device. createdAt DateTime Device was registered at this timestamp. updatedAt DateTime Device was modified at this timestamp."},{"location":"api/data-models/error-response/","title":"ErrorResponse","text":"Field Type Description errorMessage String Description of the error. errorCode Integer Numerical code of the error. exceptionType ErrorType Type value of the error. origin String Origin of the error."},{"location":"api/data-models/identity-change-request/","title":"IdentityChangeRequest","text":"Field Type Mandatory Description systemName SystemName yes The requester of the operation. credentials Credentials yes Credential information related to the system. newCredentials Credentials yes The new credential information that replaces the current one."},{"location":"api/data-models/identity-list-create-request/","title":"IdentityListCreateRequest","text":"Field Type Mandatory Description authenticationMethod AuthenticationMethod yes The authentication method all the identities use. identities List&lt;IdentityMgmtRequest&gt; yes A list of identities."},{"location":"api/data-models/identity-list-response/","title":"IdentityListResponse","text":"Field Type Description identities List&lt;IdentityResult&gt; A page of identities. count Number Total number of identities that match the filters."},{"location":"api/data-models/identity-list-update-request/","title":"IdentityListUpdateRequest","text":"Field Type Mandatory Description identities List&lt;IdentityMgmtRequest&gt; yes A list of identities."},{"location":"api/data-models/identity-login-response/","title":"IdentityLoginResponse","text":"Field Type Description token IdentityToken Proof of identity token that is assigned to the requester system for a session. expirationTime DateTime Token is valid until this time."},{"location":"api/data-models/identity-mgmt-request/","title":"IdentityMgmtRequest","text":"Field Type Mandatory Description systemName SystemName yes Unique identifier of the identifiable system. credentials Credentials yes Authentication method-specific credential information of the system. sysop Boolean no It determines whether the identifiable system has higher level administration rights or not."},{"location":"api/data-models/identity-query-request/","title":"IdentityQueryRequest","text":"Field Type Mandatory Description pagination PageRequest no Page-related parameters. namePart String no Requester is looking for identities with system names containing the specified text. isSysop Boolean no Requester is looking for identities that have/do not have higher level administration rights depending of the specified value. createdBy SystemName no Requester is looking for identities that have been created by the specified identity. creationFrom DateTime no Requester is looking for identities that were created after the specified time. creationTo DateTime no Requester is looking for identities that were created before the specified time. hasSession Boolean no Requester is looking for identities that have/do not have active session at the moment."},{"location":"api/data-models/identity-request/","title":"IdentityRequest","text":"Field Type Mandatory Description systemName SystemName yes The requester of the operation. credentials Credentials yes Credential information related to the system."},{"location":"api/data-models/identity-result/","title":"IdentityResult","text":"Field Type Description systemName SystemName Unique identifier of the identified system. authenticationMethod AuthenticationMethod The authentication method the identity uses. sysop Boolean It determines whether the identified system has higher level administration rights or not. createdBy SystemName The identity was created by this identified system. createdAt DateTime Identity was created at this timestamp. updatedBy SystemName The identity was modified by this identified system. updatedAt DateTime Identity was modified at this timestamp."},{"location":"api/data-models/identity-session-list-response/","title":"IdentitySessionListResponse","text":"Field Type Description sessions List&lt;IdentitySessionResult&gt; A page of sessions. count Number Total number of sessions that match the filters."},{"location":"api/data-models/identity-session-query-request/","title":"IdentitySessionQueryRequest","text":"Field Type Mandatory Description pagination PageRequest no Page-related parameters. namePart String no Requester is looking for active sessions of systems with names containing the specified text. loginFrom DateTime no Requester is looking for active sessions that were created after the specified time. loginTo DateTime no Requester is looking for active sessions that were created before the specified time."},{"location":"api/data-models/identity-session-result/","title":"IdentitySessionResult","text":"Field Type Description systemName SystemName Unique identifier of the identified system. loginTime DateTime Session was created at this timestamp. expirationTime DateTime Session will expire at this timestamp."},{"location":"api/data-models/identity-verify-response/","title":"IdentityVerifyResponse","text":"Field Type Description verified Boolean The result of the verification. systemName SystemName The name of the verified system. Empty if the verification was unsuccessful. sysop Boolean A flag that determines whether the verified system has higher level administrative rights. Empty the if verification was unsuccessful. loginTime DateTime The system started its active session at this time. Empty if the verification was unsuccessful. expirationTime DateTime The verified token is valid until this time. Empty if the verification was unsuccessful."},{"location":"api/data-models/identity/","title":"Identity","text":"<p>An Object which describes the identity of a system. It also contains whether the identified system has higher level administrative rights.</p>"},{"location":"api/data-models/interface-template-descriptor/","title":"InterfaceTemplateDescriptor","text":"Field Type Description name InterfaceName Unique name of the interface template. protocol Protocol Protocol of the interface template. propertyRequirements List&lt;InterfaceTemplatePropertyDescriptor&gt; Properties of the interface template. createdAt DateTime Interface template was registered at this timestamp. updatedAt DateTime Interface template was modified at this timestamp."},{"location":"api/data-models/interface-template-list-request/","title":"InterfaceTemplateListRequest","text":"Field Type Mandatory Description interfaceTemplates List&lt;InterfaceTemplateRequest&gt; yes A list of interface templates."},{"location":"api/data-models/interface-template-list-response/","title":"InterfaceTemplateListResponse","text":"Field Type Description entries List&lt;InterfaceTemplateDescriptor&gt; A list of interface templates. count Number The total number of the corresponding interface templates."},{"location":"api/data-models/interface-template-property-descriptor/","title":"InterfacePropertyDescriptor","text":"Field Type Description name String Name of the property. mandatory Boolean True if the property is mandatory, false if optional. validator PropertyValidator Name of the validator assigned to the property. validatorParams List&lt;String&gt; Parameter values of the validator (if needed)."},{"location":"api/data-models/interface-template-property-request/","title":"InterfaceTemplatePropertyRequest","text":"Field Type Mandatory Description name String yes Name of the property. mandatory Boolean yes True if the property is mandatory, false if optional. validator PropertyValidator no Name of the validator assigned to the property. validatorParams List&lt;String&gt; no Parameter values of the validator."},{"location":"api/data-models/interface-template-query-request/","title":"InterfaceTemplateQueryRequest","text":"Field Type Mandatory Description pagination PageRequest no Paging information about the queried interface templates. templateNames List&lt;InterfaceName&gt; no Requester is looking for interface templates with any of the specified names. protocols List&lt;Protocol&gt; no Requester is looking for interface templates with any of the specified protocols."},{"location":"api/data-models/interface-template-request/","title":"InterfaceTemplateRequest","text":"Field Type Mandatory Description name InterfaceName yes Unique name of the interface template. protocol Protocol yes Protocol of the interface template. propertyRequirements List&lt;InterfaceTemplatePropertyRequest&gt; yes Properties of the interface template."},{"location":"api/data-models/log-entry/","title":"LogEntry","text":"Field Type Description logId String Unique identifier of the entry. entryDate DateTime The timestamp of the entry. logger String The logger that created the entry. severity LogSeverity The severity of the entry. message String The log message. exception String If the log entry is an error, information of the related exception may appear here."},{"location":"api/data-models/log-request/","title":"LogRequest","text":"Field Type Mandatory Description pagination PageRequest no Page-related parameters. from DateTime no Requester is looking for log entries with timestamp that does not precede this one. to DateTime no Requester is looking for log entries with timestamp that does not succeed this one. severity LogSeverity no Requester is looking for log entries with severity that equals to or is higher than the specified one. loggerStr String no Requester is looking for log entries with logger whose name contains the specified text."},{"location":"api/data-models/log-response/","title":"LogResponse","text":"Field Type Description entries List&lt;LogEntry&gt; A page of log entries. count Number Total number of entries that match the filters."},{"location":"api/data-models/metadata-requirements/","title":"MetadataRequirements","text":"<p>A special Object which maps String keys to Object, primitive or list values, where</p> <ul> <li> <p>Keys can be paths (or multi-level keys) which access a specific value in a Metadata structure, where parts of the path are delimited with dot character (e.g. in case of \u201dkey.subkey\u201d path we are looking for the key named \u201dkey\u201d in the metadata, which is associated with an embedded object and in this object we are looking for the key named \u201dsubkey\u201d).</p> </li> <li> <p>Values are special Objects with two fields: an \"operation\" (e.g. less than) and an actual value (e.g. a number). A metadata is matching a requirement if the specified operation returns true using the metadata value referenced by a key path as first and the actual value as second operands.</p> </li> <li> <p>Alternatively, values can be ordinary primitives, lists or Objects. In this case the \"operation\" is equals by default.</p> </li> </ul>"},{"location":"api/data-models/metadata-requirements/#operations","title":"Operations","text":"<p>all kind of values (any) - all kind of values (any)</p> <p><code>EQUALS</code>, <code>NOT_EQUALS</code></p> <p>text-text</p> <p><code>EQUALS_IGNORE_CASE</code>, <code>NOT_EQUALS_IGNORE_CASE</code>, <code>INCLUDES</code>, <code>NOT_INCLUDES</code>, <code>INCLUDES_IGNORE_CASE</code>, <code>NOT_INCLUDES_IGNORE_CASE</code>, <code>STARTS_WITH</code>, <code>NOT_STARTS_WITH</code>, <code>STARTS_WITH_IGNORE_CASE</code>, <code>NOT_STARTS_WITH_IGNORE_CASE</code>, <code>ENDS_WITH</code>, <code>NOT_ENDS_WITH</code>, <code>ENDS_WITH_IGNORE_CASE</code>, <code>NOT_ENDS_WITH_IGNORE_CASE</code>, <code>REGEXP</code></p> <p>number-number</p> <p><code>LESS_THAN</code>, <code>LESS_THAN_OR_EQUALS_TO</code>, <code>GREATER_THAN</code>, <code>GREATER_THAN_OR_EQUALS_TO</code></p> <p>text or list - number</p> <p><code>SIZE_EQUALS</code>, <code>SIZE_NOT_EQUALS</code></p> <p>list - any</p> <p><code>CONTAINS</code>, <code>NOT_CONTAINS</code></p> <p>any - list</p> <p><code>IN</code>, <code>NOT_IN</code></p>"},{"location":"api/data-models/metadata/","title":"Metadata","text":"<p>An Object which maps String keys to primitive, Object or List values.</p>"},{"location":"api/data-models/mqtt-request-template/","title":"MqttRequestTemplate","text":"Field Type Mandatory Description traceId String no Any kind of string choosen by the requester. authentication String yes Authentication related data. responseTopic String yes The topic on which the response is expected. qosRequirement MQTTQoS no Required response MQTT Quality of Service. params Map no Request parameters as string key-value pairs. payload Object no Any kind of data object."},{"location":"api/data-models/mqtt-response-template/","title":"MqttResponseTemplate","text":"Field Type Description status Integer Response status code. traceId String The string identifier given by the requester. receiver SystemName Unique identifier of the system to which the response message is addressed. payload Object Any kind of data object."},{"location":"api/data-models/page-request/","title":"PageRequest","text":"Field Type Mandatory Description pageNumber Number no (yes) The number of the requested page. It is mandatory if page size is specified. pageSize Number no (yes) The number of entries on the requested page. It is mandatory if page number is specified. pageSortField String no The identifier of the field which must be used to sort the entries. pageDirection Direction no The direction of the sorting."},{"location":"api/data-models/property-map/","title":"PropertyMap","text":"<p>An Object which maps String keys to String values.</p>"},{"location":"api/data-models/scoped-policies-descriptor/","title":"ScopedPolicesDescriptor","text":"<p>An Object which maps ServiceOperationName keys to AuthorizationPolicyDescriptor values.</p>"},{"location":"api/data-models/scoped-policies-request/","title":"ScopedPolicesRequest","text":"<p>An Object which maps ServiceOperationName keys to AuthorizationPolicyRequest values.</p>"},{"location":"api/data-models/service-create-list-request/","title":"ServiceCreateListRequest","text":"Field Type Mandatory Description instances List&lt;ServiceRequest&gt; yes A list of service instances."},{"location":"api/data-models/service-definition-descriptor/","title":"ServiceDefinitionDescriptor","text":"Field Type Description name ServiceName Unique identifier of the service definition. createdAt DateTime Service definition was registered at this timestamp. updatedAt DateTime Service definition was modified at this timestamp."},{"location":"api/data-models/service-definition-list-request/","title":"ServiceDefinitionListRequest","text":"Field Type Mandatory Description serviceDefinitionNames List&lt;ServiceName&gt; yes A list of service definition names."},{"location":"api/data-models/service-definition-list-response/","title":"ServiceDefinitionListResponse","text":"Field Type Description entries List&lt;ServiceDefinitionDescriptor&gt; A list of service definitions. count Number The total number of corresponding service definitions."},{"location":"api/data-models/service-definition-remove-request/","title":"ServiceDefinitionRemoveRequest","text":"Field Type Mandatory Description names List&lt;ServiceName&gt; yes Names of the service definitions that need to be removed."},{"location":"api/data-models/service-instance-descriptor/","title":"ServiceInstanceDescriptor","text":"Field Type Description instanceId ServiceInstanceID Unique identifier of the service instance. provider SystemDescriptor Information about the service instance provider system. serviceDefinition ServiceDefinitionDescriptor Information about the service definition. version Version Version of the service instance. expiresAt DateTime The moment of the future from which the service instance will not be available. metadata Metadata Additional information about the service instance. interfaces List&lt;ServiceInterfaceDescriptor&gt; Available access interfaces of the service instance. createdAt DateTime Service instance was registered at this timestamp. updatedAt DateTime Service instance was modified at this timestamp."},{"location":"api/data-models/service-interface-descriptor/","title":"ServiceInterfaceDescriptor","text":"Field Type Description templateName InterfaceName The name of the interface template that describes the interface structure. protocol Protocol The communication protocol of the interface. policy SecurityPolicy The security of the interface. properties Metadata Interface template-specific data."},{"location":"api/data-models/service-interface-request/","title":"ServiceInterfaceRequest","text":"Field Type Mandatory Description templateName InterfaceName yes The name of the interface template that describes the interface structure. protocol Protocol no (yes) The communication protocol of the interface. Only mandatory if the interface template is not previously known in the Local Cloud. policy SecurityPolicy yes The security of the interface. properties Metadata yes Interface template-specific data."},{"location":"api/data-models/service-list-response/","title":"ServiceListResponse","text":"Field Type Description entries List&lt;ServiceInstanceDescriptor&gt; A list of service instances. count Number The total number of corresponding service instances."},{"location":"api/data-models/service-lookup-request/","title":"ServiceLookupRequest","text":"Field Type Mandatory Description instanceIds List&lt;ServiceInstanceID&gt; no (yes) Requester is looking for service instances with any of the specified identifiers. Mandatory if no providerNames nor serviceDefinitionNames are specified. providerNames List&lt;SystemName&gt; no (yes) Requester is looking for service instances that are provided by any of the specified systems. Mandatory if no serviceInstanceIds nor serviceDefinitionNames are specified. serviceDefinitionNames List&lt;ServiceName&gt; no (yes) Requester is looking for service instances with any of the specified service definition names. Mandatory if no serviceInstanceIds nor providerNames are specified. versions List&lt;Version&gt; no Requester is looking for service instances with any of the specified versions. alivesAt DateTime no Requester is looking for service instances that will be available at the specified moment of the future. metadataRequirementsList List&lt;MetadataRequirements&gt; no Requester is looking for service instances that are matching any of the specified metadata requirements. addressTypes List&lt;AddressType&gt; no Requester is looking for service instances with any of the specified address types. interfaceTemplateNames List&lt;InterfaceName&gt; no Requester is looking for service instances with any of the specified interface template names. interfacePropertyRequirementsList List&lt;MetadataRequirements&gt; no Requester is looking for service instances with interfaces that are matching any of the specified properties requirements. policies List&lt;SecurityPolicy&gt; no Requester is looking for service instances with any of the specified security policies."},{"location":"api/data-models/service-lookup-response/","title":"ServiceLookupResponse","text":"Field Type Description entries List&lt;ServiceLookupResult&gt; List of service instance results. count Number Number of returned service instances."},{"location":"api/data-models/service-lookup-result/","title":"ServiceLookupResult","text":"Field Type Description instanceId ServiceInstanceID Unique identifier of the service instance. provider SystemDescriptor Information about the service instance provider system. serviceDefinition ServiceDefinitionDescriptor Information about the service definition. version Version Version of the service instance. expiresAt DateTime The moment of the future from which the service instance will not be available. metadata Metadata Additional information about the service instance. interfaces List&lt;ServiceInterfaceDescriptor&gt; Available access interfaces of the service instance. createdAt DateTime Service instance was registered at this timestamp. updatedAt DateTime Service instance was modified at this timestamp."},{"location":"api/data-models/service-orchestration-flag/","title":"ServiceOrchestrationFlag","text":"<p>Specific String:Boolean pair to control the orchestration process. Possible values:</p> <ul> <li><code>MATCHMAKING</code>: If true orchestration process includes a matchmaking process in order to return only one matching service instance if any. If false, orchestration process returns all the matching service instances if any.</li> <li><code>ONLY_PREFERRED</code>: If true, orchestration process considers only those matching service instances that are provided by a preferred provider if any. If false, but preferred providers are specified and have matching service instances, then orchestration process considers only those service instances that are provided by a preferred provider. Otherwise, non-preferred providers are considered.</li> <li><code>ONLY_EXCLUSIVE</code>: If true, orchestration process considers only those matching service instances that allows exclusivity. It automatically results <code>MATCHMAKING:true</code> as well. If false, but exclusivity duration is specified and there are matching services with exclusivity allowed, then orchestration process considers only those service instances that allow exclusivity. Otherwise, service instances without exclusivity are considered.</li> <li><code>ALLOW_INTERCLOUD</code>: If true, orchestration process considers matching service instances from neighbor clouds when there are no local hits. Orchestrating from neighbor clouds automatically results <code>MATCHMAKING:true</code>. If false, orchestration process doesn't consider matching service instances from neighbor clouds when there are no local hits.</li> <li><code>ONLY_INTERCLOUD</code>: If true, orchestration process considers matching service instances only from the neighbor clouds. It automatically results <code>MATCHMAKING:true</code> as well. If false, orchestration process considers matching service instances from the local could in first hand and only considers matching service instances from the neighbor clouds when <code>ALLOW_INTERCLOUD:true</code>.</li> <li><code>ALLOW_TRANSLATION</code>: If true, orchestration process considers matching, but non-native (different interface) service instances when there are no native hits. It automatically results <code>MATCHMAKING:true</code> as well. If false, orchestration process considers only native matching service instances.</li> </ul>"},{"location":"api/data-models/service-orchestration-history-query-request/","title":"ServiceOrchestrationHistoryQueryRequest","text":"Field Type Mandatory Description pagination PageRequest no Paging information about the queried lock records. ids List&lt;UUID&gt; no Requester is looking for job records with any of the specified job identifiers. statuses List&lt;ServiceOrchestrationJobStatus&gt; no Requester is looking for job records with any of the specified job statuses. type ServiceOrchestrationType no Requester is looking for job records with the specified type. requesterSystems List&lt;SystemName&gt; no Requester is looking for job records with any of the specified requester systems. targetSystems List&lt;SystemName&gt; no Requester is looking for job records with any of the specified target systems. serviceDefinitions List&lt;ServiceName&gt; no Requester is looking for job records with any of the specified service definitions. subscriptionIds List&lt;UUID&gt; no Requester is looking for job records with any of the specified subscription identifiers."},{"location":"api/data-models/service-orchestration-history-response/","title":"ServiceOrchestrationHistoryResponse","text":"Field Type Description entries List&lt;ServiceOrchestrationJobResponse&gt; List of orchestration job records. count Number Total number of orchestration job records."},{"location":"api/data-models/service-orchestration-job-list-response/","title":"ServiceOrchestrationJobListResponse","text":"Field Type Description jobs List&lt;ServiceOrchestrationJobResponse&gt; List of orchestration jobs."},{"location":"api/data-models/service-orchestration-job-response/","title":"ServiceOrchestrationJobResponse","text":"Field Type Description id UUID Unique job identifier. status ServiceOrchestrationJobStatus Actual working state of the job. type ServiceOrchestrationType Type of orchestration. requesterSystem SystemName Name of the system that started the orchestration process. targetSystem SystemName Name of the system for which the orchestration is executed. serviceDefinition ServiceName Name of the service that the orchestration job is targeting. subscriptionId UUID Unique identifier of associated subscription record. message String Additional error or warning information. createdAt DateTime The job was created at this timestamp. startedAt DateTime The job was started at this timestamp. finishedAt DateTime The job was finished at this timestamp."},{"location":"api/data-models/service-orchestration-lock-list-request/","title":"ServiceOrchestrationLockListRequest","text":"Field Type Mandatory Description locks List&lt;ServiceOrchestrationLockRequest&gt; yes List of lock request details."},{"location":"api/data-models/service-orchestration-lock-list-response/","title":"ServiceOrchestrationLockListResponse","text":"Field Type Description entries List&lt;ServiceOrchestrationLockResponse&gt; List of lock records. count Number Total number of lock records."},{"location":"api/data-models/service-orchestration-lock-query-request/","title":"ServiceOrchestrationLockQueryRequest","text":"Field Type Mandatory Description pagination PageRequest no Paging information about the queried lock records. ids List&lt;Number&gt; no Requester is looking for lock records with any of the specified record identifiers. orchestrationJobIds List&lt;UUID&gt; no Requester is looking for lock records with any of the specified orchestration job identifiers. serviceInstanceIds List&lt;ServiceInstanceID&gt; no Requester is looking for lock records with any of the specified service instance identifiers. owner List&lt;SystemName&gt; no Requester is looking for lock records with any of the specified owner system names. expiresBefore DateTime no Requester is looking for lock records that expire before this timestamp. expiresAfter DateTime no Requester is looking for lock records that expire after this timestamp."},{"location":"api/data-models/service-orchestration-lock-request/","title":"ServiceOrchestrationLockRequest","text":"Field Type Mandatory Description serviceInstanceId ServiceInstanceID yes Service instance to be locked. owner SystemName yes The system the lock belongs to. expiresAt DateTime yes The lock will be active until this timestamp."},{"location":"api/data-models/service-orchestration-lock-response/","title":"ServiceOrchestrationLockResponse","text":"Field Type Description id Number Lock record unique ID. orchestrationJobId UUID ID of the associated orchestration job if any. serviceInstanceId ServiceInstanceID ID of the locked service instance. owner SystemName The system the lock belongs to. expiresAt DateTime The lock is active until this timestamp. temporary Boolean If true, the lock was made during an orchestration process and possibly will be released automatically within a short time (if service instance is not chosen to be reserved)."},{"location":"api/data-models/service-orchestration-notify-interface/","title":"ServiceOrchestrationNotifyInterface","text":"Field Type Mandatory Description protocol Protocol yes Communication protocol to be used for sending notification. properties PropertyMap yes Interface properties belonging to the specified protocol."},{"location":"api/data-models/service-orchestration-push-trigger-request/","title":"ServiceOrchestrationPushTriggerRequest","text":"Field Type Mandatory Description targetSystems List&lt;SystemName&gt; no List of target consumer systems. subscriptionIds List&lt;UUID&gt; no List of subscription identifiers."},{"location":"api/data-models/service-orchestration-request/","title":"ServiceOrchestrationRequest","text":"Field Type Mandatory Description serviceRequirement ServiceOrchestrationRequiremet yes Details of the targeted service. orchestrationFlags List&lt;ServiceOrchestrationFlag&gt; no List of orchestration flags to control the orchestration process. qosRequirements PropertyMap no Quality of service requirements. exclusivityDuration Number no The interval the service wanted to be exclusive."},{"location":"api/data-models/service-orchestration-requirement/","title":"ServiceOrchestrationRequirement","text":"Field Type Mandatory Description serviceDefinition ServiceName yes/no The required service definition name. Mandatory in case of dynamic strategy. operations List&lt;ServiceOperationName&gt; yes/no The required service operation names. Exactly one operation must be defined, when the following orchestration flags are true: <code>ONLY_INTERCLOUD</code>, <code>ALLOW_INTERCLOUD</code>, <code>ALLOW_TRANSLATION</code> versions List&lt;Version&gt; no The required service versions. alivesAt DateTime no The orchestrated service must be alive by this time. metadataRequirements List&lt;MetadataRequirements&gt; no The orchestrated service must meet at least one of the specified metadata requirement. interfaceTemplateNames List&lt;InterfaceName&gt; no The orchestrated service must offer at least one from the specified interface template names. interfaceAddressTypes List&lt;AddressType&gt; no The orchestrated service must offer at least one from the specified interface address types. interfacePropertyRequirements List&lt;MetadataRequirements&gt; no The orchestrated service must offer at least one interface that meets with one of the specified property requirements. securityPolicies List&lt;SecurityPolicy&gt; no The orchestrated service must meet one of the specified security policies. preferredProviders List&lt;SystemName&gt; no Provider system names specified here have priority."},{"location":"api/data-models/service-orchestration-response/","title":"ServiceOrchestrationResponse","text":"Field Type Description results List&lt;ServiceOrchestrationResult&gt; List of matching service instances. warnings List&lt;String&gt; Warning message list."},{"location":"api/data-models/service-orchestration-result/","title":"ServiceOrchestrationResult","text":"Field Type Description serviceInstanceId ServiceInstanceID Unique identifier of the service instance. providerName SystemName Unique identifier of the provider system. serviceDefinition ServiceName Unique identifier of the service definition. version Version Version of the service instance. cloudIdentitifer CloudIdentifier Unique identifier of the provider cloud. aliveUntil DateTime The service instance is available until this time. exclusiveUntil DateTime The service instance is reserved until this time. metadata Metadata Additional information about the service instance. interfaces List&lt;ServiceInterfaceDescriptor&gt; Available access interfaces of the service instance. authorizationToken AuthorizationTokenMap Generated authorization tokens if any."},{"location":"api/data-models/service-orchestration-subscriber-list-request/","title":"ServiceOrchestrationSubscriberListRequest","text":"Field Type Mandatory Description subscriptions List&lt;ServiceOrchestrationSubscriberRequest&gt; yes List of subscription request details."},{"location":"api/data-models/service-orchestration-subscriber-request/","title":"ServiceOrchestrationSubscriberRequest","text":"Field Type Mandatory Description targetSystemName SystemName yes The targeted consumer system. orchestrationRequest ServiceOrchestrationRequest yes Orchestration request details. notifyInterface ServiceOrchestrationNotifyInterface yes Interface details for sending push notifications. duration Number no The interval in seconds while the subscription is active."},{"location":"api/data-models/service-orchestration-subscription-list-response/","title":"ServiceOrchestrationSubscriptionListResponse","text":"Field Type Description entries List&lt;ServiceOrchestrationSubscriptionResponse&gt; List of subscription records. count Number Total number of subscription records."},{"location":"api/data-models/service-orchestration-subscription-query-request/","title":"ServiceOrchestrationSubscriptionQueryRequest","text":"Field Type Mandatory Description pagination PageRequest no Paging information about the queried subscription records. ownerSystems List&lt;SystemName&gt; no Requester is looking for subscriptions with any of the specified creator system names. targetSystems List&lt;SystemName&gt; no Requester is looking for subscriptions with any of the specified target consumer system names. serviceDefinitions List&lt;ServiceName&gt; no Requester is looking for subscriptions with any of the specified service definition names."},{"location":"api/data-models/service-orchestration-subscription-request/","title":"ServiceOrchestrationSubscriptionRequest","text":"Field Type Mandatory Description orchestrationRequest ServiceOrchestrationRequest yes Orchestration request details. notifyInterface ServiceOrchestrationNotifyInterface yes Interface details for sending push notifications. duration Number no The interval while the subscription is active."},{"location":"api/data-models/service-orchestration-subscription-response/","title":"ServiceOrchestrationSubscriptionResponse","text":"Field Type Description id UUID Unique identifier of the subscription record. ownerSystemName SystemName Unique identifier of the creator system. targetSystemName SystemName Unique identifier of the subscribed system. orchestrationForm ServiceOrchestartionRequest Orchestration request details. notifyInterface ServiceOrchestrationNotifyInterface Interface details for sending push notifications. expiredAt DateTime The subscription is active until this time. createdAt DateTime The subscription was created at this timestamp."},{"location":"api/data-models/service-query-request/","title":"ServiceQueryRequest","text":"Field Type Mandatory Description pagination PageRequest no Paging information about the queried service instances. instanceIds List&lt;ServiceInstanceID&gt; no (yes) Requester is looking for service instances with any of the specified identifiers. Mandatory if no providerNames nor serviceDefinitionNames are specified. providerNames List&lt;SystemName&gt; no (yes) Requester is looking for service instances that are provided by any of the specified systems. Mandatory if no serviceInstanceIds nor serviceDefinitionNames are specified. serviceDefinitionNames List&lt;ServiceName&gt; no (yes) Requester is looking for service instances with any of the specified service definition names. Mandatory if no serviceInstanceIds nor providerNames are specified. versions List&lt;Version&gt; no Requester is looking for service instances with any of the specified versions. alivesAt DateTime no Requester is looking for service instances that will be available at the specified moment of the future. metadataRequirementsList List&lt;MetadataRequirements&gt; no Requester is looking for service instances that are matching any of the specified metadata requirements. addressTypes List&lt;AddressType&gt; no Requester is looking for service instances with interfaces whose access addresses are matching any of these types. interfaceTemplateNames List&lt;InterfaceName&gt; no Requester is looking for service instances with any of the specified interface template names. interfacePropertyRequirementsList List&lt;MetadataRequirements&gt; no Requester is looking for service instances with interfaces that are matching any of the specified properties requirements. policies List&lt;SecurityPolicy&gt; no Requester is looking for service instances with any of the specified security policies."},{"location":"api/data-models/service-registration-request/","title":"ServiceRegistrationRequest","text":"Field Type Mandatory Description serviceDefinitionName ServiceName yes The service definition of the instance. version Version no Version of the service instance. expiresAt DateTime no The moment of the future from which the service instance will not be available. metadata Metadata no Additional information about the service instance. interfaces List&lt;ServiceInterfaceRequest&gt; yes Available access interfaces of the service instance."},{"location":"api/data-models/service-registration-response/","title":"ServiceRegistrationResponse","text":"Field Type Description instanceId ServiceInstanceID Unique identifier of the registered service instance. provider SystemDescriptor Information about the service instance provider system. serviceDefinition ServiceDefinitionDescriptor Information about the service definition. version Version Version of the service instance. expiresAt DateTime The moment of the future from which the service instance will not be available. metadata Metadata Additional information about the registered service instance. interfaces List&lt;ServiceInterfaceDescriptor&gt; Available access interfaces of the service instance. createdAt DateTime Service instance was registered at this timestamp. updatedAt DateTime Service instance was modified at this timestamp."},{"location":"api/data-models/service-request/","title":"ServiceRequest","text":"Field Type Mandatory Description systemName SystemName yes The provider of the instance. serviceDefinitionName ServiceName yes The service definition of the instance. version Version no Version of the service instance. expiresAt DateTime no The moment of the future from which the service instance will not be available. metadata Metadata no Additional information about the service instance. interfaces List&lt;ServiceInterfaceRequest&gt; yes Available access interfaces of the service instance."},{"location":"api/data-models/service-update-list-request/","title":"ServiceUpdateListRequest","text":"Field Type Mandatory Description instances List&lt;ServiceUpdateRequest&gt; yes A list of service instances."},{"location":"api/data-models/service-update-request/","title":"ServiceUpdateRequest","text":"Field Type Mandatory Description instanceId ServiceInstanceID yes The unique identifier of the service instance. expiresAt DateTime no The moment of the future from which the service instance will not be available. metadata Metadata no Additional information about the service instance. interfaces List&lt;ServiceInterfaceRequest&gt; yes Available access interfaces of the service instance."},{"location":"api/data-models/system-descriptor/","title":"SystemDescriptor","text":"Field Type Description name SystemName Unique identifier of the system. metadata Metadata Additional information about the system. version Version Version of the system. addresses List&lt;AddressDescriptor&gt; Different kind of addresses of the system. device DeviceDescriptor Information about the device on which the system is running. createdAt DateTime System was registered at this timestamp. updatedAt DateTime System was modified at this timestamp."},{"location":"api/data-models/system-list-request/","title":"SystemListRequest","text":"Field Type Mandatory Description systems List&lt;SystemRequest&gt; yes A list of systems."},{"location":"api/data-models/system-list-response/","title":"SystemListResponse","text":"Field Type Description entries List&lt;SystemDescriptor&gt; A list of systems. count Number The total number of corresponding systems."},{"location":"api/data-models/system-lookup-request/","title":"SystemLookupRequest","text":"Field Type Mandatory Description systemNames List&lt;SystemName&gt; no Requester is looking for systems with any of the specified names. addresses List&lt;Address&gt; no Requester is looking for systems with any of the specified addresses. addressType AddressType no Requester is looking for systems with the specified type of address. metadataRequirementsList List&lt;MetadataRequirements&gt; no Requester is looking for systems that are matching any of the specified metadata requirements. versions List&lt;Version&gt; no Requester is looking for systems with any of the specified versions. deviceNames List&lt;DeviceName&gt; no Requester is looking for systems that are running on any of the specified devices."},{"location":"api/data-models/system-lookup-response/","title":"SystemLookupResponse","text":"Field Type Description entries List&lt;SystemLookupResult&gt; List of system results. count Number Number of returned systems."},{"location":"api/data-models/system-lookup-result/","title":"SystemLookupResult","text":"Field Type Description name SystemName Unique identifier of the system. metadata Metadata Additional information about the system. version Version Version of the system. addresses List&lt;AddressDescriptor&gt; Different kind of addresses of the system. device DeviceDescriptor Information about the device on which the system is running createdAt DateTime System was registered at this timestamp. updatedAt DateTime System was modified at this timestamp."},{"location":"api/data-models/system-query-request/","title":"SystemQueryRequest","text":"Field Type Mandatory Description pagination PageRequest no Paging information about the queried systems. systemNames List&lt;SystemName&gt; no Requester is looking for systems with any of the specified names. addresses List&lt;Address&gt; no Requester is looking for systems with any of the specified addresses. addressType AddressType no Requester is looking for systems with the specified type of address. metadataRequirementsList List&lt;MetadataRequirements&gt; no Requester is looking for systems that are matching any of the specified metadata requirements. versions List&lt;Version&gt; no Requester is looking for systems with any of the specified versions. deviceNames List&lt;DeviceName&gt; no Requester is looking for systems that are running on any of the specified devices."},{"location":"api/data-models/system-registration-request/","title":"SystemRegistrationRequest","text":"Field Type Mandatory Description metadata Metadata no Additional information about the system. version Version no Version of the system. addresses List&lt;Address&gt; yes Different kind of addresses of the system. deviceName DeviceName no Unique identifier of the device on which the system is running."},{"location":"api/data-models/system-registration-response/","title":"SystemRegistrationResponse","text":"Field Type Description name SystemName Unique identifier of the registered system. metadata Metadata Additional information about the registered system. version Version Version of the registered system. addresses List&lt;AddressDescriptor&gt; Different kind of addresses of the registered system. device DeviceDescriptor Information about the device on which the system is running. createdAt DateTime System was registered at this timestamp. updatedAt DateTime System was modified at this timestamp."},{"location":"api/data-models/system-request/","title":"SystemRequest","text":"Field Type Mandatory Description name SystemName yes The name of the system. metadata Metadata no Additional information about the system. version Version no Version of the system. addresses List&lt;Address&gt; yes Different kinds of addresses of the system. deviceName DeviceName no Unique identifier of the device on which the system is running."},{"location":"api/general/general-management-generic-http/","title":"generalManagement IDD","text":"<p>generic_http &amp; generic_https</p>"},{"location":"api/general/general-management-generic-http/#overview","title":"Overview","text":"<p>This page describes the generic_http and generic_https service interface of general-management which allows (with operator role or proper permissions) to get some information about the hosting system\u2019s behavior, such as log entries and configuration settings.</p> <p>Hereby the Interface Design Description (IDD) is provided to the generalManagement \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/general/general-management-generic-http/#interface-description","title":"Interface Description","text":""},{"location":"api/general/general-management-generic-http/#get-log","title":"get-log","text":"<p>The service operation request requires an identity related header or certificate and a LogRequest JSON encoded body.</p> <pre><code>POST /&lt;system-specific-path&gt;/general/mgmt/logs HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n  \"pagination\": {\n    \"page\": 0,\n    \"size\": 5,\n    \"direction\": \"ASC\",\n    \"sortField\": \"entryDate\"\n  },\n  \"from\": \"2025-03-07T00:00:00Z\",\n  \"to\": \"2025-03-08T00:00:00Z\",\n  \"severity\": \"INFO\"\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response also contains an LogResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"logId\": \"1d61efc1-fb39-11ef-b55e-2cf05d74cdac\",\n      \"entryDate\": \"2025-03-07T09:46:59.203Z\",\n      \"logger\": \"eu.arrowhead.authentication.AuthenticationMain\",\n      \"severity\": \"INFO\",\n      \"message\": \"Starting AuthenticationMain using Java 21.0.5 with PID 13072 (omitted)\"\n    },\n    {\n      \"logId\": \"1d9b9d62-fb39-11ef-b55e-2cf05d74cdac\",\n      \"entryDate\": \"2025-03-07T09:46:59.212Z\",\n      \"logger\": \"eu.arrowhead.authentication.AuthenticationMain\",\n      \"severity\": \"INFO\",\n      \"message\": \"No active profile set, falling back to 1 default profile: \\\"default\\\"\"\n    },\n    {\n      \"logId\": \"1e2d2f03-fb39-11ef-b55e-2cf05d74cdac\",\n      \"entryDate\": \"2025-03-07T09:47:00.973Z\",\n      \"logger\": \"eu.arrowhead.common.http.filter.authorization.ManagementServiceFilter\",\n      \"severity\": \"INFO\",\n      \"message\": \"ManagementServiceFilter is active\"\n    },\n    {\n      \"logId\": \"1e4cec04-fb39-11ef-b55e-2cf05d74cdac\",\n      \"entryDate\": \"2025-03-07T09:47:01.058Z\",\n      \"logger\": \"eu.arrowhead.authentication.http.filter.InternalAuthenticationFilter\",\n      \"severity\": \"INFO\",\n      \"message\": \"InternalAuthenticationFilter is active\"\n    },\n    {\n      \"logId\": \"1f529c35-fb39-11ef-b55e-2cf05d74cdac\",\n      \"entryDate\": \"2025-03-07T09:47:02.897Z\",\n      \"logger\": \"eu.arrowhead.authentication.quartz.CleanerConfig$$SpringCGLIB$$0\",\n      \"severity\": \"INFO\",\n      \"message\": \"Cleaner job is initialized.\"\n    }\n  ],\n  \"count\": 26\n}\n\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Invalid time interval\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /&lt;system-name&gt;/general/mgmt/logs\"\n}\n</code></pre>"},{"location":"api/general/general-management-generic-http/#get-config","title":"get-config","text":"<p>The service operation request requires an identity related header or certificate and a List&lt;String&gt; as query parameter, which contains the names of the desired configuration properties.</p> <pre><code>GET /&lt;system-specific-path&gt;/general/mgmt/get-config?keys=management.policy&amp;keys=max.page.size HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response also contains an ConfigResponse JSON encoded body.</p> <pre><code>{\n  \"map\": {\n    \"management.policy\": \"authorization\",\n    \"max.page.size\": \"1000\"\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Invalid identity token\",\n  \"errorCode\": 401,\n  \"exceptionType\": \"AUTH\"\n}\n</code></pre>"},{"location":"api/general/general-management-generic-mqtt/","title":"generalManagement IDD","text":"<p>generic_mqtt &amp; generic_mqtts</p>"},{"location":"api/general/general-management-generic-mqtt/#overview","title":"Overview","text":"<p>This page describes the generic_mqtt and generic_mqtts service interface of general-management which allows (with operator role or proper permissions) to get some information about the hosting system\u2019s behavior, such as log entries and configuration settings.</p> <p>Hereby the Interface Design Description (IDD) is provided to the generalManagement \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/general/general-management-generic-mqtt/#interface-description","title":"Interface Description","text":""},{"location":"api/general/general-management-generic-mqtt/#get-log","title":"get-log","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a LogRequest.</p> <pre><code>Topic: arrowhead/&lt;system-specific-part&gt;/general/management/get-log\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": \"&lt;0|1|2&gt;\",\n  \"payload\": {\n    \"pagination\": {\n      \"page\": 0,\n      \"size\": 5,\n      \"direction\": \"ASC\",\n      \"sortField\": \"entryDate\"\n    },\n    \"from\": \"2025-03-07T00:00:00Z\",\n    \"to\": \"2025-03-08T00:00:00Z\",\n    \"severity\": \"INFO\"\n  }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is a LogResponse.</p> <pre><code>{\n  \"status\": \"200\",\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"entries\": [\n      {\n        \"logId\": \"1d61efc1-fb39-11ef-b55e-2cf05d74cdac\",\n        \"entryDate\": \"2025-03-07T09:46:59.203Z\",\n        \"logger\": \"eu.arrowhead.authentication.AuthenticationMain\",\n        \"severity\": \"INFO\",\n        \"message\": \"Starting AuthenticationMain using Java 21.0.5 with PID 13072 (omitted)\"\n      },\n      {\n        \"logId\": \"1d9b9d62-fb39-11ef-b55e-2cf05d74cdac\",\n        \"entryDate\": \"2025-03-07T09:46:59.212Z\",\n        \"logger\": \"eu.arrowhead.authentication.AuthenticationMain\",\n        \"severity\": \"INFO\",\n        \"message\": \"No active profile set, falling back to 1 default profile: \\\"default\\\"\"\n      },\n      {\n        \"logId\": \"1e2d2f03-fb39-11ef-b55e-2cf05d74cdac\",\n        \"entryDate\": \"2025-03-07T09:47:00.973Z\",\n        \"logger\": \"eu.arrowhead.common.http.filter.authorization.ManagementServiceFilter\",\n        \"severity\": \"INFO\",\n        \"message\": \"ManagementServiceFilter is active\"\n      },\n      {\n        \"logId\": \"1e4cec04-fb39-11ef-b55e-2cf05d74cdac\",\n        \"entryDate\": \"2025-03-07T09:47:01.058Z\",\n        \"logger\": \"eu.arrowhead.authentication.http.filter.InternalAuthenticationFilter\",\n        \"severity\": \"INFO\",\n        \"message\": \"InternalAuthenticationFilter is active\"\n      },\n      {\n        \"logId\": \"1f529c35-fb39-11ef-b55e-2cf05d74cdac\",\n        \"entryDate\": \"2025-03-07T09:47:02.897Z\",\n        \"logger\": \"eu.arrowhead.authentication.quartz.CleanerConfig$$SpringCGLIB$$0\",\n        \"severity\": \"INFO\",\n        \"message\": \"Cleaner job is initialized.\"\n      }\n    ],\n    \"count\": 26\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": \"400\",\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"Invalid time interval\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"arrowhead/authentication/general/management/get-log\"\n  }\n}\n</code></pre>"},{"location":"api/general/general-management-generic-mqtt/#get-config","title":"get-config","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a List&lt;String&gt;, which contains the names of the desired configuration properties.</p> <pre><code>Topic: arrowhead/&lt;system-specific-part&gt;/general/management/get-config\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": \"&lt;0|1|2&gt;\",\n  \"payload\": [ \"management.policy\", \"max.page.size\" ]\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is a ConfigResponse.</p> <pre><code>{\n  \"status\": \"200\",\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"map\": {\n      \"management.policy\": \"authorization\",\n      \"max.page.size\": \"1000\"\n    }\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": \"401\",\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"Invalid identity token\",\n    \"errorCode\": 401,\n    \"exceptionType\": \"AUTH\"\n  }\n}\n</code></pre>"},{"location":"api/serviceorchestration/service-orchestration-generic-http_dynamic/","title":"serviceOrchestration IDD (dynamic strategy)","text":"<p>generic_http &amp; generic_https</p>"},{"location":"api/serviceorchestration/service-orchestration-generic-http_dynamic/#overview","title":"Overview","text":"<p>This page describes the generic_http and generic_https service interface of serviceOrchestration, which provides runtime (late) binding between application systems. </p> <p>Hereby the Interface Design Description (IDD) is provided to the serviceOrchestration \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/serviceorchestration/service-orchestration-generic-http_dynamic/#interface-description","title":"Interface Description","text":""},{"location":"api/serviceorchestration/service-orchestration-generic-http_dynamic/#pull","title":"pull","text":"<p>The service operation request requires an identity related header or certificate and a ServiceOrchestrationRequest JSON encoded body.</p> <pre><code>POST /serviceorchestration/orchestration/pull HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n   \"serviceRequirement\": {\n      \"serviceDefinition\": \"kelvinInfo\",\n      \"operations\": [\n         \"query-temperature\"\n      ],\n      \"versions\": [],\n      \"alivesAt\": \"2025-10-05T11:35:14Z\",\n      \"metadataRequirements\": [],\n      \"interfaceTemplateNames\": [\n         \"generic_https\"\n      ],\n      \"interfaceAddressTypes\": [\n         \"HOSTNAME\",\n         \"IPV4\"\n      ],\n      \"interfacePropertyRequirements\": [],\n      \"securityPolicies\": [\n         \"TIME_LIMITED_TOKEN_AUTH\"\n      ],\n      \"preferredProviders\": []\n   },\n   \"orchestrationFlags\": {\n      \"MATCHMAKING\": \"true\",\n      \"ALLOW_TRANSLATION\": \"true\",\n      \"ONLY_PREFERRED\": \"false\",\n      \"ONLY_EXCLUSIVE\": \"false\",\n      \"ALLOW_INTERCLOUD\": \"false\",\n      \"ONLY_INTERCLOUD\": \"false\"\n   },\n   \"qosRequirements\": {\n      \"maxLatencyMs\": \"10\"\n   },\n   \"exclusivityDuration\": 600\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and with a ServiceOrchestrationResponse JSON encoded body.</p> <pre><code>{\n   \"results\": [\n      {\n         \"serviceInstanceId\": \"TemperatureProvider2|kelvinInfo|1.0.0\",\n         \"providerName\": \"TemperatureProvider2\",\n         \"serviceDefinitition\": \"kelvinInfo\",\n         \"version\": \"1.0.0\",\n         \"cloudIdentitifer\": \"LOCAL\",\n         \"aliveUntil\": \"2028-11-08T10:21:11Z\",\n         \"exclusiveUntil\": \"2025-10-05T11:35:14Z\",\n         \"metadata\": {\n            \"marginOfError\": 0.5\n         },\n         \"interfaces\": [\n            {\n               \"templateName\": \"generic_https\",\n               \"protocol\": \"https\",\n               \"policy\": \"TIME_LIMITED_TOKEN_AUTH\",\n               \"properties\": {\n                  \"accessAddresses\": [\n                     \"192.168.56.116\",\n                     \"tp2.greenhouse.com\"\n                  ],\n                  \"accessPort\": 8080,\n                  \"operations\": {\n                     \"query-temperature\": {\n                        \"path\": \"/query\",\n                        \"method\": \"GET\"\n                     }\n                  },\n                  \"basePath\": \"/kelvin\"\n               }\n            }\n         ],\n         \"authorizationTokens\": {\n            \"TIME_LIMITED_TOKEN_AUTH\": {\n               \"query-temperature\": {\n                  \"tokenType\": \"TIME_LIMITED_TOKEN\",\n                  \"targetType\": \"SERVICE_DEF\",\n                  \"token\": \"dsalefb521vdjkdsae633\",\n                  \"expiresAt\": \"2025-10-05T11:35:14Z\"\n               }\n            }\n         }\n      }\n   ],\n   \"warnings\": [\n      \"part_time_exclusivity\"\n   ]\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"QoS requirements are present, but QoS support is not enabled\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceorchestration/orchestration/pull\"\n}\n</code></pre>"},{"location":"api/serviceorchestration/service-orchestration-generic-http_dynamic/#subscribe","title":"subscribe","text":"<p>The service operation request requires an identity related header or certificate and a ServiceOrchestrationSubscriptionRequest JSON encoded body.</p> <pre><code>POST /serviceorchestration/orchestration/subscribe?trigger=&lt;trigger-value&gt; HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n   \"orchestrationRequest\": {\n      \"serviceRequirement\": {\n         \"serviceDefinition\": \"kelvinInfo\",\n         \"operations\": [\n            \"query-temperature\"\n         ],\n         \"versions\": [\n\n         ],\n         \"alivesAt\": \"2025-10-05T11:35:14Z\",\n         \"metadataRequirements\": [\n\n         ],\n         \"interfaceTemplateNames\": [\n            \"generic_https\"\n         ],\n         \"interfaceAddressTypes\": [\n            \"HOSTNAME\",\n            \"IPV4\"\n         ],\n         \"interfacePropertyRequirements\": [\n\n         ],\n         \"securityPolicies\": [\n            \"TIME_LIMITED_TOKEN_AUTH\"\n         ],\n         \"preferredProviders\": [\n\n         ]\n      },\n      \"orchestrationFlags\": {\n         \"MATCHMAKING\": \"true\",\n         \"ALLOW_TRANSLATION\": \"true\",\n         \"ONLY_PREFERRED\": \"false\",\n         \"ONLY_EXCLUSIVE\": \"false\",\n         \"ALLOW_INTERCLOUD\": \"false\",\n         \"ONLY_INTERCLOUD\": \"false\"\n      },\n      \"qosRequirements\": {\n         \"maxLatencyMs\": \"10\"\n      },\n      \"exclusivityDuration\": 600\n   },\n   \"notifyInterface\": {\n      \"protocol\": \"mqtt\",\n      \"properties\": {\n         \"topic\": \"arrowhead/orchestration-push\"\n      }\n   },\n   \"duration\": 100000\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and an existing subscription was overwritten or <code>201</code> if the subscription was newly created. The response also contains a UUID text body.</p> <pre><code>d4d61873-07db-4e93-a16e-9465852bdabf\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Unsupported notify protocol: CoAP\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceorchestration/orchestration/subscribe\"\n}\n</code></pre>"},{"location":"api/serviceorchestration/service-orchestration-generic-http_dynamic/#unsubscribe","title":"unsubscribe","text":"<p>The service operation request requires an identity related header or certificate and a subscription UUID as path parameter.</p> <pre><code>DELETE /serviceorchestration/orchestration/unsubscribe/d4d61873-07db-4e93-a16e-9465852bdabf HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and an existing subscription was removed and <code>204</code> if no matching subscription was found. The success response does not contain any response body.</p> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Invalid subscription id\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"DELETE /serviceorchestration/orchestration/unsubscribe\"\n}\n</code></pre>"},{"location":"api/serviceorchestration/service-orchestration-generic-mqtt_dynamic/","title":"serviceOrchestration IDD (dynamic strategy)","text":"<p>generic_mqtt &amp; generic_mqtts</p>"},{"location":"api/serviceorchestration/service-orchestration-generic-mqtt_dynamic/#overview","title":"Overview","text":"<p>This page describes the generic_mqtt and generic_mqtts service interface of serviceOrchestration, which provides runtime (late) binding between application systems.</p> <p>Hereby the Interface Design Description (IDD) is provided to the serviceOrchestration \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/serviceorchestration/service-orchestration-generic-mqtt_dynamic/#interface-description","title":"Interface Description","text":""},{"location":"api/serviceorchestration/service-orchestration-generic-mqtt_dynamic/#pull","title":"pull","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a ServiceOrchestrationRequest. </p> <pre><code>Topic: arrowhead/serviceorchestration/orchestration/pull\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;authentication-data&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": &lt;0|1|2&gt;,\n   \"payload\": {\n      \"serviceRequirement\": {\n         \"serviceDefinition\": \"kelvinInfo\",\n         \"operations\": [\n            \"query-temperature\"\n         ],\n         \"versions\": [\n\n         ],\n         \"alivesAt\": \"2025-10-05T11:35:14Z\",\n         \"metadataRequirements\": [\n\n         ],\n         \"interfaceTemplateNames\": [\n            \"generic_https\"\n         ],\n         \"interfaceAddressTypes\": [\n            \"HOSTNAME\",\n            \"IPV4\"\n         ],\n         \"interfacePropertyRequirements\": [\n\n         ],\n         \"securityPolicies\": [\n            \"TIME_LIMITED_TOKEN_AUTH\"\n         ],\n         \"preferredProviders\": [\n\n         ]\n      },\n      \"orchestrationFlags\": {\n         \"MATCHMAKING\": \"true\",\n         \"ALLOW_TRANSLATION\": \"true\",\n         \"ONLY_PREFERRED\": \"false\",\n         \"ONLY_EXCLUSIVE\": \"false\",\n         \"ALLOW_INTERCLOUD\": \"false\",\n         \"ONLY_INTERCLOUD\": \"false\"\n      },\n      \"qosRequirements\": {\n         \"maxLatencyMs\": \"10\"\n      },\n      \"exclusivityDuration\": 600\n   }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is a ServiceOrchestrationResponse.</p> <pre><code>{\n   \"status\": 200,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TempConsumer\",\n   \"payload\": {\n      \"results\": [\n         {\n            \"serviceInstanceId\": \"TemperatureProvider2|kelvinInfo|1.0.0\",\n            \"providerName\": \"TemperatureProvider2\",\n            \"serviceDefinitition\": \"kelvinInfo\",\n            \"version\": \"1.0.0\",\n            \"cloudIdentitifer\": \"LOCAL\",\n            \"aliveUntil\": \"2028-11-08T10:21:11Z\",\n            \"exclusiveUntil\": \"2025-10-05T11:35:14Z\",\n            \"metadata\": {\n               \"marginOfError\":0.5\n            },\n            \"interfaces\": [\n               {\n                  \"templateName\": \"generic_https\",\n                  \"protocol\": \"https\",\n                  \"policy\": \"TIME_LIMITED_TOKEN_AUTH\",\n                  \"properties\": {\n                     \"accessAddresses\": [\n                        \"192.168.56.116\",\n                        \"tp2.greenhouse.com\"\n                     ],\n                     \"accessPort\": 8080,\n                     \"operations\": {\n                        \"query-temperature\": {\n                           \"path\": \"/query\",\n                           \"method\": \"GET\"\n                        }\n                     },\n                     \"basePath\": \"/kelvin\"\n                  }\n               }\n            ],\n            \"authorizationTokens\": {\n               \"TIME_LIMITED_TOKEN_AUTH\": {\n                  \"query-temperature\": {\n                     \"tokenType\": \"TIME_LIMITED_TOKEN\",\n                     \"targetType\": \"SERVICE_DEF\",\n                     \"token\": \"dsalefb521vdjkdsae633\",\n                     \"expiresAt\": \"2025-10-05T11:35:14Z\"\n                  }\n               }\n            }\n         }\n      ],\n      \"warnings\": [\n         \"part_time_exclusivity\"\n      ]\n   }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 400,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TempConsumer\",\n   \"payload\": {\n      \"errorMessage\": \"QoS requirements are present, but QoS support is not enabled\",\n      \"errorCode\": 400,\n      \"exceptionType\": \"INVALID_PARAMETER\",\n      \"origin\": \"arrowhead/serviceorchestration/orchestration/pull\"\n   }\n}\n</code></pre>"},{"location":"api/serviceorchestration/service-orchestration-generic-mqtt_dynamic/#subscribe","title":"subscribe","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a ServiceOrchestrationSubscriptionRequest. Optionally a <code>trigger</code> parameter can be provided with a Boolean value which if true, then the orchestration process also will be executed.</p> <pre><code>Topic: arrowhead/serviceorchestration/orchestration/subscribe\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;authentication-data&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": &lt;0|1|2&gt;,\n   \"params\": {\n      \"trigger\": true\n   },\n   \"payload\": {\n      \"orchestrationRequest\": {\n         \"serviceRequirement\": {\n            \"serviceDefinition\": \"kelvinInfo\",\n            \"operations\": [\n               \"query-temperature\"\n            ],\n            \"versions\": [\n\n            ],\n            \"alivesAt\": \"2025-10-05T11:35:14Z\",\n            \"metadataRequirements\": [\n\n            ],\n            \"interfaceTemplateNames\": [\n               \"generic_https\"\n            ],\n            \"interfaceAddressTypes\": [\n               \"HOSTNAME\",\n               \"IPV4\"\n            ],\n            \"interfacePropertyRequirements\": [\n\n            ],\n            \"securityPolicies\": [\n               \"TIME_LIMITED_TOKEN_AUTH\"\n            ],\n            \"preferredProviders\": [\n\n            ]\n         },\n         \"orchestrationFlags\": {\n            \"MATCHMAKING\": \"true\",\n            \"ALLOW_TRANSLATION\": \"true\",\n            \"ONLY_PREFERRED\": \"false\",\n            \"ONLY_EXCLUSIVE\": \"false\",\n            \"ALLOW_INTERCLOUD\": \"false\",\n            \"ONLY_INTERCLOUD\": \"false\"\n         },\n         \"qosRequirements\": {\n            \"maxLatencyMs\": \"10\"\n         },\n         \"exclusivityDuration\": 600\n      },\n      \"notifyInterface\": {\n         \"protocol\": \"mqtt\",\n         \"properties\": {\n            \"topic\":\"arrowhead/orchestration-push\"\n         }\n      },\n      \"duration\": 100000\n   }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is a UUID.</p> <pre><code>{\n   \"status\": 200,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TempConsumer\",\n   \"payload\": \"d4d61873-07db-4e93-a16e-9465852bdabf\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 400,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TempConsumer\",\n   \"payload\": {\n      \"errorMessage\": \"Unsupported notify protocol: CoAP\",\n      \"errorCode\": 400,\n      \"exceptionType\": \"INVALID_PARAMETER\",\n      \"origin\": \"arrowhead/serviceorchestration/orchestration/subscribe\"\n   }\n}\n</code></pre>"},{"location":"api/serviceorchestration/service-orchestration-generic-mqtt_dynamic/#unsubscribe","title":"unsubscribe","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a UUID.</p> <pre><code>Topic: arrowhead/serviceorchestration/orchestration/unsubscribe\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;authentication-data&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": \"&lt;0|1|2&gt;\",\n   \"payload\": \"d4d61873-07db-4e93-a16e-9465852bdabf\"\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully and an existing subscription was removed and <code>204</code> if no matching record was found. </p> <pre><code>{\n  \"status\": &lt;status-code&gt;,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"TempConsumer\",\n  \"payload\": \"\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 400,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TempConsumer\",\n   \"payload\": {\n      \"errorMessage\": \"Invalid subscription id\",\n      \"errorCode\": 400,\n      \"exceptionType\": \"INVALID_PARAMETER\",\n      \"origin\": \"arrowhead/serviceorchestration/orchestration/unsubscribe\"\n   }\n}\n</code></pre>"},{"location":"api/serviceorchestration/service-orchestration-history-management-generic-http_dynamic/","title":"serviceOrchestrationHistoryManagement IDD (dynamic strategy)","text":"<p>generic_http &amp; generic_https</p>"},{"location":"api/serviceorchestration/service-orchestration-history-management-generic-http_dynamic/#overview","title":"Overview","text":"<p>This page describes the generic_http and generic_https service interface of serviceOrchestrationHistoryManagement, which enables systems to gather information about the performed orchestration processes.</p> <p>Hereby the Interface Design Description (IDD) is provided to the serviceOrchestrationHistoryManagement \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/serviceorchestration/service-orchestration-history-management-generic-http_dynamic/#interface-description","title":"Interface Description","text":""},{"location":"api/serviceorchestration/service-orchestration-history-management-generic-http_dynamic/#query","title":"query","text":"<p>The service operation request requires an identity related header or certificate and a ServiceOrchestrationHistoryQueryRequest JSON encoded body.</p> <pre><code>POST /serviceorchestration/orchestration/mgmt/history/query HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n  \"pagination\": {\n    \"page\": 0,\n    \"size\": 10,\n    \"direction\": \"ASC\",\n    \"sortField\": \"createdAt\"\n  },\n  \"ids\": [\n    \"5cf0f11a-6bea-46c7-8550-403c96d27bbc\"\n  ],\n  \"statuses\": [\n    \"PENDING\", \"IN_PROGRESS\"\n  ],\n  \"type\": \"PUSH\",\n  \"requesterSystems\": [\n    \"TemperatureManager\"\n  ],\n  \"targetSystems\": [\n    \"TemperatureConsumer\"\n  ],\n  \"serviceDefinitions\": [\n    \"kelvinInfo\"\n  ],\n  \"subscriptionIds\": [\n    \"3a07c069-e070-4831-a5ad-5307c112354f\"\n  ]\n}\n\n</code></pre> <p>The service operation responds with the status code <code>200</code> if jobs were successfully queried. The response also contains a ServiceOrchestrationHistoryResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"id\": \"5cf0f11a-6bea-46c7-8550-403c96d27bbc\",\n      \"status\": \"IN_PROGRESS\",\n      \"type\": \"PUSH\",\n      \"requesterSystem\": \"TemperatureManager\",\n      \"targetSystem\": \"TemperatureConsumer\",\n      \"serviceDefinition\": \"kelvinInfo\",\n      \"subscriptionId\": \"3a07c069-e070-4831-a5ad-5307c112354f\",\n      \"message\": \"\",\n      \"createdAt\": \"2025-11-08T12:00:00Z\",\n      \"startedAt\": \"2025-11-08T12:01:00Z\",\n      \"finishedAt\": \"\"\n    }\n  ],\n  \"count\": 1\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Invalid orchestration job id: abc123\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceorchestration/orchestration/mgmt/history/query\"\n}\n</code></pre>"},{"location":"api/serviceorchestration/service-orchestration-history-management-generic-mqtt_dynamic/","title":"serviceOrchestrationHistoryManagement IDD (dynamic strategy)","text":"<p>generic_mqtt &amp; generic_mqtts</p>"},{"location":"api/serviceorchestration/service-orchestration-history-management-generic-mqtt_dynamic/#overview","title":"Overview","text":"<p>This page describes the generic_mqtt and generic_mqtts service interface of serviceOrchestrationHistoryManagement, which enables systems to gather information about the performed orchestration processes.</p> <p>Hereby the Interface Design Description (IDD) is provided to the serviceOrchestrationHistoryManagement \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/serviceorchestration/service-orchestration-history-management-generic-mqtt_dynamic/#interface-description","title":"Interface Description","text":""},{"location":"api/serviceorchestration/service-orchestration-history-management-generic-mqtt_dynamic/#query","title":"query","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a ServiceOrchestrationHistoryQueryRequest. </p> <pre><code>Topic: arrowhead/serviceorchestration/orchestration/management/history/query\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;authentication-data&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": &lt;0|1|2&gt;,\n   \"payload\": {\n      \"pagination\": {\n         \"page\": 0,\n         \"size\": 10,\n         \"direction\": \"ASC\",\n         \"sortField\": \"createdAt\"\n      },\n      \"ids\": [\n         \"5cf0f11a-6bea-46c7-8550-403c96d27bbc\"\n      ],\n      \"statuses\": [\n         \"PENDING\",\n         \"IN_PROGRESS\"\n      ],\n      \"type\": \"PUSH\",\n      \"requesterSystems\": [\n         \"TemperatureManager\"\n      ],\n      \"targetSystems\": [\n         \"TemperatureConsumer\"\n      ],\n      \"serviceDefinitions\": [\n         \"kelvinInfo\"\n      ],\n      \"subscriptionIds\": [\n         \"3a07c069-e070-4831-a5ad-5307c112354f\"\n      ]\n   }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if job records were successfully queried. The response template payload is a ServiceOrchestrationHistoryResponse.</p> <pre><code>{\n   \"status\": 200,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureManager\",\n   \"payload\": {\n      \"entries\": [\n         {\n            \"id\": \"5cf0f11a-6bea-46c7-8550-403c96d27bbc\",\n            \"status\": \"IN_PROGRESS\",\n            \"type\": \"PUSH\",\n            \"requesterSystem\": \"TemperatureManager\",\n            \"targetSystem\": \"TemperatureConsumer\",\n            \"serviceDefinition\": \"kelvinInfo\",\n            \"subscriptionId\": \"3a07c069-e070-4831-a5ad-5307c112354f\",\n            \"message\": \"\",\n            \"createdAt\": \"2025-11-08T12:00:00Z\",\n            \"startedAt\": \"2025-11-08T12:01:00Z\",\n            \"finishedAt\": \"\"\n         }\n      ],\n      \"count\": 1\n   }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 400,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureManager\",\n   \"payload\": {\n      \"errorMessage\": \"Invalid orchestration job id: abc123\",\n      \"errorCode\": 400,\n      \"exceptionType\": \"INVALID_PARAMETER\",\n      \"origin\": \"arrowhead/serviceorchestration/orchestration/management/history/query\"\n   }\n}\n</code></pre>"},{"location":"api/serviceorchestration/service-orchestration-lock-management-generic-http_dynamic/","title":"serviceOrchestrationLockManagement IDD (dynamic strategy)","text":"<p>generic_http &amp; generic_https</p>"},{"location":"api/serviceorchestration/service-orchestration-lock-management-generic-http_dynamic/#overview","title":"Overview","text":"<p>This page describes the generic_http and generic_https service interface of serviceOrchestrationLockManagement, which enables systems to manage orchestration lock records in bulk.</p> <p>Hereby the Interface Design Description (IDD) is provided to the serviceOrchestrationLockManagement \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/serviceorchestration/service-orchestration-lock-management-generic-http_dynamic/#interface-description","title":"Interface Description","text":""},{"location":"api/serviceorchestration/service-orchestration-lock-management-generic-http_dynamic/#create","title":"create","text":"<p>The service operation request requires an identity related header or certificate and a ServiceOrchestrationLockListRequest JSON encoded body.</p> <pre><code>POST /serviceorchestration/orchestration/mgmt/lock/create HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n  \"locks\": [\n    {\n      \"serviceInstanceId\": \"TemperatureProvider2|kelvinInfo|1.0.0\",\n      \"owner\": \"TemperatureManager\",\n      \"expiresAt\": \"2025-11-08T11:24:43Z\"\n    }\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>201</code> if locks were successfully created. The response also contains a ServiceOrchestrationLockListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"id\": 5,\n      \"orchestrationJobId\": \"091cc9c3-e704-4d0a-8d70-96fb2c11da55\",\n      \"serviceInstanceId\": \"TemperatureProvider2|kelvinInfo|1.0.0\",\n      \"owner\": \"TemperatureManager\",\n      \"expiresAt\": \"2025-11-08T11:24:43Z\",\n      \"temporary\": false\n    }\n  ],\n  \"count\": 1\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Owner is missing\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceorchestration/orchestration/mgmt/lock/create\"\n}\n</code></pre>"},{"location":"api/serviceorchestration/service-orchestration-lock-management-generic-http_dynamic/#query","title":"query","text":"<p>The service operation request requires an identity related header or certificate and a ServiceOrchestrationLockQueryRequest JSON encoded body.</p> <pre><code>POST /serviceorchestration/orchestration/mgmt/lock/query HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n  \"pagination\": {\n    \"page\": 0,\n    \"size\": 10,\n    \"direction\": \"ASC\",\n    \"sortField\": \"owner\"\n  },\n  \"ids\": [\n    5\n  ],\n  \"orchestrationJobIds\": [\n    \"091cc9c3-e704-4d0a-8d70-96fb2c11da55\"\n  ],\n  \"serviceInstanceIds\": [\n    \"TemperatureProvider2|kelvinInfo|1.0.0\"\n  ],\n  \"owners\": [\n    \"TemperatureManager\"\n  ],\n  \"expiresBefore\": \"2025-11-08T12:00:00Z\",\n  \"expiresAfter\": \"2025-11-08T11:00:00Z\"\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if locks were successfully queried. The response also contains a ServiceOrchestrationLockListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"id\": 5,\n      \"orchestrationJobId\": \"091cc9c3-e704-4d0a-8d70-96fb2c11da55\",\n      \"serviceInstanceId\": \"TemperatureProvider2|kelvinInfo|1.0.0\",\n      \"owner\": \"TemperatureManager\",\n      \"expiresAt\": \"2025-11-08T11:24:43Z\",\n      \"temporary\": false\n    }\n  ],\n  \"count\": 1\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Invalid orchestration job id: abc123\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceorchestration/orchestration/mgmt/lock/query\"\n}\n</code></pre>"},{"location":"api/serviceorchestration/service-orchestration-lock-management-generic-http_dynamic/#remove","title":"remove","text":"<p>The service operation request requires an identity related header or certificate, an owner SystemName path variable and a query parameter instanceIds, which is a List&lt;ServiceInstanceID&gt;.</p> <pre><code>DELETE /serviceorchestration/orchestration/mgmt/lock/remove/TemperatureManager?instanceIds=TemperatureProvider2%7CkelvinInfo%7C1.0.0 HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The success response does not contain any response body.</p> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Owner is missing\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceorchestration/orchestration/mgmt/lock/remove\"\n}\n</code></pre>"},{"location":"api/serviceorchestration/service-orchestration-lock-management-generic-mqtt_dynamic/","title":"serviceOrchestrationLockManagement IDD (dynamic strategy)","text":"<p>generic_mqtt &amp; generic_mqtts</p>"},{"location":"api/serviceorchestration/service-orchestration-lock-management-generic-mqtt_dynamic/#overview","title":"Overview","text":"<p>This page describes the generic_mqtt and generic_mqtts service interface of serviceOrchestrationLockManagement, which enables systems to manage orchestration lock records in bulk.</p> <p>Hereby the Interface Design Description (IDD) is provided to the serviceOrchestrationLockManagement \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/serviceorchestration/service-orchestration-lock-management-generic-mqtt_dynamic/#interface-description","title":"Interface Description","text":""},{"location":"api/serviceorchestration/service-orchestration-lock-management-generic-mqtt_dynamic/#create","title":"create","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a ServiceOrchestrationLockListRequest. </p> <pre><code>Topic: arrowhead/serviceorchestration/orchestration/management/lock/create\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;authentication-data&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": &lt;0|1|2&gt;,\n   \"payload\": {\n      \"locks\": [\n         {\n            \"serviceInstanceId\": \"TemperatureProvider2|kelvinInfo|1.0.0\",\n            \"owner\": \"TemperatureManager\",\n            \"expiresAt\": \"2025-11-08T11:24:43Z\"\n         }\n      ]\n   }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>201</code> if lock records were successfully created. The response template payload is a ServiceOrchestrationLockListResponse.</p> <pre><code>{\n   \"status\": 201,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureManager\",\n   \"payload\": {\n      \"entries\": [\n         {\n            \"id\": 5,\n            \"orchestrationJobId\": \"091cc9c3-e704-4d0a-8d70-96fb2c11da55\",\n            \"serviceInstanceId\": \"TemperatureProvider2|kelvinInfo|1.0.0\",\n            \"owner\": \"TemperatureManager\",\n            \"expiresAt\": \"2025-11-08T11:24:43Z\",\n            \"temporary\": false\n         }\n      ],\n      \"count\": 1\n   }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 400,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureManager\",\n   \"payload\": {\n      \"errorMessage\": \"Owner is missing\",\n      \"errorCode\": 400,\n      \"exceptionType\": \"INVALID_PARAMETER\",\n      \"origin\": \"arrowhead/serviceorchestration/orchestration/management/lock/create\"\n   }\n}\n</code></pre>"},{"location":"api/serviceorchestration/service-orchestration-lock-management-generic-mqtt_dynamic/#query","title":"query","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a ServiceOrchestrationLockQueryRequest. </p> <pre><code>Topic: arrowhead/serviceorchestration/orchestration/management/lock/query\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;authentication-data&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": &lt;0|1|2&gt;,\n   \"payload\": {\n      \"pagination\": {\n         \"page\": 0,\n         \"size\": 10,\n         \"direction\": \"ASC\",\n         \"sortField\": \"owner\"\n      },\n      \"ids\": [\n         5\n      ],\n      \"orchestrationJobIds\": [\n         \"091cc9c3-e704-4d0a-8d70-96fb2c11da55\"\n      ],\n      \"serviceInstanceIds\": [\n         \"TemperatureProvider2|kelvinInfo|1.0.0\"\n      ],\n      \"owners\": [\n         \"TemperatureManager\"\n      ],\n      \"expiresBefore\": \"2025-11-08T12:00:00Z\",\n      \"expiresAfter\": \"2025-11-08T11:00:00Z\"\n   }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if lock records were successfully queried. The response template payload is a ServiceOrchestrationLockListResponse.</p> <pre><code>{\n   \"status\": 200,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureManager\",\n   \"payload\": {\n      \"entries\": [\n         {\n            \"id\": 5,\n            \"orchestrationJobId\": \"091cc9c3-e704-4d0a-8d70-96fb2c11da55\",\n            \"serviceInstanceId\": \"TemperatureProvider2|kelvinInfo|1.0.0\",\n            \"owner\": \"TemperatureManager\",\n            \"expiresAt\": \"2025-11-08T11:24:43Z\",\n            \"temporary\": false\n         }\n      ],\n      \"count\": 1\n   }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 400,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureManager\",\n   \"payload\": {\n      \"errorMessage\": \"Invalid orchestration job id: abc123\",\n      \"errorCode\": 400,\n      \"exceptionType\": \"INVALID_PARAMETER\",\n      \"origin\": \"arrowhead/serviceorchestration/orchestration/management/lock/query\"\n   }\n}\n</code></pre>"},{"location":"api/serviceorchestration/service-orchestration-lock-management-generic-mqtt_dynamic/#remove","title":"remove","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a List&lt;ServiceInstanceID&gt;. An <code>owner</code> parameter also has to be provided with a SystemName value.</p> <pre><code>Topic: arrowhead/serviceorchestration/orchestration/management/lock/remove\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;authentication-data&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": &lt;0|1|2&gt;,\n   \"params\": {\n      \"owner\": \"TemperatureManager\"\n   },\n   \"payload\": [\n        \"TemperatureProvider2|kelvinInfo|1.0.0\"\n   ]\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. </p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"TemperatureManager\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 400,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureManager\",\n   \"payload\": {\n      \"errorMessage\": \"Owner is missing\",\n      \"errorCode\": 400,\n      \"exceptionType\": \"INVALID_PARAMETER\",\n      \"origin\": \"arrowhead/serviceorchestration/orchestration/management/lock/remove\"\n   }\n}\n</code></pre>"},{"location":"api/serviceorchestration/service-orchestration-push-management-generic-http_dynamic/","title":"serviceOrchestrationPushManagement IDD (dynamic strategy)","text":"<p>generic_http &amp; generic_https</p>"},{"location":"api/serviceorchestration/service-orchestration-push-management-generic-http_dynamic/#overview","title":"Overview","text":"<p>This page describes the generic_http and generic_https service interface of serviceOrchestrationPushManagement, which enables systems to manage data and activities related to the push type of service orchestration process in bulk.</p> <p>Hereby the Interface Design Description (IDD) is provided to the serviceOrchestrationPushManagement \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/serviceorchestration/service-orchestration-push-management-generic-http_dynamic/#interface-description","title":"Interface Description","text":""},{"location":"api/serviceorchestration/service-orchestration-push-management-generic-http_dynamic/#subscribe","title":"subscribe","text":"<p>The service operation request requires an identity related header or certificate and a ServiceOrchestrationSubscriberListRequest JSON encoded body.</p> <pre><code>POST /serviceorchestration/orchestration/mgmt/push/subscribe HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n   \"subscriptions\": [\n      {\n         \"targetSystemName\": \"TemperatureConsumer\",\n         \"orchestrationRequest\": {\n            \"serviceRequirement\": {\n               \"serviceDefinition\": \"kelvinInfo\",\n               \"operations\": [\n                  \"query-temperature\"\n               ],\n               \"versions\": [\n\n               ],\n               \"alivesAt\": 2025-10-05T11:35:14Z\",\n               \"metadataRequirements\": [\n\n               ],\n               \"interfaceTemplateNames\": [\n                  \"generic_https\"\n               ],\n               \"interfaceAddressTypes\": [\n                  \"HOSTNAME\",\n                  \"IPV4\"\n               ],\n               \"interfacePropertyRequirements\": [\n\n               ],\n               \"securityPolicies\": [\n                  \"TIME_LIMITED_TOKEN_AUTH\"\n               ],\n               \"preferredProviders\": [\n\n               ]\n            },\n            \"orchestrationFlags\": {\n               \"MATCHMAKING\": \"true\",\n               \"ALLOW_TRANSLATION\": \"true\",\n               \"ONLY_PREFERRED\": \"false\",\n               \"ONLY_EXCLUSIVE\": \"false\",\n               \"ALLOW_INTERCLOUD\": \"false\",\n               \"ONLY_INTERCLOUD\": \"false\"\n            },\n            \"qosRequirements\": {\n               \"maxLatencyMs\": \"10\"\n            },\n            \"exclusivityDuration\": 600\n         },\n         \"notifyInterface\": {\n            \"protocol\": \"mqtt\",\n            \"properties\": {\n               \"topic\": \"arrowhead/orchestration-push\"\n            }\n         },\n         \"duration\": 100000\n      }\n   ]\n}\n</code></pre> <p>The service operation responds with the status code <code>201</code> if subscriptions were successfully created. The response also contains a ServiceOrchestrationSubscriptionListResponse JSON encoded body.</p> <pre><code>{\n   \"entries\": [\n      {\n         \"id\": \"d2fefc6a-f563-40a2-9ce4-3512c2887755\",\n         \"ownerSystemName\": \"TemperatureSensorManager\",\n         \"targetSystemName\": \"TemperatureConsumer\",\n         \"orchestrationRequest\": {\n            \"serviceRequirement\": {\n               \"serviceDefinition\": \"kelvinInfo\",\n               \"operations\": [\n                  \"query-temperature\"\n               ],\n               \"versions\": [\n\n               ],\n               \"alivesAt\": \"2025-10-05T11:35:14Z\",\n               \"metadataRequirements\": [\n\n               ],\n               \"interfaceTemplateNames\": [\n                  \"generic_https\"\n               ],\n               \"interfaceAddressTypes\": [\n                  \"HOSTNAME\",\n                  \"IPV4\"\n               ],\n               \"interfacePropertyRequirements\": [\n\n               ],\n               \"securityPolicies\": [\n                  \"TIME_LIMITED_TOKEN_AUTH\"\n               ],\n               \"preferredProviders\": [\n\n               ]\n            },\n            \"orchestrationFlags\": {\n               \"MATCHMAKING\": \"true\",\n               \"ALLOW_TRANSLATION\": \"true\",\n               \"ONLY_PREFERRED\": \"false\",\n               \"ONLY_EXCLUSIVE\": \"false\",\n               \"ALLOW_INTERCLOUD\": \"false\",\n               \"ONLY_INTERCLOUD\": \"false\"\n            },\n            \"qosRequirements\": {\n               \"maxLatencyMs\": \"10\"\n            },\n            \"exclusivityDuration\": 600\n         },\n         \"notifyInterface\": {\n            \"protocol\": \"mqtt\",\n            \"properties\": {\n               \"topic\": \"arrowhead/orchestration-push\"\n            }\n         },\n         \"expiredAt\": \"2025-10-08T11:35:14Z\",\n         \"createdAt\": \"2025-10-05T11:30:14Z\"\n      }\n   ],\n   \"count\": 1\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Subscription request list is empty\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceorchestration/orchestration/mgmt/push/subscribe\"\n}\n</code></pre>"},{"location":"api/serviceorchestration/service-orchestration-push-management-generic-http_dynamic/#unsubscribe","title":"unsubscribe","text":"<p>The service operation request requires an identity related header or certificate and a query parameter ids, which is a List&lt;UUID&gt;. It contains the identifiers of the subscription records to remove.</p> <pre><code>DELETE /serviceorchestration/orchestration/mgmt/push/unsubscribe?ids=d2fefc6a-f563-40a2-9ce4-3512c2887755&amp;ids=a44ab333-cfb5-420b-a7cf-b327904e243b HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The success response does not contain any response body.</p> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"a44ab333-cfb5-420b-a7cf-b327904e243b is not owned by the requester\",\n  \"errorCode\": 403,\n  \"exceptionType\": \"FORBIDDEN\",\n  \"origin\": \"DELETE /serviceorchestration/orchestration/mgmt/push/unsubscribe\"\n}\n</code></pre>"},{"location":"api/serviceorchestration/service-orchestration-push-management-generic-http_dynamic/#trigger","title":"trigger","text":"<p>The service operation request requires an identity related header or certificate and a ServiceOrchestrationPushTriggerRequest JSON encoded body.</p> <pre><code>POST /serviceorchestration/orchestration/mgmt/push/trigger HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n   \"targetSystems\": [\n      \"TemperatureConsumer\"\n   ],\n   \"subscriptionIds\": [\n\n   ]\n}\n</code></pre> <p>The service operation responds with the status code <code>201</code> if orchestration jobs were successfully created. The response also contains a ServiceOrchestrationJobListResponse JSON encoded body.</p> <pre><code>{\n   \"jobs\": [\n      {\n         \"id\": \"1fac8a1c-aa4b-456e-b501-01289035fcc6\",\n         \"status\": \"IN_PROGRESS\",\n         \"type\": \"PUSH\",\n         \"requesterSystem\": \"TemperatureSensorManager\",\n         \"targetSystem\": \"TemperatureConsumer\",\n         \"serviceDefinition\": \"kelvinInfo\",\n         \"subscriptionId\": \"d2fefc6a-f563-40a2-9ce4-3512c2887755\",\n         \"message\": \"\",\n         \"createdAt\": \"2025-10-05T11:30:14Z\",\n         \"startedAt\": \"2025-10-05T11:30:17Z\",\n         \"finishedAt\": \"\"\n      }\n   ]\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Invalid subscription id: a44ab333-cfb5-420b-a7cf-b327904e243b\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceorchestration/orchestration/mgmt/push/trigger\"\n}\n</code></pre>"},{"location":"api/serviceorchestration/service-orchestration-push-management-generic-http_dynamic/#query","title":"query","text":"<p>The service operation request requires an identity related header or certificate and a ServiceOrchestrationSubscriptionQueryRequest JSON encoded body.</p> <pre><code>POST /serviceorchestration/orchestration/mgmt/push/query HTTP/1.1\nAuthorization: Bearer &lt;identity-info&gt;\n\n{\n   \"pagination\": {\n      \"page\": 0,\n      \"size\": 20,\n      \"direction\": \"ASC\",\n      \"sortField\": \"createdAt\"\n   },\n   \"ownerSystems\": [\n      \"TemperatureSensorManager\"\n   ],\n   \"targetSystems\": [\n      \"TemperatureConsumer\"\n   ],\n   \"serviceDefinitions\": [\n      \"kelvinInfo\"\n   ]\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if subscriptions were successfully queried. The response also contains a ServiceOrchestrationSubscriptionListResponse JSON encoded body.</p> <pre><code>{\n   \"entries\": [\n      {\n         \"id\": \"d2fefc6a-f563-40a2-9ce4-3512c2887755\",\n         \"ownerSystemName\": \"TemperatureSensorManager\",\n         \"targetSystemName\": \"TemperatureConsumer\",\n         \"orchestrationRequest\": {\n            \"serviceRequirement\": {\n               \"serviceDefinition\": \"kelvinInfo\",\n               \"operations\": [\n                  \"query-temperature\"\n               ],\n               \"versions\": [\n\n               ],\n               \"alivesAt\": \"2025-10-05T11:35:14Z\",\n               \"metadataRequirements\": [\n\n               ],\n               \"interfaceTemplateNames\": [\n                  \"generic_https\"\n               ],\n               \"interfaceAddressTypes\": [\n                  \"HOSTNAME\",\n                  \"IPV4\"\n               ],\n               \"interfacePropertyRequirements\": [\n\n               ],\n               \"securityPolicies\": [\n                  \"TIME_LIMITED_TOKEN_AUTH\"\n               ],\n               \"preferredProviders\": [\n\n               ]\n            },\n            \"orchestrationFlags\": {\n               \"MATCHMAKING\": \"true\",\n               \"ALLOW_TRANSLATION\": \"true\",\n               \"ONLY_PREFERRED\": \"false\",\n               \"ONLY_EXCLUSIVE\": \"false\",\n               \"ALLOW_INTERCLOUD\": \"false\",\n               \"ONLY_INTERCLOUD\": \"false\"\n            },\n            \"qosRequirements\": {\n               \"maxLatencyMs\": \"10\"\n            },\n            \"exclusivityDuration\": 600\n         },\n         \"notifyInterface\": {\n            \"protocol\": \"mqtt\",\n            \"properties\": {\n               \"topic\": \"arrowhead/orchestration-push\"\n            }\n         },\n         \"expiredAt\": \"2025-10-08T11:35:14Z\",\n         \"createdAt\": \"2025-10-05T11:30:14Z\"\n      }\n   ],\n   \"count\": 1\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Owner system list contains empty element\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceorchestration/orchestration/mgmt/push/query\"\n}\n</code></pre>"},{"location":"api/serviceorchestration/service-orchestration-push-management-generic-mqtt_dynamic/","title":"serviceOrchestrationPushManagement IDD (dynamic strategy)","text":"<p>generic_mqtt &amp; generic_mqtts</p>"},{"location":"api/serviceorchestration/service-orchestration-push-management-generic-mqtt_dynamic/#overview","title":"Overview","text":"<p>This page describes the generic_mqtt and generic_mqtts service interface of serviceOrchestrationPushManagement, which enables systems to manage data and activities related to the push type of service orchestration process in bulk.</p> <p>Hereby the Interface Design Description (IDD) is provided to the serviceOrchestrationPushManagement \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/serviceorchestration/service-orchestration-push-management-generic-mqtt_dynamic/#interface-description","title":"Interface Description","text":""},{"location":"api/serviceorchestration/service-orchestration-push-management-generic-mqtt_dynamic/#subscribe","title":"subscribe","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a ServiceOrchestrationSubscriberListRequest. </p> <pre><code>Topic: arrowhead/serviceorchestration/orchestration/management/push/subscribe\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;authentication-data&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": &lt;0|1|2&gt;,\n   \"payload\": {\n      \"subscriptions\": [\n         {\n            \"targetSystemName\": \"TemperatureConsumer\",\n            \"orchestrationRequest\": {\n               \"serviceRequirement\": {\n                  \"serviceDefinition\": \"kelvinInfo\",\n                  \"operations\": [\n                     \"query-temperature\"\n                  ],\n                  \"versions\": [\n\n                  ],\n                  \"alivesAt\": \"2025-10-05T11:35:14Z\",\n                  \"metadataRequirements\": [\n\n                  ],\n                  \"interfaceTemplateNames\": [\n                     \"generic_https\"\n                  ],\n                  \"interfaceAddressTypes\": [\n                     \"HOSTNAME\",\n                     \"IPV4\"\n                  ],\n                  \"interfacePropertyRequirements\": [\n\n                  ],\n                  \"securityPolicies\": [\n                     \"TIME_LIMITED_TOKEN_AUTH\"\n                  ],\n                  \"preferredProviders\": [\n\n                  ]\n               },\n               \"orchestrationFlags\": {\n                  \"MATCHMAKING\": \"true\",\n                  \"ALLOW_TRANSLATION\": \"true\",\n                  \"ONLY_PREFERRED\": \"false\",\n                  \"ONLY_EXCLUSIVE\": \"false\",\n                  \"ALLOW_INTERCLOUD\": \"false\",\n                  \"ONLY_INTERCLOUD\": \"false\"\n               },\n               \"qosRequirements\": {\n                  \"maxLatencyMs\": \"10\"\n               },\n               \"exclusivityDuration\": 600\n            },\n            \"notifyInterface\": {\n               \"protocol\": \"mqtt\",\n               \"properties\": {\n                  \"topic\": \"arrowhead/orchestration-push\"\n               }\n            },\n            \"duration\": 100000\n         }\n      ]\n   }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>201</code> if subscriptions were successfully created. The response template payload is a ServiceOrchestrationSubscriptionListResponse.</p> <pre><code>{\n   \"status\": 201,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureSensorManager\",\n   \"payload\": {\n      \"entries\": [\n         {\n            \"id\": \"d2fefc6a-f563-40a2-9ce4-3512c2887755\",\n            \"ownerSystemName\": \"TemperatureSensorManager\",\n            \"targetSystemName\": \"TemperatureConsumer\",\n            \"orchestrationRequest\": {\n               \"serviceRequirement\": {\n                  \"serviceDefinition\": \"kelvinInfo\",\n                  \"operations\": [\n                     \"query-temperature\"\n                  ],\n                  \"versions\": [\n\n                  ],\n                  \"alivesAt\": \"2025-10-05T11:35:14Z\",\n                  \"metadataRequirements\": [\n\n                  ],\n                  \"interfaceTemplateNames\": [\n                     \"generic_https\"\n                  ],\n                  \"interfaceAddressTypes\": [\n                     \"HOSTNAME\",\n                     \"IPV4\"\n                  ],\n                  \"interfacePropertyRequirements\": [\n\n                  ],\n                  \"securityPolicies\": [\n                     \"TIME_LIMITED_TOKEN_AUTH\"\n                  ],\n                  \"preferredProviders\": [\n\n                  ]\n               },\n               \"orchestrationFlags\": {\n                  \"MATCHMAKING\": \"true\",\n                  \"ALLOW_TRANSLATION\": \"true\",\n                  \"ONLY_PREFERRED\": \"false\",\n                  \"ONLY_EXCLUSIVE\": \"false\",\n                  \"ALLOW_INTERCLOUD\": \"false\",\n                  \"ONLY_INTERCLOUD\": \"false\"\n               },\n               \"qosRequirements\": {\n                  \"maxLatencyMs\": \"10\"\n               },\n               \"exclusivityDuration\": 600\n            },\n            \"notifyInterface\": {\n               \"protocol\": \"mqtt\",\n               \"properties\": {\n                  \"topic\": \"arrowhead/orchestration-push\"\n               }\n            },\n            \"expiredAt\": \"2025-10-08T11:35:14Z\",\n            \"createdAt\": \"2025-10-05T11:30:14Z\"\n         }\n      ],\n      \"count\": 1\n   }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 400,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureSensorManager\",\n   \"payload\": {\n      \"errorMessage\": \"Subscription request list is empty\",\n      \"errorCode\": 400,\n      \"exceptionType\": \"INVALID_PARAMETER\",\n      \"origin\": \"arrowhead/serviceorchestration/orchestration/management/push/subscribe\"\n   }\n}\n</code></pre>"},{"location":"api/serviceorchestration/service-orchestration-push-management-generic-mqtt_dynamic/#unsubscribe","title":"unsubscribe","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a List&lt;UUID&gt;. It contains the identifiers of the subscription records to remove.</p> <pre><code>Topic: arrowhead/serviceorchestration/orchestration/management/push/unsubscribe\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;authentication-data&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": &lt;0|1|2&gt;,\n   \"payload\": [\n      \"d2fefc6a-f563-40a2-9ce4-3512c2887755\",\n      \"a44ab333-cfb5-420b-a7cf-b327904e243b\"\n   ]\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is empty. </p> <pre><code>{\n   \"status\": 200,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureSensorManager\",\n   \"payload\": \"\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 403,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureSensorManager\",\n   \"payload\": {\n      \"errorMessage\": \"a44ab333-cfb5-420b-a7cf-b327904e243b is not owned by the requester\",\n      \"errorCode\": 403,\n      \"exceptionType\": \"FORBIDDEN\",\n      \"origin\": \"arrowhead/serviceorchestration/orchestration/management/push/unsubscribe\"\n   }\n}\n</code></pre>"},{"location":"api/serviceorchestration/service-orchestration-push-management-generic-mqtt_dynamic/#trigger","title":"trigger","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a ServiceOrchestrationPushTriggerRequest. </p> <pre><code>Topic: arrowhead/serviceorchestration/orchestration/management/push/trigger\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;authentication-data&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": &lt;0|1|2&gt;,\n   \"payload\": {\n      \"targetSystems\": [\n         \"TemperatureConsumer\"\n      ],\n      \"subscriptionIds\": [\n\n      ]\n   }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>201</code> if orchestration jobs were successfully created. The response template payload is a ServiceOrchestrationJobListResponse.</p> <pre><code>{\n   \"status\": 201,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureSensorManager\",\n   \"payload\": {\n      \"jobs\": [\n         {\n            \"id\": \"1fac8a1c-aa4b-456e-b501-01289035fcc6\",\n            \"status\": \"IN_PROGRESS\",\n            \"type\": \"PUSH\",\n            \"requesterSystem\": \"TemperatureSensorManager\",\n            \"targetSystem\": \"TemperatureConsumer\",\n            \"serviceDefinition\": \"kelvinInfo\",\n            \"subscriptionId\": \"d2fefc6a-f563-40a2-9ce4-3512c2887755\",\n            \"message\": \"\",\n            \"createdAt\": \"2025-10-05T11:30:14Z\",\n            \"startedAt\": \"2025-10-05T11:30:17Z\",\n            \"finishedAt\": \"\"\n         }\n      ]\n   }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 400,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureSensorManager\",\n   \"payload\": {\n      \"errorMessage\": \"Invalid subscription id: a44ab333-cfb5-420b-a7cf-b327904e243b\",\n      \"errorCode\": 400,\n      \"exceptionType\": \"INVALID_PARAMETER\",\n      \"origin\": \"arrowhead/serviceorchestration/orchestration/management/push/trigger\"\n   }\n}\n</code></pre>"},{"location":"api/serviceorchestration/service-orchestration-push-management-generic-mqtt_dynamic/#query","title":"query","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a ServiceOrchestrationSubscriptionQueryRequest.</p> <pre><code>Topic: arrowhead/serviceorchestration/orchestration/management/push/query\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;authentication-data&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": &lt;0|1|2&gt;,\n   \"payload\": {\n      \"pagination\": {\n         \"page\": 0,\n         \"size\": 20,\n         \"direction\": \"ASC\",\n         \"sortField\": \"createdAt\"\n      },\n      \"ownerSystems\": [\n         \"TemperatureSensorManager\"\n      ],\n      \"targetSystems\": [\n         \"TemperatureConsumer\"\n      ],\n      \"serviceDefinitions\": [\n         \"kelvinInfo\"\n      ]\n   }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if subscriptions were successfully queried. The response template payload is a ServiceOrchestrationSubscriptionListResponse.</p> <pre><code>{\n   \"status\": 200,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureSensorManager\",\n   \"payload\": {\n      \"entries\": [\n         {\n            \"id\": \"d2fefc6a-f563-40a2-9ce4-3512c2887755\",\n            \"ownerSystemName\": \"TemperatureSensorManager\",\n            \"targetSystemName\": \"TemperatureConsumer\",\n            \"orchestrationRequest\": {\n               \"serviceRequirement\": {\n                  \"serviceDefinition\": \"kelvinInfo\",\n                  \"operations\": [\n                     \"query-temperature\"\n                  ],\n                  \"versions\": [\n\n                  ],\n                  \"alivesAt\": \"2025-10-05T11:35:14Z\",\n                  \"metadataRequirements\": [\n\n                  ],\n                  \"interfaceTemplateNames\": [\n                     \"generic_https\"\n                  ],\n                  \"interfaceAddressTypes\": [\n                     \"HOSTNAME\",\n                     \"IPV4\"\n                  ],\n                  \"interfacePropertyRequirements\": [\n\n                  ],\n                  \"securityPolicies\": [\n                     \"TIME_LIMITED_TOKEN_AUTH\"\n                  ],\n                  \"preferredProviders\": [\n\n                  ]\n               },\n               \"orchestrationFlags\": {\n                  \"MATCHMAKING\": \"true\",\n                  \"ALLOW_TRANSLATION\": \"true\",\n                  \"ONLY_PREFERRED\": \"false\",\n                  \"ONLY_EXCLUSIVE\": \"false\",\n                  \"ALLOW_INTERCLOUD\": \"false\",\n                  \"ONLY_INTERCLOUD\": \"false\"\n               },\n               \"qosRequirements\": {\n                  \"maxLatencyMs\": \"10\"\n               },\n               \"exclusivityDuration\": 600\n            },\n            \"notifyInterface\": {\n               \"protocol\": \"mqtt\",\n               \"properties\": {\n                  \"topic\": \"arrowhead/orchestration-push\"\n               }\n            },\n            \"expiredAt\": \"2025-10-08T11:35:14Z\",\n            \"createdAt\": \"2025-10-05T11:30:14Z\"\n         }\n      ],\n      \"count\": 1\n   }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 400,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"TemperatureSensorManager\",\n   \"payload\": {\n      \"errorMessage\": \"Owner system list contains empty element\",\n      \"errorCode\": 400,\n      \"exceptionType\": \"INVALID_PARAMETER\",\n      \"origin\": \"arrowhead/serviceorchestration/orchestration/management/push/query\"\n   }\n}\n</code></pre>"},{"location":"api/serviceregistry/device-discovery-generic-http/","title":"deviceDiscovery IDD","text":"<p>generic_http &amp; generic_https</p>"},{"location":"api/serviceregistry/device-discovery-generic-http/#overview","title":"Overview","text":"<p>This page describes the generic_http and generic_https service interface of deviceDiscovery, which enables both application and Core/Support systems to lookup, register and revoke devices on which the Local Cloud\u2019s systems are running. Device representation is not necessary for the base functionalities of a Local Cloud but in certain use cases (e.g. enabling onboarding) is needed. </p> <p>Hereby the Interface Design Description (IDD) is provided to the deviceDiscovery \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/serviceregistry/device-discovery-generic-http/#interface-description","title":"Interface Description","text":""},{"location":"api/serviceregistry/device-discovery-generic-http/#register","title":"register","text":"<p>The service operation request requires an identity related header or certificate and a DeviceRegistrationRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/device-discovery/register HTTP/1.1\nAuthorization:  Bearer &lt;identity-info&gt;\n\n{\n   \"name\": \"THERMOMETER2\",\n   \"metadata\": {\n      \"scales\": [\n         \"kelvin\",\n         \"celsius\"\n      ],\n      \"maxTemperature\": {\n         \"kelvin\": 310,\n         \"celsius\": 40\n      },\n      \"minTemperature\": {\n         \"kelvin\": 260,\n         \"celsius\": -10\n      }\n   },\n   \"addresses\": [      \n      \"81:ef:1a:44:7a:f5\"\n   ]\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and the device entity is already existing or <code>201</code> if the entity was newly created. The response also contains a DeviceRegistrationResponse JSON encoded body.</p> <pre><code>{\n   \"name\": \"THERMOMETER2\",\n   \"metadata\": {\n      \"scales\": [\n         \"kelvin\",\n         \"celsius\"\n      ],\n      \"maxTemperature\": {\n         \"kelvin\": 310,\n         \"celsius\": 40\n      },\n      \"minTemperature\": {\n         \"kelvin\": 260,\n         \"celsius\": -10\n      }\n   },\n   \"addresses\": [\n      {\n         \"type\": \"MAC\",\n         \"address\": \"81:ef:1a:44:7a:f5\"\n      }\n   ],\n   \"createdAt\": \"2024-11-04T01:53:02Z\",\n   \"updatedAt\": \"2024-11-04T01:53:02Z\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n    \"errorMessage\":  \"Device name is missing.\",\n    \"errorCode\":  400,\n    \"exceptionType\":  \"INVALID_PARAMETER\",\n    \"origin\":  \"POST /serviceregistry/device-discovery/register\"\n}\n</code></pre>"},{"location":"api/serviceregistry/device-discovery-generic-http/#lookup","title":"lookup","text":"<p>The service operation request requires an identity related header or certificate and may optionally include a DeviceLookupRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/device-discovery/lookup HTTP/1.1\nAuthorization:  Bearer &lt;identity-info&gt;\n\n{\n   \"deviceNames\": [\n      \"THERMOMETER2\"\n   ],\n   \"addresses\": [\n      \"81:ef:1a:44:7a:f5\"\n   ],\n   \"addressType\": \"MAC\",\n   \"metadataRequirementList\": [\n      {\n         \"maxTemperature.celsius\": {\n            \"op\": \"LESS_THAN\",\n            \"value\": 50\n         }\n      }\n   ]\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and with a DeviceLookupResponse JSON encoded body.</p> <pre><code>{\n   \"entries\": [\n      {\n         \"name\": \"THERMOMETER2\",\n         \"metadata\": {\n            \"scales\": [\n               \"kelvin\",\n               \"celsius\"\n            ],\n            \"maxTemperature\": {\n               \"kelvin\": 310,\n               \"celsius\": 40\n            },\n            \"minTemperature\": {\n               \"kelvin\": 260,\n               \"celsius\": -10\n            }\n         },\n         \"addresses\": [\n            {\n               \"type\": \"MAC\",\n               \"address\": \"81:ef:1a:44:7a:f5\"\n            }\n         ],\n         \"createdAt\": \"2024-11-04T01:53:02Z\",\n         \"updatedAt\": \"2024-11-04T01:53:02Z\"\n      }\n   ],\n   \"count\": 1\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> Error if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n    \"errorMessage\":  \"Database operation error.\",\n    \"errorCode\":  500,\n    \"exceptionType\":  \"INTERNAL_SERVER_ERROR\",\n    \"origin\":  \"POST /serviceregistry/device-discovery/lookup\"\n}\n</code></pre>"},{"location":"api/serviceregistry/device-discovery-generic-http/#revoke","title":"revoke","text":"<p>The service operation request requires an identity related header or certificate and a device <code>name</code> as path parameter.</p> <pre><code>DELETE /serviceregistry/device-discovery/revoke/THERMOMETER2 HTTP/1.1\nAuthorization:  Bearer &lt;identity-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and an existing device entity was removed and <code>204</code> if no matching entity was found. The success response does not contain any response body.</p> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission, <code>423</code> if entity is not removable and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n    \"errorMessage\":  \"Database operation error.\",\n    \"errorCode\":  500,\n    \"exceptionType\":  \"INTERNAL_SERVER_ERROR\",\n    \"origin\":  \"DELETE /serviceregistry/device-discovery/lookup\"\n}\n</code></pre>"},{"location":"api/serviceregistry/device-discovery-generic-mqtt/","title":"deviceDiscovery IDD","text":"<p>generic_mqtt &amp; generic_mqtts </p>"},{"location":"api/serviceregistry/device-discovery-generic-mqtt/#overview","title":"Overview","text":"<p>This page describes the generic_mqtt and generic_mqtts service interface of deviceDiscovery, which enables both application and Core/Support systems to lookup, register and revoke devices on which the Local Cloud\u2019s systems are running. Device representation is not necessary for the base functionalities of a Local Cloud but in certain use cases (e.g. enabling onboarding) is needed.</p> <p>Hereby the Interface Design Description (IDD) is provided to the deviceDiscovery \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/serviceregistry/device-discovery-generic-mqtt/#interface-description","title":"Interface Description","text":""},{"location":"api/serviceregistry/device-discovery-generic-mqtt/#register","title":"register","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a DeviceRegistrationRequest.</p> <pre><code>Topic:  arrowhead/serviceregistry/device-discovery/register\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;identity-info&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": \"&lt;0|1|2&gt;\",\n   \"payload\": {\n      \"name\": \"THERMOMETER2\",\n      \"metadata\": {\n         \"scales\": [\n            \"kelvin\",\n            \"celsius\"\n         ],\n         \"maxTemperature\": {\n            \"kelvin\": 310,\n            \"celsius\": 40\n         },\n         \"minTemperature\": {\n            \"kelvin\": 260,\n            \"celsius\": -10\n         }\n      },\n      \"addresses\": [\n         \"81:ef:1a:44:7a:f5\"\n      ]\n   }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully and the device entity is already existing or <code>201</code> if the entity was newly created. The response template payload is a DeviceRegistrationResponse.</p> <pre><code>{\n   \"status\": 201,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n   \"payload\": {\n      \"name\": \"THERMOMETER2\",\n      \"metadata\": {\n         \"scales\": [\n            \"kelvin\",\n            \"celsius\"\n         ],\n         \"maxTemperature\": {\n            \"kelvin\": 310,\n            \"celsius\": 40\n         },\n         \"minTemperature\": {\n            \"kelvin\": 260,\n            \"celsius\": -10\n         }\n      },\n      \"addresses\": [\n         {\n            \"type\": \"MAC\",\n            \"address\": \"81:ef:1a:44:7a:f5\"\n         }\n      ],\n      \"createdAt\": \"2024-11-04T01:53:02Z\",\n      \"updatedAt\": \"2024-11-04T01:53:02Z\"\n   }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 400,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n   \"payload\": {\n      \"errorMessage\": \"Device name is missing.\",\n      \"errorCode\": 400,\n      \"exceptionType\": \"INVALID_PARAMETER\",\n      \"origin\": \"arrowhead/serviceregistry/device-discovery/register\"\n   }\n}\n</code></pre>"},{"location":"api/serviceregistry/device-discovery-generic-mqtt/#lookup","title":"lookup","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a  DeviceLookupRequest.</p> <pre><code>Topic:  arrowhead/serviceregistry/device-discovery/lookup\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;identity-info&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": \"&lt;0|1|2&gt;\",\n   \"payload\": {\n      \"deviceNames\": [\n         \"THERMOMETER2\"\n      ],\n      \"addresses\": [\n         \"81:ef:1a:44:7a:f5\"\n      ],\n      \"addressType\": \"MAC\",\n      \"metadataRequirementList\": [\n         {\n            \"maxTemperature.celsius\": {\n               \"op\": \"LESS_THAN\",\n               \"value\": 50\n            }\n         }\n      ]\n   }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is a DeviceLookupResponse.</p> <pre><code>{\n   \"status\": 200,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n   \"payload\": {\n      \"entries\": [\n         {\n            \"name\": \"THERMOMETER2\",\n            \"metadata\": {\n               \"scales\": [\n                  \"kelvin\",\n                  \"celsius\"\n               ],\n               \"maxTemperature\": {\n                  \"kelvin\": 310,\n                  \"celsius\": 40\n               },\n               \"minTemperature\": {\n                  \"kelvin\": 260,\n                  \"celsius\": -10\n               }\n            },\n            \"addresses\": [\n               {\n                  \"type\": \"MAC\",\n                  \"address\": \"81:ef:1a:44:7a:f5\"\n               }\n            ],\n            \"createdAt\": \"2024-11-04T01:53:02Z\",\n            \"updatedAt\": \"2024-11-04T01:53:02Z\"\n         }\n      ],\n      \"count\": 1\n   }\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens.  In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 500,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n   \"payload\": {\n      \"errorMessage\": \"Database operation error.\",\n      \"errorCode\": 500,\n      \"exceptionType\": \"INTERNAL_SERVER_ERROR\",\n      \"origin\": \"arrowhead/serviceregistry/device-discovery/lookup\"\n   }\n}\n</code></pre>"},{"location":"api/serviceregistry/device-discovery-generic-mqtt/#revoke","title":"revoke","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is the <code>device name</code>.</p> <pre><code>Topic:  arrowhead/serviceregistry/device-discovery/revoke\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;identity-info&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": \"&lt;0|1|2&gt;\",\n   \"payload\": \"THERMOMETER2\"\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully and an existing device entity was removed and <code>204</code> if no matching entity was found. </p> <pre><code>{\n   \"status\": 200,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\"\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission, <code>423</code> if the entity is not removable and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 500,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n   \"payload\": {\n      \"errorMessage\": \"Database operation error.\",\n      \"errorCode\": 500,\n      \"exceptionType\": \"INTERNAL_SERVER_ERROR\",\n      \"origin\": \"arrowhead/serviceregistry/device-discovery/revoke\"\n   }\n}\n</code></pre>"},{"location":"api/serviceregistry/service-discovery-generic-http/","title":"serviceDiscovery IDD","text":"<p>generic_http &amp; generic_https</p>"},{"location":"api/serviceregistry/service-discovery-generic-http/#overview","title":"Overview","text":"<p>This page describes the generic_http and generic_https service interface of serviceDiscovery, which enables both application and Core/Support systems to register and revoke their service instances to/from the Local Cloud. It also enables to lookup for service instances. Service and service instance representation is mandatory for the base functionalities of a Local Cloud therefore it is an integral part of the implementation of the requirements in ServiceRegistry Core System. An example of this interaction is when a provider registers its service instances to offer them to other systems in the Local Cloud. To enable other systems to use, to consume it, this service needs to be offered through the ServiceRegistry.</p> <p>Hereby the Interface Design Description (IDD) is provided to the serviceDiscovery \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/serviceregistry/service-discovery-generic-http/#interface-description","title":"Interface Description","text":""},{"location":"api/serviceregistry/service-discovery-generic-http/#register","title":"register","text":"<p>The service operation request requires an identity related header or certificate and a ServiceRegistrationRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/service-discovery/register HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"serviceDefinitionName\": \"kelvinInfo\",\n  \"version\": \"\",\n  \"expiresAt\": \"2030-01-01T00:00:00Z\",\n  \"metadata\": {\n    \"marginOfError\": 0.5\n  },\n  \"interfaces\": [\n    {\n      \"templateName\": \"generic_http\",\n      \"protocol\": \"http\",\n      \"policy\": \"NONE\",\n      \"properties\": {\n        \"accessAddresses\": [\"192.168.56.116\", \"tp2.greenhouse.com\"],\n        \"accessPort\": 8080,\n        \"basePath\": \"/kelvin\",\n        \"operations\": {\"query-temperature\": { \"method\": \"GET\", \"path\": \"/query\"} }\n      }\n    }\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>201</code> if the service instance entity was created. The response also contains a ServiceRegistrationResponse JSON encoded body.</p> <pre><code>{\n  \"instanceId\": \"TemperatureProvider2|kelvinInfo|1.0.0\",\n  \"provider\": {\n    \"name\": \"TemperatureProvider2\",\n    \"metadata\": {\n      \"scales\": [\n        \"kelvin\",\n        \"celsius\"\n      ],\n      \"location\": {\n        \"side\": \"North\",\n        \"block\": 2\n      },\n      \"indoor\": true\n    },\n    \"version\": \"1.0.0\",\n    \"addresses\": [\n      {\n        \"type\": \"IPV4\",\n        \"address\": \"192.168.56.116\"\n      },\n      {\n        \"type\": \"HOSTNAME\",\n        \"address\": \"tp2.greenhouse.com\"\n      }\n    ],\n    \"device\": {\n      \"name\": \"THERMOMETER2\",\n      \"metadata\": {\n        \"scales\": [\n          \"kelvin\",\n          \"celsius\"\n        ],\n        \"maxTemperature\": {\n          \"kelvin\": 310,\n          \"celsius\": 40\n        },\n        \"minTemperature\": {\n          \"kelvin\": 260,\n          \"celsius\": -10\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"81:ef:1a:44:7a:f5\"\n        }\n      ],\n      \"createdAt\": \"2024-11-04T01:53:02Z\",\n      \"updatedAt\": \"2024-11-04T01:53:02Z\"\n    },\n    \"createdAt\": \"2024-11-08T10:21:11Z\",\n    \"updatedAt\": \"2024-11-08T10:21:11Z\"\n  },\n  \"serviceDefinition\": {\n    \"name\": \"kelvinInfo\",\n    \"createdAt\": \"2024-11-08T11:24:43Z\",\n    \"updatedAt\": \"2024-11-08T11:24:43Z\"\n  },\n  \"version\": \"1.0.0\",\n  \"expiresAt\": \"2030-01-01T00:00:00Z\",\n  \"metadata\": {\n    \"marginOfError\": 0.5\n  },\n  \"interfaces\": [\n    {\n      \"templateName\": \"generic_http\",\n      \"protocol\": \"http\",\n      \"policy\": \"NONE\",\n      \"properties\": {\n        \"accessAddresses\": [\n          \"192.168.56.116\",\n          \"tp2.greenhouse.com\"\n        ],\n        \"accessPort\": 8080,\n        \"operations\": {\n          \"query-temperature\": {\n            \"path\": \"/query\",\n            \"method\": \"GET\"\n          }\n        },\n        \"basePath\": \"/kelvin\"\n      }\n    }\n  ],\n  \"createdAt\": \"2024-11-19T12:00:07.959849300Z\",\n  \"updatedAt\": \"2024-11-19T12:00:07.959849300Z\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Expiration time has an invalid time format\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceregistry/service-discovery/register\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-discovery-generic-http/#lookup","title":"lookup","text":"<p>The service operation request requires an identity related header or certificate. The URI can contain an optional query parameter with the key \"verbose\" and a Boolean value. If verbose is true, detailed device and system information also returns (only if the provider supports it). The request requires a ServiceLookupRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/service-discovery/lookup?verbose=&lt;verbose-value&gt; HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"instanceIds\": [\n  ],\n  \"providerNames\": [\n    \"TemperatureProvider2\"\n  ],\n  \"serviceDefinitionNames\": [\n    \"alertService\"\n  ],\n  \"versions\": [\n    \"1.0.0\"\n  ],\n  \"alivesAt\": \"\",\n  \"metadataRequirementsList\": [\n  ],\n  \"interfaceTemplateNames\": [\n  ],\n  \"interfacePropertyRequirementsList\": [\n  ],\n  \"policies\": [\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and with a ServiceLookupResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"instanceId\": \"TemperatureProvider2|alertService|1.0.0\",\n      \"provider\": {\n        \"name\": \"TemperatureProvider2\",\n        \"metadata\": {\n          \"scales\": [\n            \"kelvin\",\n            \"celsius\"\n          ],\n          \"location\": {\n            \"side\": \"North\",\n            \"block\": 2\n          },\n          \"indoor\": true\n        },\n        \"version\": \"1.0.0\",\n        \"addresses\": [\n          {\n            \"type\": \"IPV4\",\n            \"address\": \"192.168.56.116\"\n          },\n          {\n            \"type\": \"HOSTNAME\",\n            \"address\": \"tp2.greenhouse.com\"\n          }\n        ],\n        \"device\": {\n          \"name\": \"THERMOMETER2\",\n          \"metadata\": {\n            \"scales\": [\n              \"kelvin\",\n              \"celsius\"\n            ],\n            \"maxTemperature\": {\n              \"kelvin\": 310,\n              \"celsius\": 40\n            },\n            \"minTemperature\": {\n              \"kelvin\": 260,\n              \"celsius\": -10\n            }\n          },\n          \"addresses\": [\n            {\n              \"type\": \"MAC\",\n              \"address\": \"81:ef:1a:44:7a:f5\"\n            }\n          ],\n          \"createdAt\": \"2024-11-04T01:53:02Z\",\n          \"updatedAt\": \"2024-11-04T01:53:02Z\"\n        },\n        \"createdAt\": \"2024-11-08T10:21:11Z\",\n        \"updatedAt\": \"2024-11-08T10:21:11Z\"\n      },\n      \"serviceDefinition\": {\n        \"name\": \"alertService\",\n        \"createdAt\": \"2024-11-08T15:23:10Z\",\n        \"updatedAt\": \"2024-11-08T15:23:10Z\"\n      },\n      \"version\": \"1.0.0\",\n      \"expiresAt\": \"2025-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"maxDelay\": {\n          \"value\": 15,\n          \"unit\": \"sec\"\n        }\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic_http\",\n          \"protocol\": \"http\",\n          \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\n              \"192.168.56.116\",\n              \"tp2.greenhouse.com\"\n            ],\n            \"accessPort\": 8080,\n            \"operations\": {\n              \"subscribe\": {\n                \"path\": \"/subscribe\",\n                \"method\": \"POST\"\n              },\n              \"unsubscribe\": {\n                \"path\": \"/unsubscribe\",\n                \"method\": \"DELETE\"\n              },\n              \"set-threshold\": {\n                \"path\": \"/threshold\",\n                \"method\": \"POST\"\n              }\n            },\n            \"basePath\": \"/alert\"\n          }\n        }\n      ],\n      \"createdAt\": \"2024-11-19T17:08:48Z\",\n      \"updatedAt\": \"2024-11-19T17:08:48Z\"\n    }\n  ],\n  \"count\": 1\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> Error if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"One of the following filters must be used: 'instanceIds', 'providerNames', 'serviceDefinitionNames'\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceregistry/service-discovery/lookup\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-discovery-generic-http/#revoke","title":"revoke","text":"<p>The service operation request  requires an identity related header or certificate, and a ServiceInstanceID as path parameter, which is a unique identifier of the service instance to be deleted.</p> <pre><code>DELETE /serviceregistry/service-discovery/revoke/TemperatureProvider1%7CcelsiusInfo%7C1.0.0 HTTP1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and an existing service instance entity was removed and <code>204</code> if no matching entity was found. The success response does not contain any response body.</p> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"No authorization header has been provided\",\n  \"errorCode\": 401,\n  \"exceptionType\": \"AUTH\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-discovery-generic-mqtt/","title":"serviceDiscovery IDD","text":"<p>generic_mqtt &amp; generic_mqtts </p>"},{"location":"api/serviceregistry/service-discovery-generic-mqtt/#overview","title":"Overview","text":"<p>This page describes the generic_mqtt and generic_mqtts service interface of serviceDiscovery, which enables both application and Core/Support systems to register and revoke their service instances to/from the Local Cloud. It also enables to lookup for service instances. Service and service instance representation is mandatory for the base functionalities of a Local Cloud therefore it is an integral part of the implementation of the requirements in ServiceRegistry Core System. An example of this interaction is when a provider registers its service instances to offer them to other systems in the Local Cloud. To enable other systems to use, to consume it, this service needs to be offered through the ServiceRegistry.</p> <p>Hereby the Interface Design Description (IDD) is provided to the serviceDiscovery \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/serviceregistry/service-discovery-generic-mqtt/#interface-description","title":"Interface Description","text":""},{"location":"api/serviceregistry/service-discovery-generic-mqtt/#register","title":"register","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a ServiceRegistrationRequest. </p> <pre><code>Topic: arrowhead/serviceregistry/service-discovery/register\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;authentication-data&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": &lt;0|1|2&gt;,\n  \"payload\": {\n    \"serviceDefinitionName\": \"kelvinInfo\",\n    \"version\": \"\",\n    \"expiresAt\": \"2030-01-01T00:00:00Z\",\n    \"metadata\": {\n      \"marginOfError\": 0.5\n    },\n    \"interfaces\": [\n      {\n        \"templateName\": \"generic_http\",\n        \"protocol\": \"http\",\n        \"policy\": \"NONE\",\n        \"properties\": {\n          \"accessAddresses\": [\"192.168.56.116\", \"tp2.greenhouse.com\"],\n          \"accessPort\": 8080,\n          \"basePath\": \"/kelvin\",\n          \"operations\": {\"query-temperature\": { \"method\": \"GET\", \"path\": \"/query\"} }\n        }\n      }\n    ]\n  }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is a ServiceRegistrationResponse.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"instanceId\": \"TemperatureProvider1|kelvinInfo|1.0.0\",\n    \"provider\": {\n      \"name\": \"TemperatureProvider1\",\n      \"metadata\": {\n        \"type\": \"temperature\",\n        \"scales\": [\n          \"kelvin\",\n          \"celsius\"\n        ],\n        \"customizable\": false\n      },\n      \"version\": \"2.1.0\",\n      \"addresses\": [\n        {\n          \"type\": \"HOSTNAME\",\n          \"address\": \"tp1.greenhouse.com\"\n        },\n        {\n          \"type\": \"IPV4\",\n          \"address\": \"192.168.66.1\"\n        }\n      ],\n      \"createdAt\": \"2025-03-09T18:03:26Z\",\n      \"updatedAt\": \"2025-03-09T18:03:26Z\"\n    },\n    \"serviceDefinition\": {\n      \"name\": \"kelvinInfo\",\n      \"createdAt\": \"2025-03-16T23:31:20Z\",\n      \"updatedAt\": \"2025-03-16T23:31:20Z\"\n    },\n    \"version\": \"1.0.0\",\n    \"expiresAt\": \"2030-01-01T00:00:00Z\",\n    \"metadata\": {\n      \"marginOfError\": 0.5\n    },\n    \"interfaces\": [\n      {\n        \"templateName\": \"generic_http\",\n        \"protocol\": \"http\",\n        \"policy\": \"NONE\",\n        \"properties\": {\n          \"accessAddresses\": [\n            \"192.168.56.116\",\n            \"tp2.greenhouse.com\"\n          ],\n          \"accessPort\": 8080,\n          \"operations\": {\n            \"query-temperature\": {\n              \"path\": \"/query\",\n              \"method\": \"GET\"\n            }\n          },\n          \"basePath\": \"/kelvin\"\n        }\n      }\n    ],\n    \"createdAt\": \"2025-03-16T23:34:17.785249400Z\",\n    \"updatedAt\": \"2025-03-16T23:34:17.785249400Z\"\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"temp-provider\",\n  \"payload\": {\n    \"errorMessage\": \"System not exists: TempProvider\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"arrowhead/serviceregistry/service-discovery/register\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-discovery-generic-mqtt/#lookup","title":"lookup","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info. The MQTTRequestTemplate can contain an optional parameter with the key \"verbose\" and a Boolean value. If verbose is true, detailed device and system information also returns (only if the provider supports it). The payload of the MQTTRequestTemplate is a ServiceLookupRequest.</p> <pre><code>Topic: arrowhead/serviceregistry/service-discovery/lookup\n\n{\n  \"traceId\": \"\"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;authentication-data&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": &lt;0|1|2&gt;,\n  \"params\": {\"verbose\": false},\n  \"payload\": {\n    \"instanceIds\": [\n    ],\n    \"providerNames\": [\n      \"TemperatureProvider1\"\n    ],\n    \"serviceDefinitionNames\": [\n      \"kelvinInfo\"\n    ],\n    \"versions\": [\n      \"1.0.0\"\n    ],\n    \"alivesAt\": \"\",\n    \"metadataRequirementsList\": [\n    ],\n    \"interfaceTemplateNames\": [\n    ],\n    \"interfacePropertyRequirementsList\": [\n    ],\n    \"policies\": [\n    ]\n  }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is a ServiceLookupResponse.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"entries\": [\n      {\n        \"instanceId\": \"TemperatureProvider1|kelvinInfo|1.0.0\",\n        \"provider\": {\n          \"name\": \"TemperatureProvider1\",\n          \"metadata\": {\n            \"type\": \"temperature\",\n            \"scales\": [\n              \"kelvin\",\n              \"celsius\"\n            ],\n            \"customizable\": false\n          },\n          \"version\": \"2.1.0\",\n          \"createdAt\": \"2025-03-09T18:03:26Z\",\n          \"updatedAt\": \"2025-03-09T18:03:26Z\"\n        },\n        \"serviceDefinition\": {\n          \"name\": \"kelvinInfo\",\n          \"createdAt\": \"2025-03-16T23:31:20Z\",\n          \"updatedAt\": \"2025-03-16T23:31:20Z\"\n        },\n        \"version\": \"1.0.0\",\n        \"expiresAt\": \"2030-01-01T00:00:00Z\",\n        \"metadata\": {\n          \"marginOfError\": 0.5\n        },\n        \"interfaces\": [\n          {\n            \"templateName\": \"generic_http\",\n            \"protocol\": \"http\",\n            \"policy\": \"NONE\",\n            \"properties\": {\n              \"accessAddresses\": [\n                \"192.168.56.116\",\n                \"tp2.greenhouse.com\"\n              ],\n              \"accessPort\": 8080,\n              \"operations\": {\n                \"query-temperature\": {\n                  \"path\": \"/query\",\n                  \"method\": \"GET\"\n                }\n              },\n              \"basePath\": \"/kelvin\"\n            }\n          }\n        ],\n        \"createdAt\": \"2025-03-16T23:34:18Z\",\n        \"updatedAt\": \"2025-03-16T23:34:18Z\"\n      }\n    ],\n    \"count\": 1\n  }\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens.  In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\": \"trace1\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"One of the following filters must be used: 'instanceIds', 'providerNames', 'serviceDefinitionNames'\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"arrowhead/serviceregistry/service-discovery/lookup\"\n  }\n}\n</code></pre>"},{"location":"api/serviceregistry/service-discovery-generic-mqtt/#revoke","title":"revoke","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a ServiceInstanceID. This is a unique identifier of the service instance to be deleted.</p> <pre><code>Topic: arrowhead/serviceregistry/service-discovery/revoke\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;authentication-data&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": &lt;0|1|2&gt;,\n  \"payload\": \"TemperatureProvider1|kelvinInfo|1.0.0\"\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully and an existing service instance entity was removed and <code>204</code> if no matching entity was found. </p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"TemperatureProvider1\",\n  \"payload\": \"\"\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 403,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"\"Revoking other systems' service is forbidden\"\",\n    \"errorCode\": 403,\n    \"exceptionType\": \"FORBIDDEN\",\n    \"origin\": \"arrowhead/serviceregistry/service-discovery/revoke\"\n  }\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/","title":"serviceRegistryManagement IDD","text":"<p>generic_http &amp; generic_https</p>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#overview","title":"Overview","text":"<p>This page describes the generic_http and generic_https service interface of serviceRegistryManagement service, which enables systems (with operator role or proper permissions) to handle (register, update, revoke, lookup) devices, systems, service instances, service definitions and interface templates in bulk. An example of this interaction is that an operator uses the Management Tool to register interface templates, systems, and service instances manually.</p> <p>Hereby the Interface Design Description (IDD) is provided to the serviceRegistryManagement \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#interface-description","title":"Interface Description","text":""},{"location":"api/serviceregistry/service-registry-management-generic-http/#device-query","title":"device-query","text":"<p>The service operation request requires an identity related header or certificate and may optionally include a DeviceQueryRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/mgmt/devices/query HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"pagination\": {\n    \"page\": 0,\n    \"size\": 10,\n    \"direction\": \"ASC\",\n    \"sortField\": \"name\"\n  },\n  \"deviceNames\": [\n  ],\n  \"addresses\": [\n  ],\n  \"addressType\": \"\",\n  \"metadataRequirementList\": [\n    {\n      \"volume.value\": {\"op\": \"GREATER_THAN_OR_EQUALS_TO\", \"value\": 90},\n      \"volume.unit\": {\"op\": \"EQUALS\", \"value\": \"dB\"}\n    }\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response also contains a DeviceListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"name\": \"ALARM1\",\n      \"metadata\": {\n        \"volume\": {\n          \"value\": 100,\n          \"unit\": \"dB\"\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"3a:f7:9c:12:8e:b5\"\n        }\n      ],\n      \"createdAt\": \"2025-03-10T09:09:58Z\",\n      \"updatedAt\": \"2025-03-10T09:09:58Z\"\n    },\n    {\n      \"name\": \"ALARM2\",\n      \"metadata\": {\n        \"volume\": {\n          \"value\": 110,\n          \"unit\": \"dB\"\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"3a:f7:9c:12:8e:bb\"\n        }\n      ],\n      \"createdAt\": \"2025-03-10T09:09:58Z\",\n      \"updatedAt\": \"2025-03-10T09:09:58Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Sort field is invalid. Only the following are allowed: [id, name, createdAt]\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceregistry/mgmt/devices/query\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#device-create","title":"device-create","text":"<p>The service operation request requires an identity related header or certificate and a DeviceListRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/mgmt/devices HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"devices\": [\n    {\n      \"name\": \"ALARM1\",\n      \"metadata\": {\n        \"volume\": { \"value\": 100, \"unit\": \"dB\"}\n      },\n      \"addresses\": [\n        \"3a:f7:9c:12:8e:b5\"\n      ]\n    },\n    {\n      \"name\": \"ALARM2\",\n      \"metadata\": {\n        \"volume\": { \"value\": 110, \"unit\": \"dB\"}\n      },\n      \"addresses\": [\n        \"3a:f7:9c:12:8e:bb\"\n      ]\n    }\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>201</code> if the device entities were successfully created. The response also contains a DeviceListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"name\": \"ALARM1\",\n      \"metadata\": {\n        \"volume\": {\n          \"value\": 100,\n          \"unit\": \"dB\"\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"3a:f7:9c:12:8e:b5\"\n        }\n      ],\n      \"createdAt\": \"2025-03-10T09:09:57.989904100Z\",\n      \"updatedAt\": \"2025-03-10T09:09:57.989904100Z\"\n    },\n    {\n      \"name\": \"ALARM2\",\n      \"metadata\": {\n        \"volume\": {\n          \"value\": 110,\n          \"unit\": \"dB\"\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"3a:f7:9c:12:8e:bb\"\n        }\n      ],\n      \"createdAt\": \"2025-03-10T09:09:58.010712400Z\",\n      \"updatedAt\": \"2025-03-10T09:09:58.010712400Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Device with names already exists: ALARM1, ALARM2\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceregistry/mgmt/devices\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#device-update","title":"device-update","text":"<p>The service operation request requires an identity related header or certificate and a DeviceListRequest JSON encoded body.</p> <pre><code>PUT /serviceregistry/mgmt/devices HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"devices\": [\n    {\n      \"name\": \"ALARM1\",\n      \"metadata\": {\n        \"volume\": { \"value\": 100, \"unit\": \"dB\"}\n      },\n      \"addresses\": [\n        \"4a:f7:9c:12:8e:b5\"\n      ]\n    },\n    {\n      \"name\": \"ALARM2\",\n      \"metadata\": {\n        \"volume\": { \"value\": 110, \"unit\": \"dB\"}\n      },\n      \"addresses\": [\n        \"4a:f7:9c:12:8e:bb\"\n      ]\n    }\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response also contains a DeviceListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"name\": \"ALARM1\",\n      \"metadata\": {\n        \"volume\": {\n          \"value\": 100,\n          \"unit\": \"dB\"\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"4a:f7:9c:12:8e:b5\"\n        }\n      ],\n      \"createdAt\": \"2025-03-10T09:09:58Z\",\n      \"updatedAt\": \"2025-03-10T09:09:58Z\"\n    },\n    {\n      \"name\": \"ALARM2\",\n      \"metadata\": {\n        \"volume\": {\n          \"value\": 110,\n          \"unit\": \"dB\"\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"4a:f7:9c:12:8e:bb\"\n        }\n      ],\n      \"createdAt\": \"2025-03-10T09:09:58Z\",\n      \"updatedAt\": \"2025-03-10T09:09:58Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Device(s) not exists: ALARM001, ALARM002\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"PUT /serviceregistry/mgmt/devices\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#device-remove","title":"device-remove","text":"<p>The service operation request requires an identity related header or certificate and a List&lt;DeviceName&gt; as query parameter using the key names, which contains the names of the devices to delete.</p> <pre><code>DELETE /serviceregistry/mgmt/devices?names=ALARM1&amp;names=ALARM2 HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The success response does not contain any response body.</p> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission, <code>423</code> if entity is not removable and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Device name list contains null or empty element\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"DELETE /serviceregistry/mgmt/devices\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#system-query","title":"system-query","text":"<p>The service operation request requires an identity related header or certificate. The URI can contain an optional query parameter with the key \"verbose\" and a Boolean value. If verbose is true, detailed device information also returns (only if the provider supports it). The request may optionally include a SystemQueryRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/mgmt/systems/query?verbose=false HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"pagination\": {\n    \"page\": 1,\n    \"size\": 1,\n    \"direction\": \"ASC\",\n    \"sortField\": \"\"\n  },\n  \"systemNames\": [\n  ],\n  \"addresses\": [\n  ],\n  \"addressType\": \"\",\n  \"metadataRequirementList\": [\n  ],\n  \"versions\": [\n    \"1.1\"\n  ],\n  \"deviceNames\": [\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and with a SystemListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"name\": \"AlertConsumer2\",\n      \"metadata\": {},\n      \"version\": \"1.1.0\",\n      \"addresses\": [\n        {\n          \"type\": \"IPV4\",\n          \"address\": \"192.168.1.2\"\n        }\n      ],\n      \"device\": {\n        \"name\": \"ALARM2\"\n      },\n      \"createdAt\": \"2025-03-14T13:08:22Z\",\n      \"updatedAt\": \"2025-03-14T13:08:22Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"The page size cannot be larger than 1000\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceregistry/mgmt/systems/query\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#system-create","title":"system-create","text":"<p>The service operation request requires an identity related header or certificate and a SystemListRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/mgmt/systems HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"systems\": [\n    {\n      \"name\": \"AlertConsumer1\",\n      \"metadata\": {\n      },\n      \"version\": \"1.1\",\n      \"addresses\": [\n        \"192.168.1.1\"\n      ],\n      \"deviceName\": \"ALARM1\"\n    },\n    {\n      \"name\": \"AlertConsumer2\",\n      \"metadata\": {\n      },\n      \"version\": \"1.1\",\n      \"addresses\": [\n        \"192.168.1.2\"\n      ],\n      \"deviceName\": \"ALARM2\"\n    }\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>201</code> if the system entities were successfully created. The response also contains a SystemListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"name\": \"AlertConsumer1\",\n      \"metadata\": {},\n      \"version\": \"1.1.0\",\n      \"addresses\": [\n        {\n          \"type\": \"IPV4\",\n          \"address\": \"192.168.1.1\"\n        }\n      ],\n      \"device\": {\n        \"name\": \"ALARM1\",\n        \"metadata\": {\n          \"volume\": {\n            \"value\": 100,\n            \"unit\": \"dB\"\n          }\n        },\n        \"addresses\": [\n          {\n            \"type\": \"MAC\",\n            \"address\": \"3a:f7:9c:12:8e:b5\"\n          }\n        ],\n        \"createdAt\": \"2025-03-14T13:07:34Z\",\n        \"updatedAt\": \"2025-03-14T13:07:34Z\"\n      },\n      \"createdAt\": \"2025-03-14T13:08:21.856389Z\",\n      \"updatedAt\": \"2025-03-14T13:08:21.856389Z\"\n    },\n    {\n      \"name\": \"AlertConsumer2\",\n      \"metadata\": {},\n      \"version\": \"1.1.0\",\n      \"addresses\": [\n        {\n          \"type\": \"IPV4\",\n          \"address\": \"192.168.1.2\"\n        }\n      ],\n      \"device\": {\n        \"name\": \"ALARM2\",\n        \"metadata\": {\n          \"volume\": {\n            \"value\": 110,\n            \"unit\": \"dB\"\n          }\n        },\n        \"addresses\": [\n          {\n            \"type\": \"MAC\",\n            \"address\": \"3a:f7:9c:12:8e:bb\"\n          }\n        ],\n        \"createdAt\": \"2025-03-14T13:07:34Z\",\n        \"updatedAt\": \"2025-03-14T13:07:34Z\"\n      },\n      \"createdAt\": \"2025-03-14T13:08:21.858647200Z\",\n      \"updatedAt\": \"2025-03-14T13:08:21.858647200Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission  and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Systems with names already exist: AlertConsumer1, AlertConsumer2\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceregistry/mgmt/systems\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#system-update","title":"system-update","text":"<p>The service operation request requires an identity related header or certificate and a SystemListRequest JSON encoded body.</p> <pre><code>PUT /serviceregistry/mgmt/systems HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"systems\": [\n    {\n      \"name\": \"AlertConsumer1\",\n      \"metadata\": {\n      },\n      \"version\": \"1.2\",\n      \"addresses\": [\n        \"192.168.1.1\"\n      ],\n      \"deviceName\": \"ALARM1\"\n    },\n    {\n      \"name\": \"AlertConsumer2\",\n      \"metadata\": {\n      },\n      \"version\": \"1.2\",\n      \"addresses\": [\n        \"192.168.1.2\"\n      ],\n      \"deviceName\": \"ALARM2\"\n    }\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if the system entities were successfully updated. The response also contains a SystemListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"name\": \"AlertConsumer1\",\n      \"metadata\": {},\n      \"version\": \"1.2.0\",\n      \"addresses\": [\n        {\n          \"type\": \"IPV4\",\n          \"address\": \"192.168.1.1\"\n        }\n      ],\n      \"device\": {\n        \"name\": \"ALARM1\",\n        \"metadata\": {\n          \"volume\": {\n            \"value\": 100,\n            \"unit\": \"dB\"\n          }\n        },\n        \"addresses\": [\n          {\n            \"type\": \"MAC\",\n            \"address\": \"3a:f7:9c:12:8e:b5\"\n          }\n        ],\n        \"createdAt\": \"2025-03-14T13:07:34Z\",\n        \"updatedAt\": \"2025-03-14T13:07:34Z\"\n      },\n      \"createdAt\": \"2025-03-14T13:08:22Z\",\n      \"updatedAt\": \"2025-03-14T13:51:03.159696600Z\"\n    },\n    {\n      \"name\": \"AlertConsumer2\",\n      \"metadata\": {},\n      \"version\": \"1.2.0\",\n      \"addresses\": [\n        {\n          \"type\": \"IPV4\",\n          \"address\": \"192.168.1.2\"\n        }\n      ],\n      \"device\": {\n        \"name\": \"ALARM2\",\n        \"metadata\": {\n          \"volume\": {\n            \"value\": 110,\n            \"unit\": \"dB\"\n          }\n        },\n        \"addresses\": [\n          {\n            \"type\": \"MAC\",\n            \"address\": \"3a:f7:9c:12:8e:bb\"\n          }\n        ],\n        \"createdAt\": \"2025-03-14T13:07:34Z\",\n        \"updatedAt\": \"2025-03-14T13:07:34Z\"\n      },\n      \"createdAt\": \"2025-03-14T13:08:22Z\",\n      \"updatedAt\": \"2025-03-14T13:51:03.169626100Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission  and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Duplicated system name: AlertConsumer1\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"PUT /serviceregistry/mgmt/systems\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#system-remove","title":"system-remove","text":"<p>The service operation request requires an identity related header or certificate and a List&lt;SystemName&gt; as query parameter using the key names, which contains the names of the systems to delete.</p> <pre><code>DELETE /serviceregistry/mgmt/systems?names=AlertConsumer1&amp;names=AlertConsumer2 HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The success response does not contain any response body.</p> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Invalid authorization header\",\n  \"errorCode\": 401,\n  \"exceptionType\": \"AUTH\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#service-definition-query","title":"service-definition-query","text":"<p>The service operation request requires an identity related header or certificate and may optionally include a PageRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/mgmt/service-definitions/query HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"page\": 2,\n  \"size\": 4,\n  \"direction\": \"DESC\",\n  \"sortField\": \"name\"\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response also contains a ServiceDefinitionListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"name\": \"orchestration\",\n      \"createdAt\": \"2025-03-12T11:07:23Z\",\n      \"updatedAt\": \"2025-03-12T11:07:23Z\"\n    },\n    {\n      \"name\": \"monitor\",\n      \"createdAt\": \"2025-01-31T09:14:54Z\",\n      \"updatedAt\": \"2025-01-31T09:14:54Z\"\n    },\n    {\n      \"name\": \"kelvinInfo2\",\n      \"createdAt\": \"2025-03-15T19:47:47Z\",\n      \"updatedAt\": \"2025-03-15T19:47:47Z\"\n    },\n    {\n      \"name\": \"kelvinInfo1\",\n      \"createdAt\": \"2025-03-15T19:47:47Z\",\n      \"updatedAt\": \"2025-03-15T19:47:47Z\"\n    }\n  ],\n  \"count\": 24\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Requester has no management permission\",\n  \"errorCode\": 403,\n  \"exceptionType\": \"FORBIDDEN\",\n  \"origin\": \"http://localhost:8443/serviceregistry/mgmt/service-definitions/query\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#service-definition-create","title":"service-definition-create","text":"<p>The service operation request requires an identity related header or certificate and a ServiceDefinitionListRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/mgmt/service-definitions HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"serviceDefinitionNames\": [\n    \"alertService1\", \"alertService2\"\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>201</code> if the service definition entities were successfully created. The response also contains a ServiceDefinitionListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"name\": \"alertService1\",\n      \"createdAt\": \"2025-03-15T19:31:03.728040300Z\",\n      \"updatedAt\": \"2025-03-15T19:31:03.728040300Z\"\n    },\n    {\n      \"name\": \"alertService2\",\n      \"createdAt\": \"2025-03-15T19:31:03.732592400Z\",\n      \"updatedAt\": \"2025-03-15T19:31:03.732592400Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"The specified name does not match the naming convention: alert@service1\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceregistry/mgmt/service-definitions\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#service-definition-remove","title":"service-definition-remove","text":"<p>The service operation request requires an identity related header or certificate and a List&lt;ServiceName&gt; as query parameter using the key names, which contains the names of the service definitions to delete.</p> <pre><code>DELETE /serviceregistry/mgmt/service-definitions?names=alertService1&amp;names=alertService2 HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The success response does not contain any response body.</p> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Service definition name list is missing or empty\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"DELETE /serviceregistry/mgmt/service-definitions\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#service-query","title":"service-query","text":"<p>The service operation request requires an identity related header or certificate and a ServiceQueryRequest JSON encoded body. The URI can contain an optional query parameter with the key \"verbose\" and a Boolean value. If verbose is true, detailed system and device information also returns (only if the provider supports it).</p> <pre><code>POST /serviceregistry/mgmt/service-instances/query?verbose=false HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"pagination\": {\n    \"page\": 0,\n    \"size\": 2,\n    \"direction\": \"ASC\",\n    \"sortField\": \"createdAt\"\n  },\n  \"instanceIds\": [\n  ],\n  \"providerNames\": [\n  ],\n  \"serviceDefinitionNames\": [\n    \"alertService1\"\n  ],\n  \"versions\": [\n    \"1.0.0\", \"1.0.1\"\n  ],\n  \"alivesAt\": \"2026-01-01T00:00:00Z\",\n  \"metadataRequirementsList\": [\n  ],\n  \"addressTypes\": [\n  ],\n  \"interfaceTemplateNames\": [\n    \"generic_mqtt\"\n  ],\n  \"interfacePropertyRequirementsList\": [\n    {\n      \"operations\": { \"op\": \"CONTAINS\", \"value\": \"warn\"}\n    }\n  ],\n  \"policies\": [\n    \"NONE\"\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The response also contains a ServiceListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"instanceId\": \"AlertProvider1|alertService1|1.0.0\",\n      \"provider\": {\n        \"name\": \"AlertProvider1\",\n        \"metadata\": {},\n        \"version\": \"1.1.0\",\n        \"createdAt\": \"2025-03-15T20:22:44Z\",\n        \"updatedAt\": \"2025-03-15T20:22:44Z\"\n      },\n      \"serviceDefinition\": {\n        \"name\": \"alertService1\",\n        \"createdAt\": \"2025-03-15T20:21:43Z\",\n        \"updatedAt\": \"2025-03-15T20:21:43Z\"\n      },\n      \"version\": \"1.0.0\",\n      \"expiresAt\": \"2028-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"delay\": {\n          \"value\": 200,\n          \"unit\": \"ms\"\n        }\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic_mqtt\",\n          \"protocol\": \"tcp\",\n          \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\n              \"192.168.1.3\"\n            ],\n            \"accessPort\": 1883,\n            \"baseTopic\": \"heat-alert\",\n            \"operations\": [\n              \"alert\",\n              \"warn\"\n            ]\n          }\n        }\n      ],\n      \"createdAt\": \"2025-03-15T21:52:40Z\",\n      \"updatedAt\": \"2025-03-15T21:52:40Z\"\n    }    \n  ],\n  \"count\": 1\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Sort field is invalid. Only the following are allowed: [id, name, createdAt]\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceregistry/mgmt/service-instances/query\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#service-create","title":"service-create","text":"<p>The service operation request requires an identity related header or certificate and a ServiceCreateListRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/mgmt/service-instances HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"instances\": [\n    {\n      \"systemName\": \"AlertProvider1\",\n      \"serviceDefinitionName\": \"alertService1\",\n      \"version\": \"\",\n      \"expiresAt\": \"2028-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"delay\": {\"value\": 200, \"unit\": \"ms\"}\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic_mqtt\",\n          \"protocol\": \"tcp\", \n          \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\"192.168.1.3\"],\n            \"accessPort\": 1883,\n            \"baseTopic\": \"heat-alert\", \"operations\": [\"alert\", \"warn\"]\n          }\n        }\n      ]\n    },\n    {\n      \"systemName\": \"AlertProvider2\",\n      \"serviceDefinitionName\": \"alertService2\",\n      \"version\": \"\",\n      \"expiresAt\": \"2027-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"delay\": {\"value\": 200, \"unit\": \"ms\"}\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic_mqtt\",\n          \"protocol\": \"tcp\", \n          \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\"192.168.1.4\"],\n            \"accessPort\": 1883,\n            \"baseTopic\": \"heat-alert\", \"operations\": [\"warn\"]\n          }\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>201</code> if the service instance entities were created successfully. The response also contains a ServiceListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"instanceId\": \"AlertProvider1|alertService1|1.0.0\",\n      \"provider\": {\n        \"name\": \"AlertProvider1\",\n        \"metadata\": {},\n        \"version\": \"1.1.0\",\n        \"addresses\": [\n          {\n            \"type\": \"IPV4\",\n            \"address\": \"192.168.1.1\"\n          }\n        ],\n        \"device\": {\n          \"name\": \"ALARM1\",\n          \"metadata\": {\n            \"volume\": {\n              \"value\": 100,\n              \"unit\": \"dB\"\n            }\n          },\n          \"addresses\": [\n            {\n              \"type\": \"MAC\",\n              \"address\": \"3a:f7:9c:12:8e:b5\"\n            }\n          ],\n          \"createdAt\": \"2025-03-14T13:07:34Z\",\n          \"updatedAt\": \"2025-03-14T13:07:34Z\"\n        },\n        \"createdAt\": \"2025-03-15T20:22:44Z\",\n        \"updatedAt\": \"2025-03-15T20:22:44Z\"\n      },\n      \"serviceDefinition\": {\n        \"name\": \"alertService1\",\n        \"createdAt\": \"2025-03-15T20:21:43Z\",\n        \"updatedAt\": \"2025-03-15T20:21:43Z\"\n      },\n      \"version\": \"1.0.0\",\n      \"expiresAt\": \"2028-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"delay\": {\n          \"value\": 200,\n          \"unit\": \"ms\"\n        }\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic_mqtt\",\n          \"protocol\": \"tcp\",\n          \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\n              \"192.168.1.3\"\n            ],\n            \"accessPort\": 1883,\n            \"baseTopic\": \"heat-alert\",\n            \"operations\": [\n              \"alert\",\n              \"warn\"\n            ]\n          }\n        }\n      ],\n      \"createdAt\": \"2025-03-15T21:52:40.389503Z\",\n      \"updatedAt\": \"2025-03-15T21:52:40.389503Z\"\n    },\n    {\n      \"instanceId\": \"AlertProvider2|alertService2|1.0.0\",\n      \"provider\": {\n        \"name\": \"AlertProvider2\",\n        \"metadata\": {},\n        \"version\": \"1.1.0\",\n        \"addresses\": [\n          {\n            \"type\": \"IPV4\",\n            \"address\": \"192.168.1.2\"\n          }\n        ],\n        \"device\": {\n          \"name\": \"ALARM2\",\n          \"metadata\": {\n            \"volume\": {\n              \"value\": 110,\n              \"unit\": \"dB\"\n            }\n          },\n          \"addresses\": [\n            {\n              \"type\": \"MAC\",\n              \"address\": \"3a:f7:9c:12:8e:bb\"\n            }\n          ],\n          \"createdAt\": \"2025-03-14T13:07:34Z\",\n          \"updatedAt\": \"2025-03-14T13:07:34Z\"\n        },\n        \"createdAt\": \"2025-03-15T20:22:44Z\",\n        \"updatedAt\": \"2025-03-15T20:22:44Z\"\n      },\n      \"serviceDefinition\": {\n        \"name\": \"alertService2\",\n        \"createdAt\": \"2025-03-15T20:21:43Z\",\n        \"updatedAt\": \"2025-03-15T20:21:43Z\"\n      },\n      \"version\": \"1.0.0\",\n      \"expiresAt\": \"2027-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"delay\": {\n          \"value\": 200,\n          \"unit\": \"ms\"\n        }\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic_mqtt\",\n          \"protocol\": \"tcp\",\n          \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\n              \"192.168.1.4\"\n            ],\n            \"accessPort\": 1883,\n            \"baseTopic\": \"heat-alert\",\n            \"operations\": [\n              \"warn\"\n            ]\n          }\n        }\n      ],\n      \"createdAt\": \"2025-03-15T21:52:40.394058800Z\",\n      \"updatedAt\": \"2025-03-15T21:52:40.394058800Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>\n{\n  \"errorMessage\": \"Service definition name is empty\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceregistry/mgmt/service-instances\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#service-update","title":"service-update","text":"<p>The service operation request requires an identity related header or certificate and a ServiceUpdateListRequest JSON encoded body.</p> <pre><code>PUT /serviceregistry/mgmt/service-instances HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"instances\": [\n    {\n      \"instanceId\": \"AlertProvider1|alertService1|1.0.0\",\n      \"expiresAt\": \"2028-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"delay\": {\"value\": 200, \"unit\": \"ms\"}\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic_mqtt\",\n          \"protocol\": \"tcp\", \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\"192.168.1.3\"],\n            \"accessPort\": 1883,\n            \"baseTopic\": \"heat-alert\", \"operations\": [\"alert\", \"warn\", \"info\"]\n          }\n        }\n      ]\n    },\n    {\n      \"instanceId\": \"AlertProvider2|alertService2|1.0.0\",\n      \"expiresAt\": \"2027-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"delay\": {\"value\": 200, \"unit\": \"ms\"}\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic_mqtt\",\n          \"protocol\": \"tcp\", \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\"192.168.1.4\"],\n            \"accessPort\": 1883,\n            \"baseTopic\": \"heat-alert\", \"operations\": [\"warn\"]\n          }\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if the service instance entities were updated successfully. The response also contains a ServiceListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"instanceId\": \"AlertProvider1|alertService1|1.0.0\",\n      \"provider\": {\n        \"name\": \"AlertProvider1\",\n        \"metadata\": {},\n        \"version\": \"1.1.0\",\n        \"addresses\": [\n          {\n            \"type\": \"IPV4\",\n            \"address\": \"192.168.1.1\"\n          }\n        ],\n        \"device\": {\n          \"name\": \"ALARM1\",\n          \"metadata\": {\n            \"volume\": {\n              \"value\": 100,\n              \"unit\": \"dB\"\n            }\n          },\n          \"addresses\": [\n            {\n              \"type\": \"MAC\",\n              \"address\": \"3a:f7:9c:12:8e:b5\"\n            }\n          ],\n          \"createdAt\": \"2025-03-14T13:07:34Z\",\n          \"updatedAt\": \"2025-03-14T13:07:34Z\"\n        },\n        \"createdAt\": \"2025-03-15T20:22:44Z\",\n        \"updatedAt\": \"2025-03-15T20:22:44Z\"\n      },\n      \"serviceDefinition\": {\n        \"name\": \"alertService1\",\n        \"createdAt\": \"2025-03-15T20:21:43Z\",\n        \"updatedAt\": \"2025-03-15T20:21:43Z\"\n      },\n      \"version\": \"1.0.0\",\n      \"expiresAt\": \"2028-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"delay\": {\n          \"value\": 200,\n          \"unit\": \"ms\"\n        }\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic_mqtt\",\n          \"protocol\": \"tcp\",\n          \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\n              \"192.168.1.3\"\n            ],\n            \"accessPort\": 1883,\n            \"baseTopic\": \"heat-alert\",\n            \"operations\": [\n              \"alert\",\n              \"warn\",\n              \"info\"\n            ]\n          }\n        }\n      ],\n      \"createdAt\": \"2025-03-15T21:52:40Z\",\n      \"updatedAt\": \"2025-03-15T22:30:44.209238800Z\"\n    },\n    {\n      \"instanceId\": \"AlertProvider2|alertService2|1.0.0\",\n      \"provider\": {\n        \"name\": \"AlertProvider2\",\n        \"metadata\": {},\n        \"version\": \"1.1.0\",\n        \"addresses\": [\n          {\n            \"type\": \"IPV4\",\n            \"address\": \"192.168.1.2\"\n          }\n        ],\n        \"device\": {\n          \"name\": \"ALARM2\",\n          \"metadata\": {\n            \"volume\": {\n              \"value\": 110,\n              \"unit\": \"dB\"\n            }\n          },\n          \"addresses\": [\n            {\n              \"type\": \"MAC\",\n              \"address\": \"3a:f7:9c:12:8e:bb\"\n            }\n          ],\n          \"createdAt\": \"2025-03-14T13:07:34Z\",\n          \"updatedAt\": \"2025-03-14T13:07:34Z\"\n        },\n        \"createdAt\": \"2025-03-15T20:22:44Z\",\n        \"updatedAt\": \"2025-03-15T20:22:44Z\"\n      },\n      \"serviceDefinition\": {\n        \"name\": \"alertService2\",\n        \"createdAt\": \"2025-03-15T20:21:43Z\",\n        \"updatedAt\": \"2025-03-15T20:21:43Z\"\n      },\n      \"version\": \"1.0.0\",\n      \"expiresAt\": \"2027-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"delay\": {\n          \"value\": 200,\n          \"unit\": \"ms\"\n        }\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic_mqtt\",\n          \"protocol\": \"tcp\",\n          \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\n              \"192.168.1.4\"\n            ],\n            \"accessPort\": 1883,\n            \"baseTopic\": \"heat-alert\",\n            \"operations\": [\n              \"warn\"\n            ]\n          }\n        }\n      ],\n      \"createdAt\": \"2025-03-15T21:52:40Z\",\n      \"updatedAt\": \"2025-03-15T22:30:44.270475Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Instance id is empty\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"PUT /serviceregistry/mgmt/service-instances\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#service-remove","title":"service-remove","text":"<p>The service operation request requires an identity related header or certificate and a List&lt;ServiceInstanceID&gt; as query parameter using the key serviceInstances, which contains the identitifers of the service instances that need to be removed.</p> <pre><code>DELETE /serviceregistry/mgmt/service-instances?serviceInstances=AlertProvider1%7CalertService1%7C1.0.0&amp;serviceInstances=AlertProvider2%7CalertService2%7C1.0.0 HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The success response does not contain any response body.</p> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Requester has no management permission\",\n  \"errorCode\": 403,\n  \"exceptionType\": \"FORBIDDEN\",\n  \"origin\": \"http://localhost:8443/serviceregistry/mgmt/service-instances\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#interface-template-query","title":"interface-template-query","text":"<p>The service operation request requires an identity related header or certificate and may optionally include an InterfaceTemplateQueryRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/mgmt/interface-templates/query HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"pagination\": {\n    \"page\": 1,\n    \"size\": 1,\n    \"direction\": \"ASC\",\n    \"sortField\": \"name\"\n  },\n  \"templateNames\": [\n  ],\n  \"protocols\": [\n    \"tcp\"\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> called successfully. The response also contains an InterfaceTemplateListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"name\": \"generic_mqtt\",\n      \"protocol\": \"tcp\",\n      \"propertyRequirements\": [\n        {\n          \"name\": \"accessAddresses\",\n          \"mandatory\": true,\n          \"validator\": \"NOT_EMPTY_ADDRESS_LIST\",\n          \"validatorParams\": []\n        },\n        {\n          \"name\": \"accessPort\",\n          \"mandatory\": true,\n          \"validator\": \"PORT\",\n          \"validatorParams\": []\n        },\n        {\n          \"name\": \"baseTopic\",\n          \"mandatory\": true\n        },\n        {\n          \"name\": \"operations\",\n          \"mandatory\": true,\n          \"validator\": \"NOT_EMPTY_STRING_SET\",\n          \"validatorParams\": [\n            \"OPERATION\"\n          ]\n        }\n      ],\n      \"createdAt\": \"2024-12-09T18:52:48Z\",\n      \"updatedAt\": \"2024-12-09T18:52:48Z\"\n    }\n  ],\n  \"count\": 3\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>\"The specified interface template name does not match the naming convention: \"\n{\n  \"errorMessage\": \"The specified interface template name does not match the naming convention: general@mqtt\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceregistry/mgmt/interface-templates/query\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#interface-template-create","title":"interface-template-create","text":"<p>The service operation request requires an identity related header or certificate and an InterfaceTemplateListRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/mgmt/interface-templates HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n\n{\n  \"interfaceTemplates\": [\n    {\n      \"name\": \"custom_ftp\",\n      \"protocol\": \"tcp\",\n      \"propertyRequirements\": [\n        {\n          \"name\": \"accessAddresses\",\n          \"mandatory\": true,\n          \"validator\": \"not_empty_address_list\",\n          \"validatorParams\": [\n          ]\n        }\n      ]\n    },\n    {\n      \"name\": \"my_awesome_ftp\",\n      \"protocol\": \"tcp\",\n      \"propertyRequirements\": [\n        {\n          \"name\": \"accessAddresses\",\n          \"mandatory\": true,\n          \"validator\": \"not_empty_address_list\",\n          \"validatorParams\": [\n          ]\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>201</code> if the interface template entities were successfully created. The response also contains an InterfaceTemplateListResponse JSON encoded body.</p> <pre><code>{\n  \"entries\": [\n    {\n      \"name\": \"my_awesome_ftp\",\n      \"protocol\": \"tcp\",\n      \"propertyRequirements\": [\n        {\n          \"name\": \"accessAddresses\",\n          \"mandatory\": true,\n          \"validator\": \"NOT_EMPTY_ADDRESS_LIST\",\n          \"validatorParams\": []\n        }\n      ],\n      \"createdAt\": \"2025-03-15T23:09:00.882593100Z\",\n      \"updatedAt\": \"2025-03-15T23:09:00.882593100Z\"\n    },\n    {\n      \"name\": \"custom_ftp\",\n      \"protocol\": \"tcp\",\n      \"propertyRequirements\": [\n        {\n          \"name\": \"accessAddresses\",\n          \"mandatory\": true,\n          \"validator\": \"NOT_EMPTY_ADDRESS_LIST\",\n          \"validatorParams\": []\n        }\n      ],\n      \"createdAt\": \"2025-03-15T23:09:00.892877600Z\",\n      \"updatedAt\": \"2025-03-15T23:09:00.892877600Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"Interface template already exists: custom_ftp\",\n  \"errorCode\": 400,\n  \"exceptionType\": \"INVALID_PARAMETER\",\n  \"origin\": \"POST /serviceregistry/mgmt/interface-templates\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-http/#interface-template-remove","title":"interface-template-remove","text":"<p>The service operation request requires an identity related header or certificate and a List&lt;InterfaceName&gt; as query parameter using the key names, which contains the string identifier of the interface templates that need to be removed.</p> <pre><code>DELETE /serviceregistry/mgmt/interface-templates?names=custom_ftp&amp;names=my_awesome_ftp HTTP/1.1\nAuthorization: Bearer &lt;authorization-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully. The success response does not contain any response body.</p> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\": \"No authorization header has been provided\",\n  \"errorCode\": 401,\n  \"exceptionType\": \"AUTH\"\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-mqtt/","title":"serviceRegistryManagement IDD","text":"<p>generic_mqtt &amp; generic_mqtts </p>"},{"location":"api/serviceregistry/service-registry-management-generic-mqtt/#overview","title":"Overview","text":"<p>TThis page describes the generic_mqtt and generic_mqtts service interface of the serviceRegistryManagement service, which enables systems (with operator role or proper permissions) to handle (register, update, revoke, lookup) devices, systems, service instances, service definitions and interface templates in bulk. An example of this interaction is that an operator uses the Management Tool to register interface templates, systems, and service instances manually.</p> <p>Hereby the Interface Design Description (IDD) is provided to the serviceRegistryManagement \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/serviceregistry/service-registry-management-generic-mqtt/#interface-description","title":"Interface Description","text":""},{"location":"api/serviceregistry/service-registry-management-generic-mqtt/#device-query","title":"device-query","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is an optional DeviceQueryRequest.</p> <pre><code>Topic: arrowhead/serviceregistry/management/device-query\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": &lt;0|1|2&gt;,\n  \"payload\": {\n    \"pagination\": {\n      \"page\": 0,\n      \"size\": 10,\n      \"direction\": \"ASC\",\n      \"sortField\": \"name\"\n    },\n    \"deviceNames\": [\n    ],\n    \"addresses\": [\n    ],\n    \"addressType\": \"\",\n    \"metadataRequirementList\": [\n      {\n        \"volume.value\": { \"op\": \"GREATER_THAN_OR_EQUALS_TO\", \"value\": 90 },\n        \"volume.unit\": { \"op\": \"EQUALS\", \"value\": \"dB\" }\n      }\n    ]\n  }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is a DeviceListResponse.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"entries\": [\n      {\n        \"name\": \"ALARM1\",\n        \"metadata\": {\n          \"volume\": {\n            \"value\": 100,\n            \"unit\": \"dB\"\n          }\n        },\n        \"addresses\": [\n          {\n            \"type\": \"MAC\",\n            \"address\": \"4a:f7:9c:12:8e:b5\"\n          }\n        ],\n        \"createdAt\": \"2025-05-04T18:51:46Z\",\n        \"updatedAt\": \"2025-05-04T18:51:46Z\"\n      },\n      {\n        \"name\": \"ALARTM2\",\n        \"metadata\": {\n          \"volume\": {\n            \"value\": 110,\n            \"unit\": \"dB\"\n          }\n        },\n        \"addresses\": [\n          {\n            \"type\": \"MAC\",\n            \"address\": \"4a:f7:9c:12:8e:bb\"\n          }\n        ],\n        \"createdAt\": \"2025-05-04T18:51:46Z\",\n        \"updatedAt\": \"2025-05-04T18:51:46Z\"\n      }\n    ],\n    \"count\": 2\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"Sort field is invalid. Only the following are allowed: [id, name, createdAt]\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"arrowhead/serviceregistry/management/device-query\"\n  }\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-mqtt/#device-create","title":"device-create","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a DeviceListRequest.</p> <pre><code>Topic: arrowhead/serviceregistry/management/device-create\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": &lt;0|1|2&gt;,\n  \"payload\": {\n    \"devices\": [\n      {\n        \"name\": \"ALARM1\",\n        \"metadata\": {\n          \"volume\": { \"value\": 100, \"unit\": \"dB\" }\n        },\n        \"addresses\": [\n          \"3a:f7:9c:12:8e:b5\"\n        ]\n      },\n      {\n        \"name\": \"ALARM2\",\n        \"metadata\": {\n          \"volume\": { \"value\": 110, \"unit\": \"dB\" }\n        },\n        \"addresses\": [\n          \"3a:f7:9c:12:8e:bb\"\n        ]\n      }\n    ]\n  }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>201</code> if the device entities were successfully created. The response template payload is a DeviceListResponse.</p> <pre><code>{\n  \"status\": 201,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"entries\": [\n      {\n        \"name\": \"ALARM1\",\n        \"metadata\": {\n          \"volume\": {\n            \"value\": 100,\n            \"unit\": \"dB\"\n          }\n        },\n        \"addresses\": [\n          {\n            \"type\": \"MAC\",\n            \"address\": \"3a:f7:9c:12:8e:b5\"\n          }\n        ],\n        \"createdAt\": \"2025-05-04T18:51:46.399919700Z\",\n        \"updatedAt\": \"2025-05-04T18:51:46.399919700Z\"\n      },\n      {\n        \"name\": \"ALARM2\",\n        \"metadata\": {\n          \"volume\": {\n            \"value\": 110,\n            \"unit\": \"dB\"\n          }\n        },\n        \"addresses\": [\n          {\n            \"type\": \"MAC\",\n            \"address\": \"3a:f7:9c:12:8e:bb\"\n          }\n        ],\n        \"createdAt\": \"2025-05-04T18:51:46.409974400Z\",\n        \"updatedAt\": \"2025-05-04T18:51:46.409974400Z\"\n      }\n    ],\n    \"count\": 2\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"Device with names already exists: ALARM1, ALARM2\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"arrowhead/serviceregistry/management/device-create\"\n  }\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-mqtt/#device-update","title":"device-update","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a DeviceListRequest.</p> <pre><code>Topic: arrowhead/serviceregistry/management/device-update\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": &lt;0|1|2&gt;,\n  \"payload\": {\n    \"devices\": [\n      {\n        \"name\": \"ALARM1\",\n        \"metadata\": {\n          \"volume\": { \"value\": 100, \"unit\": \"dB\" }\n        },\n        \"addresses\": [\n          \"4a:f7:9c:12:8e:b5\"\n        ]\n      },\n      {\n        \"name\": \"ALARM2\",\n        \"metadata\": {\n          \"volume\": { \"value\": 110, \"unit\": \"dB\" }\n        },\n        \"addresses\": [\n          \"4a:f7:9c:12:8e:bb\"\n        ]\n      }\n    ]\n  }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is a DeviceListResponse.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"entries\": [\n      {\n        \"name\": \"ALARM1\",\n        \"metadata\": {\n          \"volume\": {\n            \"value\": 100,\n            \"unit\": \"dB\"\n          }\n        },\n        \"addresses\": [\n          {\n            \"type\": \"MAC\",\n            \"address\": \"4a:f7:9c:12:8e:b5\"\n          }\n        ],\n        \"createdAt\": \"2025-05-04T18:51:46Z\",\n        \"updatedAt\": \"2025-05-04T18:51:46Z\"\n      },\n      {\n        \"name\": \"ALARM2\",\n        \"metadata\": {\n          \"volume\": {\n            \"value\": 110,\n            \"unit\": \"dB\"\n          }\n        },\n        \"addresses\": [\n          {\n            \"type\": \"MAC\",\n            \"address\": \"4a:f7:9c:12:8e:bb\"\n          }\n        ],\n        \"createdAt\": \"2025-05-04T18:51:46Z\",\n        \"updatedAt\": \"2025-05-04T18:51:46Z\"\n      }\n    ],\n    \"count\": 2\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"Device(s) not exists: ALARM001, ALARM002\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"arrowhead/serviceregistry/management/device-update\"\n  }\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-mqtt/#device-remove","title":"device-remove","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a List&lt;DeviceName&gt; which contains the names of the devices to delete.</p> <pre><code>Topic: arrowhead/serviceregistry/management/device-remove\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": &lt;0|1|2&gt;,\n  \"payload\": [\"ALARM1\", \"ALARM2\"]\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. In this case the response payload is empty.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": \"\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission, <code>423</code> if the entity is not removable and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 423,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"At least one system is assigned to these devices\",\n    \"errorCode\": 423,\n    \"exceptionType\": \"LOCKED\",\n    \"origin\": \"arrowhead/serviceregistry/management/device-remove\"\n  }\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-mqtt/#system-query","title":"system-query","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is an optional SystemQueryRequest. The params can contain an optional KeyValuePair with the key \"verbose\" and a Boolean value. If verbose is true, detailed device information also returns (only if the provider supports it).</p> <pre><code>Topic: arrowhead/serviceregistry/management/system-query\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": &lt;0|1|2&gt;,\n  \"params\": {\"verbose\": false},\n  \"payload\": {\n    \"pagination\": {\n      \"page\": 1,\n      \"size\": 1,\n      \"direction\": \"ASC\",\n      \"sortField\": \"\"\n    },\n    \"systemNames\": [\n    ],\n    \"addresses\": [\n    ],\n    \"addressType\": \"\",\n    \"metadataRequirementList\": [\n    ],\n    \"versions\": [\n      \"1.1\"\n    ],\n    \"deviceNames\": [\n    ]\n  }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is a SystemListResponse.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"entries\": [\n      {\n        \"name\": \"AlertConsumer2\",\n        \"metadata\": {},\n        \"version\": \"1.1.0\",\n        \"addresses\": [\n          {\n            \"type\": \"IPV4\",\n            \"address\": \"192.168.1.2\"\n          }\n        ],\n        \"createdAt\": \"2025-03-15T20:22:44Z\",\n        \"updatedAt\": \"2025-03-15T20:22:44Z\"\n      }\n    ],\n    \"count\": 2\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"The page size cannot be larger than 1000\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"arrowhead/serviceregistry/management/system-query\"\n  }\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-mqtt/#system-create","title":"system-create","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a SystemListRequest.</p> <pre><code>Topic: arrowhead/serviceregistry/management/system-create\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": &lt;0|1|2&gt;,\n  \"payload\": {\n    \"systems\": [\n      {\n        \"name\": \"AlertConsumer1\",\n        \"metadata\": {\n        },\n        \"version\": \"1.1\",\n        \"addresses\": [\n          \"192.168.1.1\"\n        ],\n        \"deviceName\": \"ALARM1\"\n      },\n      {\n        \"name\": \"AlertConsumer2\",\n        \"metadata\": {\n        },\n        \"version\": \"1.1\",\n        \"addresses\": [\n          \"192.168.1.2\"\n        ],\n        \"deviceName\": \"ALARM2\"\n      }\n    ]\n  }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>201</code> if the system entities were successfully created. The response template payload is a SystemListResponse.</p> <pre><code>{\n  \"status\": 201,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"entries\": [\n      {\n        \"name\": \"AlertConsumer1\",\n        \"metadata\": {},\n        \"version\": \"1.1.0\",\n        \"addresses\": [\n          {\n            \"type\": \"IPV4\",\n            \"address\": \"192.168.1.1\"\n          }\n        ],\n        \"device\": {\n          \"name\": \"ALARM1\",\n          \"metadata\": {\n            \"volume\": {\n              \"value\": 100,\n              \"unit\": \"dB\"\n            }\n          },\n          \"addresses\": [\n            {\n              \"type\": \"MAC\",\n              \"address\": \"4a:f7:9c:12:8e:b5\"\n            }\n          ],\n          \"createdAt\": \"2025-05-04T18:51:46Z\",\n          \"updatedAt\": \"2025-05-04T18:51:46Z\"\n        },\n        \"createdAt\": \"2025-05-04T20:08:37.278728600Z\",\n        \"updatedAt\": \"2025-05-04T20:08:37.278728600Z\"\n      },\n      {\n        \"name\": \"AlertConsumer2\",\n        \"metadata\": {},\n        \"version\": \"1.1.0\",\n        \"addresses\": [\n          {\n            \"type\": \"IPV4\",\n            \"address\": \"192.168.1.2\"\n          }\n        ],\n        \"device\": {\n          \"name\": \"ALARM2\",\n          \"metadata\": {\n            \"volume\": {\n              \"value\": 110,\n              \"unit\": \"dB\"\n            }\n          },\n          \"addresses\": [\n            {\n              \"type\": \"MAC\",\n              \"address\": \"4a:f7:9c:12:8e:bb\"\n            }\n          ],\n          \"createdAt\": \"2025-05-04T18:51:46Z\",\n          \"updatedAt\": \"2025-05-04T18:51:46Z\"\n        },\n        \"createdAt\": \"2025-05-04T20:08:37.284276300Z\",\n        \"updatedAt\": \"2025-05-04T20:08:37.284276300Z\"\n      }\n    ],\n    \"count\": 2\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"Systems with names already exist: AlertConsumer1, AlertConsumer2\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"arrowhead/serviceregistry/management/system-create\"\n  }\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-mqtt/#system-update","title":"system-update","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a SystemListRequest.</p> <pre><code>Topic: arrowhead/serviceregistry/management/system-update\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": &lt;0|1|2&gt;,\n  \"payload\": {\n    \"systems\": [\n      {\n        \"name\": \"AlertConsumer1\",\n        \"metadata\": {\n        },\n        \"version\": \"1.2\",\n        \"addresses\": [\n          \"192.168.1.1\"\n        ],\n        \"deviceName\": \"ALARM1\"\n      },\n      {\n        \"name\": \"AlertConsumer2\",\n        \"metadata\": {\n        },\n        \"version\": \"1.2\",\n        \"addresses\": [\n          \"192.168.1.2\"\n        ],\n        \"deviceName\": \"ALARM2\"\n      }\n    ]\n  }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is a SystemListResponse.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"entries\": [\n      {\n        \"name\": \"AlertConsumer1\",\n        \"metadata\": {},\n        \"version\": \"1.2.0\",\n        \"addresses\": [\n          {\n            \"type\": \"IPV4\",\n            \"address\": \"192.168.1.1\"\n          }\n        ],\n        \"device\": {\n          \"name\": \"ALARM1\",\n          \"metadata\": {\n            \"volume\": {\n              \"value\": 100,\n              \"unit\": \"dB\"\n            }\n          },\n          \"addresses\": [\n            {\n              \"type\": \"MAC\",\n              \"address\": \"4a:f7:9c:12:8e:b5\"\n            }\n          ],\n          \"createdAt\": \"2025-05-04T18:51:46Z\",\n          \"updatedAt\": \"2025-05-04T18:51:46Z\"\n        },\n        \"createdAt\": \"2025-05-04T20:08:37Z\",\n        \"updatedAt\": \"2025-05-04T20:11:20.541557100Z\"\n      },\n      {\n        \"name\": \"AlertConsumer2\",\n        \"metadata\": {},\n        \"version\": \"1.2.0\",\n        \"addresses\": [\n          {\n            \"type\": \"IPV4\",\n            \"address\": \"192.168.1.2\"\n          }\n        ],\n        \"device\": {\n          \"name\": \"ALARM2\",\n          \"metadata\": {\n            \"volume\": {\n              \"value\": 110,\n              \"unit\": \"dB\"\n            }\n          },\n          \"addresses\": [\n            {\n              \"type\": \"MAC\",\n              \"address\": \"4a:f7:9c:12:8e:bb\"\n            }\n          ],\n          \"createdAt\": \"2025-05-04T18:51:46Z\",\n          \"updatedAt\": \"2025-05-04T18:51:46Z\"\n        },\n        \"createdAt\": \"2025-05-04T20:08:37Z\",\n        \"updatedAt\": \"2025-05-04T20:11:20.661848200Z\"\n      }\n    ],\n    \"count\": 2\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"Duplicated system name: AlertConsumer1\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"arrowhead/serviceregistry/management/system-update\"\n  }\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-mqtt/#system-remove","title":"system-remove","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a List&lt;SystemName&gt; which contains the names of the systems to delete.</p> <pre><code>arrowhead/serviceregistry/management/system-remove\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": &lt;0|1|2&gt;,\n  \"payload\": [\"AlertConsumer1\", \"AlertConsumer2\"]\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. In this case the response payload is empty.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": \"\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 401,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": null,\n  \"payload\": {\n    \"errorMessage\": \"Invalid authentication info\",\n    \"errorCode\": 401,\n    \"exceptionType\": \"AUTH\"\n  }\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-mqtt/#service-definition-query","title":"service-definition-query","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is an optional PageRequest.</p> <pre><code>Topic: arrowhead/serviceregistry/management/service-definition-query\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": &lt;0|1|2&gt;,\n  \"payload\": {\n    \"page\": 2,\n    \"size\": 4,\n    \"direction\": \"DESC\",\n    \"sortField\": \"name\"\n  }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is a ServiceDefinitionListResponse.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"entries\": [\n      {\n        \"name\": \"orchestrationLockManagement\",\n        \"createdAt\": \"2025-03-12T11:07:23Z\",\n        \"updatedAt\": \"2025-03-12T11:07:23Z\"\n      },\n      {\n        \"name\": \"orchestrationHistoryManagement\",\n        \"createdAt\": \"2025-03-12T11:07:23Z\",\n        \"updatedAt\": \"2025-03-12T11:07:23Z\"\n      },\n      {\n        \"name\": \"orchestration\",\n        \"createdAt\": \"2025-03-12T11:07:23Z\",\n        \"updatedAt\": \"2025-03-12T11:07:23Z\"\n      },\n      {\n        \"name\": \"monitor\",\n        \"createdAt\": \"2025-01-31T09:14:54Z\",\n        \"updatedAt\": \"2025-01-31T09:14:54Z\"\n      }\n    ],\n    \"count\": 26\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"Direction is invalid. Only ASC or DESC are allowed\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"arrowhead/serviceregistry/management/service-definition-query\"\n  }\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-mqtt/#service-definition-create","title":"service-definition-create","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a ServiceDefinitionListRequest.</p> <pre><code>Topic: arrowhead/serviceregistry/management/service-definition-create\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": &lt;0|1|2&gt;,\n  \"payload\": {\n    \"serviceDefinitionNames\": [\n      \"alertService1\", \"alertService2\"\n    ]\n  }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is a ServiceDefinitionListResponse.</p> <pre><code>{\n  \"status\": 201,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"entries\": [\n      {\n        \"name\": \"alertService1\",\n        \"createdAt\": \"2025-05-04T21:33:49.344720800Z\",\n        \"updatedAt\": \"2025-05-04T21:33:49.344720800Z\"\n      },\n      {\n        \"name\": \"alertService2\",\n        \"createdAt\": \"2025-05-04T21:33:49.421567600Z\",\n        \"updatedAt\": \"2025-05-04T21:33:49.421567600Z\"\n      }\n    ],\n    \"count\": 2\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"Service definition names already exists: alertService1\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"arrowhead/serviceregistry/management/service-definition-create\"\n  }\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-mqtt/#service-definition-remove","title":"service-definition-remove","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a List&lt;ServiceName&gt; which contains the names of the service definitions to delete.</p> <pre><code>Topic: arrowhead/serviceregistry/management/service-definition-remove\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": &lt;0|1|2&gt;,\n  \"payload\": [\"alertService1\", \"alertService2\"]\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. In this case the response payload is empty.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": \"\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"Service definition name list is missing or empty\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"arrowhead/serviceregistry/management/service-definition-remove\"\n  }\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-mqtt/#service-query","title":"service-query","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a ServiceQueryRequest. The params can contain an optional KeyValuePair with the key \"verbose\" and a Boolean value. If verbose is true, detailed device information also returns (only if the provider supports it).</p> <pre><code>Topic: arrowhead/serviceregistry/management/service-query\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": &lt;0|1|2&gt;,\n  \"params\": {\"verbose\": false},\n  \"payload\": {\n    \"pagination\": {\n      \"page\": 0,\n      \"size\": 2,\n      \"direction\": \"ASC\",\n      \"sortField\": \"createdAt\"\n    },\n    \"instanceIds\": [\n    ],\n    \"providerNames\": [\n    ],\n    \"serviceDefinitionNames\": [\n      \"alertService1\"\n    ],\n    \"versions\": [\n      \"1.0.0\", \"1.0.1\"\n    ],\n    \"alivesAt\": \"2026-01-01T00:00:00Z\",\n    \"metadataRequirementsList\": [\n    ],\n    \"addressTypes\": [\n    ],\n    \"interfaceTemplateNames\": [\n      \"generic_mqtt\"\n    ],\n    \"interfacePropertyRequirementsList\": [\n      {\n        \"operations\": { \"op\": \"CONTAINS\", \"value\": \"warn\" }\n      }\n    ],\n    \"policies\": [\n      \"NONE\"\n    ]\n  }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is a ServiceListResponse.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"entries\": [\n      {\n        \"instanceId\": \"AlertProvider1|alertService1|1.0.0\",\n        \"provider\": {\n          \"name\": \"AlertProvider1\",\n          \"metadata\": {},\n          \"version\": \"1.1.0\",\n          \"createdAt\": \"2025-05-05T09:05:31Z\",\n          \"updatedAt\": \"2025-05-05T09:05:31Z\"\n        },\n        \"serviceDefinition\": {\n          \"name\": \"alertService1\",\n          \"createdAt\": \"2025-05-04T21:33:49Z\",\n          \"updatedAt\": \"2025-05-04T21:33:49Z\"\n        },\n        \"version\": \"1.0.0\",\n        \"expiresAt\": \"2028-01-01T00:00:00Z\",\n        \"metadata\": {\n          \"delay\": {\n            \"value\": 200,\n            \"unit\": \"ms\"\n          }\n        },\n        \"interfaces\": [\n          {\n            \"templateName\": \"generic_mqtt\",\n            \"protocol\": \"tcp\",\n            \"policy\": \"NONE\",\n            \"properties\": {\n              \"accessAddresses\": [\n                \"192.168.1.3\"\n              ],\n              \"accessPort\": 1883,\n              \"baseTopic\": \"heat-alert\",\n              \"operations\": [\n                \"alert\",\n                \"warn\",\n                \"info\"\n              ]\n            }\n          }\n        ],\n        \"createdAt\": \"2025-05-05T09:06:28Z\",\n        \"updatedAt\": \"2025-05-05T09:06:28Z\"\n      }\n    ],\n    \"count\": 1\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"Sort field is invalid. Only the following are allowed: [id, name, createdAt]\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"arrowhead/serviceregistry/management/service-query\"\n  }\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-mqtt/#service-create","title":"service-create","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a ServiceCreateListRequest.</p> <pre><code>Topic: arrowhead/serviceregistry/management/service-create\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": &lt;0|1|2&gt;,\n  \"payload\": {\n    \"instances\": [\n      {\n        \"systemName\": \"AlertProvider1\",\n        \"serviceDefinitionName\": \"alertService1\",\n        \"version\": \"\",\n        \"expiresAt\": \"2028-01-01T00:00:00Z\",\n        \"metadata\": {\n          \"delay\": { \"value\": 200, \"unit\": \"ms\" }\n        },\n        \"interfaces\": [\n          {\n            \"templateName\": \"generic_mqtt\",\n            \"protocol\": \"tcp\", \n            \"policy\": \"NONE\",\n            \"properties\": {\n              \"accessAddresses\": [ \"192.168.1.3\" ],\n              \"accessPort\": 1883,\n              \"baseTopic\": \"heat-alert\",\n              \"operations\": [ \"alert\", \"warn\" ]\n            }\n          }\n        ]\n      },\n      {\n        \"systemName\": \"AlertProvider2\",\n        \"serviceDefinitionName\": \"alertService2\",\n        \"version\": \"\",\n        \"expiresAt\": \"2027-01-01T00:00:00Z\",\n        \"metadata\": {\n          \"delay\": { \"value\": 200, \"unit\": \"ms\" }\n        },\n        \"interfaces\": [\n          {\n            \"templateName\": \"generic_mqtt\",\n            \"protocol\": \"tcp\", \n            \"policy\": \"NONE\",\n            \"properties\": {\n              \"accessAddresses\": [ \"192.168.1.4\" ],\n              \"accessPort\": 1883,\n              \"baseTopic\": \"heat-alert\",\n              \"operations\": [ \"warn\" ]\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>201</code> if the service instance entities were created successfully. The response template payload is a ServiceListResponse.</p> <pre><code>{\n  \"status\": 201,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"entries\": [\n      {\n        \"instanceId\": \"AlertProvider1|alertService1|1.0.0\",\n        \"provider\": {\n          \"name\": \"AlertProvider1\",\n          \"metadata\": {},\n          \"version\": \"1.1.0\",\n          \"addresses\": [\n            {\n              \"type\": \"IPV4\",\n              \"address\": \"192.168.1.1\"\n            }\n          ],\n          \"device\": {\n            \"name\": \"ALARM1\",\n            \"metadata\": {\n              \"volume\": {\n                \"value\": 100,\n                \"unit\": \"dB\"\n              }\n            },\n            \"addresses\": [\n              {\n                \"type\": \"MAC\",\n                \"address\": \"4a:f7:9c:12:8e:b5\"\n              }\n            ],\n            \"createdAt\": \"2025-05-04T18:51:46Z\",\n            \"updatedAt\": \"2025-05-04T18:51:46Z\"\n          },\n          \"createdAt\": \"2025-05-05T09:05:31Z\",\n          \"updatedAt\": \"2025-05-05T09:05:31Z\"\n        },\n        \"serviceDefinition\": {\n          \"name\": \"alertService1\",\n          \"createdAt\": \"2025-05-04T21:33:49Z\",\n          \"updatedAt\": \"2025-05-04T21:33:49Z\"\n        },\n        \"version\": \"1.0.0\",\n        \"expiresAt\": \"2028-01-01T00:00:00Z\",\n        \"metadata\": {\n          \"delay\": {\n            \"value\": 200,\n            \"unit\": \"ms\"\n          }\n        },\n        \"interfaces\": [\n          {\n            \"templateName\": \"generic_mqtt\",\n            \"protocol\": \"tcp\",\n            \"policy\": \"NONE\",\n            \"properties\": {\n              \"accessAddresses\": [\n                \"192.168.1.3\"\n              ],\n              \"accessPort\": 1883,\n              \"baseTopic\": \"heat-alert\",\n              \"operations\": [\n                \"alert\",\n                \"warn\"\n              ]\n            }\n          }\n        ],\n        \"createdAt\": \"2025-05-05T09:06:27.599446600Z\",\n        \"updatedAt\": \"2025-05-05T09:06:27.599446600Z\"\n      },\n      {\n        \"instanceId\": \"AlertProvider2|alertService1|1.0.0\",\n        \"provider\": {\n          \"name\": \"AlertProvider2\",\n          \"metadata\": {},\n          \"version\": \"1.1.0\",\n          \"addresses\": [\n            {\n              \"type\": \"IPV4\",\n              \"address\": \"192.168.1.2\"\n            }\n          ],\n          \"device\": {\n            \"name\": \"ALARM2\",\n            \"metadata\": {\n              \"volume\": {\n                \"value\": 110,\n                \"unit\": \"dB\"\n              }\n            },\n            \"addresses\": [\n              {\n                \"type\": \"MAC\",\n                \"address\": \"4a:f7:9c:12:8e:bb\"\n              }\n            ],\n            \"createdAt\": \"2025-05-04T18:51:46Z\",\n            \"updatedAt\": \"2025-05-04T18:51:46Z\"\n          },\n          \"createdAt\": \"2025-05-05T09:05:32Z\",\n          \"updatedAt\": \"2025-05-05T09:05:32Z\"\n        },\n        \"serviceDefinition\": {\n          \"name\": \"alertService2\",\n          \"createdAt\": \"2025-05-04T21:33:49Z\",\n          \"updatedAt\": \"2025-05-04T21:33:49Z\"\n        },\n        \"version\": \"1.0.0\",\n        \"expiresAt\": \"2027-01-01T00:00:00Z\",\n        \"metadata\": {\n          \"delay\": {\n            \"value\": 200,\n            \"unit\": \"ms\"\n          }\n        },\n        \"interfaces\": [\n          {\n            \"templateName\": \"generic_mqtt\",\n            \"protocol\": \"tcp\",\n            \"policy\": \"NONE\",\n            \"properties\": {\n              \"accessAddresses\": [\n                \"192.168.1.4\"\n              ],\n              \"accessPort\": 1883,\n              \"baseTopic\": \"heat-alert\",\n              \"operations\": [\n                \"warn\"\n              ]\n            }\n          }\n        ],\n        \"createdAt\": \"2025-05-05T09:06:27.618441200Z\",\n        \"updatedAt\": \"2025-05-05T09:06:27.618441200Z\"\n      }\n    ],\n    \"count\": 2\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"Service definition name is empty\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"arrowhead/serviceregistry/management/service-create\"\n  }\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-mqtt/#service-update","title":"service-update","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a ServiceUpdateListRequest.</p> <pre><code>Topic: arrowhead/serviceregistry/management/service-update\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": &lt;0|1|2&gt;,\n  \"payload\": {\n    \"instances\": [\n      {\n        \"instanceId\": \"AlertProvider1|alertService1|1.0.0\",\n        \"expiresAt\": \"2028-01-01T00:00:00Z\",\n        \"metadata\": {\n          \"delay\": { \"value\": 200, \"unit\": \"ms\" }\n        },\n        \"interfaces\": [\n          {\n            \"templateName\": \"generic_mqtt\",\n            \"protocol\": \"tcp\", \n            \"policy\": \"NONE\",\n            \"properties\": {\n              \"accessAddresses\": [ \"192.168.1.3\" ],\n              \"accessPort\": 1883,\n              \"baseTopic\": \"heat-alert\",\n              \"operations\": [ \"alert\", \"warn\", \"info\" ]\n            }\n          }\n        ]\n      },\n      {\n        \"instanceId\": \"AlertProvider2|alertService2|1.0.0\",\n        \"expiresAt\": \"2027-01-01T00:00:00Z\",\n        \"metadata\": {\n          \"delay\": { \"value\": 200, \"unit\": \"ms\" }\n        },\n        \"interfaces\": [\n          {\n            \"templateName\": \"generic_mqtt\",\n            \"protocol\": \"tcp\",\n\u0171           \"policy\": \"NONE\",\n            \"properties\": {\n              \"accessAddresses\": [\"192.168.1.4\"],\n              \"accessPort\": 1883,\n              \"baseTopic\": \"heat-alert\",\n              \"operations\": [ \"warn\" ]\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if the service instance entities were updated successfully. The response template payload is a ServiceListResponse.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"entries\": [\n      {\n        \"instanceId\": \"AlertProvider1|alertService1|1.0.0\",\n        \"provider\": {\n          \"name\": \"AlertProvider1\",\n          \"metadata\": {},\n          \"version\": \"1.1.0\",\n          \"addresses\": [\n            {\n              \"type\": \"IPV4\",\n              \"address\": \"192.168.1.1\"\n            }\n          ],\n          \"device\": {\n            \"name\": \"ALARM1\",\n            \"metadata\": {\n              \"volume\": {\n                \"value\": 100,\n                \"unit\": \"dB\"\n              }\n            },\n            \"addresses\": [\n              {\n                \"type\": \"MAC\",\n                \"address\": \"4a:f7:9c:12:8e:b5\"\n              }\n            ],\n            \"createdAt\": \"2025-05-04T18:51:46Z\",\n            \"updatedAt\": \"2025-05-04T18:51:46Z\"\n          },\n          \"createdAt\": \"2025-05-05T09:05:31Z\",\n          \"updatedAt\": \"2025-05-05T09:05:31Z\"\n        },\n        \"serviceDefinition\": {\n          \"name\": \"alertService1\",\n          \"createdAt\": \"2025-05-04T21:33:49Z\",\n          \"updatedAt\": \"2025-05-04T21:33:49Z\"\n        },\n        \"version\": \"1.0.0\",\n        \"expiresAt\": \"2028-01-01T00:00:00Z\",\n        \"metadata\": {\n          \"delay\": {\n            \"value\": 200,\n            \"unit\": \"ms\"\n          }\n        },\n        \"interfaces\": [\n          {\n            \"templateName\": \"generic_mqtt\",\n            \"protocol\": \"tcp\",\n            \"policy\": \"NONE\",\n            \"properties\": {\n              \"accessAddresses\": [\n                \"192.168.1.3\"\n              ],\n              \"accessPort\": 1883,\n              \"baseTopic\": \"heat-alert\",\n              \"operations\": [\n                \"alert\",\n                \"warn\",\n                \"info\"\n              ]\n            }\n          }\n        ],\n        \"createdAt\": \"2025-05-05T09:06:28Z\",\n        \"updatedAt\": \"2025-05-05T09:09:58.070188100Z\"\n      },\n      {\n        \"instanceId\": \"AlertProvider2|alertService2|1.0.0\",\n        \"provider\": {\n          \"name\": \"AlertProvider2\",\n          \"metadata\": {},\n          \"version\": \"1.1.0\",\n          \"addresses\": [\n            {\n              \"type\": \"IPV4\",\n              \"address\": \"192.168.1.2\"\n            }\n          ],\n          \"device\": {\n            \"name\": \"ALARM2\",\n            \"metadata\": {\n              \"volume\": {\n                \"value\": 110,\n                \"unit\": \"dB\"\n              }\n            },\n            \"addresses\": [\n              {\n                \"type\": \"MAC\",\n                \"address\": \"4a:f7:9c:12:8e:bb\"\n              }\n            ],\n            \"createdAt\": \"2025-05-04T18:51:46Z\",\n            \"updatedAt\": \"2025-05-04T18:51:46Z\"\n          },\n          \"createdAt\": \"2025-05-05T09:05:32Z\",\n          \"updatedAt\": \"2025-05-05T09:05:32Z\"\n        },\n        \"serviceDefinition\": {\n          \"name\": \"alertService2\",\n          \"createdAt\": \"2025-05-04T21:33:49Z\",\n          \"updatedAt\": \"2025-05-04T21:33:49Z\"\n        },\n        \"version\": \"1.0.0\",\n        \"expiresAt\": \"2027-01-01T00:00:00Z\",\n        \"metadata\": {\n          \"delay\": {\n            \"value\": 200,\n            \"unit\": \"ms\"\n          }\n        },\n        \"interfaces\": [\n          {\n            \"templateName\": \"generic_mqtt\",\n            \"protocol\": \"tcp\",\n            \"policy\": \"NONE\",\n            \"properties\": {\n              \"accessAddresses\": [\n                \"192.168.1.4\"\n              ],\n              \"accessPort\": 1883,\n              \"baseTopic\": \"heat-alert\",\n              \"operations\": [\n                \"warn\"\n              ]\n            }\n          }\n        ],\n        \"createdAt\": \"2025-05-05T09:06:28Z\",\n        \"updatedAt\": \"2025-05-05T09:09:58.238440Z\"\n      }\n    ],\n    \"count\": 2\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"\"Instance id does not exist: AlertProvider1|alertService1|1.0.1\"\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"arrowhead/serviceregistry/management/service-update\"\n  }\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-mqtt/#service-remove","title":"service-remove","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a List&lt;ServiceInstanceID&gt; which contains the identitifers of the service instances that need to be removed.</p> <pre><code>Topic: arrowhead/serviceregistry/management/service-remove\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": &lt;0|1|2&gt;,\n  \"payload\": [\"AlertProvider1|alertService1|1.0.0\", \"AlertProvider2|alertService2|1.0.0\"]\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. In this case the response payload is empty.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": \"\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 403,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": &lt;receiver-system-identifier&gt;,\n  \"payload\": {\n    \"errorMessage\": \"Requester has no management permission\",\n    \"errorCode\": 403,\n    \"exceptionType\": \"FORBIDDEN\",\n    \"origin\": \"arrowhead/serviceregistry/management/service-remove\"\n  }\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-mqtt/#interface-template-query","title":"interface-template-query","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is an optional InterfaceTemplateQueryRequest.</p> <pre><code>Topic: arrowhead/serviceregistry/management/interface-template-query\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": &lt;0|1|2&gt;,\n  \"payload\": {\n    \"pagination\": {\n      \"page\": 1,\n      \"size\": 1,\n      \"direction\": \"ASC\",\n      \"sortField\": \"name\"\n    },\n    \"templateNames\": [\n    ],\n    \"protocols\": [\n      \"tcp\"\n    ]\n  }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is a InterfaceTemplateListResponse.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"entries\": [\n      {\n        \"name\": \"generic_mqtt\",\n        \"protocol\": \"tcp\",\n        \"propertyRequirements\": [\n          {\n            \"name\": \"accessAddresses\",\n            \"mandatory\": true,\n            \"validator\": \"NOT_EMPTY_ADDRESS_LIST\",\n            \"validatorParams\": []\n          },\n          {\n            \"name\": \"accessPort\",\n            \"mandatory\": true,\n            \"validator\": \"PORT\",\n            \"validatorParams\": []\n          },\n          {\n            \"name\": \"baseTopic\",\n            \"mandatory\": true\n          },\n          {\n            \"name\": \"operations\",\n            \"mandatory\": true,\n            \"validator\": \"NOT_EMPTY_STRING_SET\",\n            \"validatorParams\": [\n              \"OPERATION\"\n            ]\n          }\n        ],\n        \"createdAt\": \"2024-12-09T18:52:48Z\",\n        \"updatedAt\": \"2024-12-09T18:52:48Z\"\n      }\n    ],\n    \"count\": 3\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"The specified interface template name does not match the naming convention: general@mqtt\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"arrowhead/serviceregistry/management/interface-template-query\"\n  }\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-mqtt/#interface-template-create","title":"interface-template-create","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is an InterfaceTemplateListRequest.</p> <pre><code>Topic: arrowhead/serviceregistry/management/interface-template-create\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": &lt;0|1|2&gt;,\n  \"payload\": {\n    \"interfaceTemplates\": [\n      {\n        \"name\": \"custom_ftp\",\n        \"protocol\": \"tcp\",\n        \"propertyRequirements\": [\n          {\n            \"name\": \"accessAddresses\",\n            \"mandatory\": true,\n            \"validator\": \"not_empty_address_list\",\n            \"validatorParams\": [\n            ]\n          }\n        ]\n      },\n      {\n        \"name\": \"my_awesome_ftp\",\n        \"protocol\": \"tcp\",\n        \"propertyRequirements\": [\n          {\n            \"name\": \"accessAddresses\",\n            \"mandatory\": true,\n            \"validator\": \"not_empty_address_list\",\n            \"validatorParams\": [\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>201</code> if the interface template entities were successfully created. InterfaceTemplateListResponse.</p> <pre><code>{\n  \"status\": 201,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"entries\": [\n      {\n        \"name\": \"custom_ftp\",\n        \"protocol\": \"tcp\",\n        \"propertyRequirements\": [\n          {\n            \"name\": \"accessAddresses\",\n            \"mandatory\": true,\n            \"validator\": \"NOT_EMPTY_ADDRESS_LIST\",\n            \"validatorParams\": []\n          }\n        ],\n        \"createdAt\": \"2025-05-05T10:26:35.426965600Z\",\n        \"updatedAt\": \"2025-05-05T10:26:35.426965600Z\"\n      },\n      {\n        \"name\": \"my_awesome_ftp\",\n        \"protocol\": \"tcp\",\n        \"propertyRequirements\": [\n          {\n            \"name\": \"accessAddresses\",\n            \"mandatory\": true,\n            \"validator\": \"NOT_EMPTY_ADDRESS_LIST\",\n            \"validatorParams\": []\n          }\n        ],\n        \"createdAt\": \"2025-05-05T10:26:35.532789400Z\",\n        \"updatedAt\": \"2025-05-05T10:26:35.532789400Z\"\n      }\n    ],\n    \"count\": 2\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 400,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"errorMessage\": \"Interface template already exists: custom_ftp\",\n    \"errorCode\": 400,\n    \"exceptionType\": \"INVALID_PARAMETER\",\n    \"origin\": \"arrowhead/serviceregistry/management/interface-template-create\"\n  }\n}\n</code></pre>"},{"location":"api/serviceregistry/service-registry-management-generic-mqtt/#interface-template-remove","title":"interface-template-remove","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a List&lt;InterfaceName&gt; which contains the string identifier of the interface descriptors that need to be removed.</p> <pre><code>Topic: arrowhead/serviceregistry/management/interface-template-remove\n\n{\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"authentication\": \"&lt;identity-info&gt;\",\n  \"responseTopic\": \"&lt;response-topic&gt;\",\n  \"qosRequirement\": &lt;0|1|2&gt;,\n  \"payload\": [ \"custom_ftp\", \"my_awesome_ftp\" ]\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. In this case the response payload is empty.</p> <pre><code>{\n  \"status\": 200,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": \"\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n  \"status\": 401,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": null,\n  \"payload\": \"Invalid authentication info\"\n}\n</code></pre>"},{"location":"api/serviceregistry/system-discovery-generic-http/","title":"systemDiscovery IDD","text":"<p>generic_http &amp; generic_https</p>"},{"location":"api/serviceregistry/system-discovery-generic-http/#overview","title":"Overview","text":"<p>This page describes the generic_http and generic_https service interface of systemDiscovery, which enables both application and Core/Support systems to lookup, register and revoke systems that are part of the Local Cloud.  System representation is mandatory for the base functionalities of a Local Cloud, e.g. the systems have to be registered in order to interact with each other.</p> <p>Hereby the Interface Design Description (IDD) is provided to the systemDiscovery \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/serviceregistry/system-discovery-generic-http/#interface-description","title":"Interface Description","text":""},{"location":"api/serviceregistry/system-discovery-generic-http/#register","title":"register","text":"<p>The service operation request requires an identity related header or certificate and a SystemRegistrationRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/system-discovery/register HTTP/1.1\nAuthorization:  Bearer &lt;identity-info&gt;\n\n{\n  \"metadata\":  {\n    \"scales\":  [\"kelvin\", \"celsius\"],\n    \"location\":  {\"side\":  \"North\", \"block\":  2},\n    \"indoor\":  true\n  },\n  \"version\":  \"\",\n  \"addresses\":  [\n    \"192.168.56.116\",\n    \"tp2.greenhouse.com\"\n  ],\n  \"deviceName\":  \"THERMOMETER2\"\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and the system entity is already existing or <code>201</code> if the entity was newly created. The response also contains a SystemRegistrationResponse JSON encoded body.</p> <pre><code>{\n  \"name\":  \"TemperatureProvider2\",\n  \"metadata\":  {\n    \"scales\":  [\n      \"kelvin\",\n      \"celsius\"\n    ],\n    \"location\":  {\n      \"side\":  \"North\",\n      \"block\":  2\n    },\n    \"indoor\":  true\n  },\n  \"version\":  \"1.0.0\",\n  \"addresses\":  [\n    {\n      \"type\":  \"IPV4\",\n      \"address\":  \"192.168.56.116\"\n    },\n    {\n      \"type\":  \"HOSTNAME\",\n      \"address\":  \"tp2.greenhouse.com\"\n    }\n  ],\n  \"device\":  {\n    \"name\":  \"THERMOMETER2\",\n    \"metadata\":  {\n      \"scales\":  [\n        \"kelvin\",\n        \"celsius\"\n      ],\n      \"maxTemperature\":  {\n        \"kelvin\":  310,\n        \"celsius\":  40\n      },\n      \"minTemperature\":  {\n        \"kelvin\":  260,\n        \"celsius\":  -10\n      }\n    },\n    \"addresses\":  [\n      {\n        \"type\":  \"MAC\",\n        \"address\":  \"81:ef:1a:44:7a:f5\"\n      }\n    ],\n    \"createdAt\":  \"2024-11-04T01:53:02Z\",\n    \"updatedAt\":  \"2024-11-04T01:53:02Z\"\n  },\n  \"createdAt\":  \"2024-11-08T10:21:10.950683800Z\",\n  \"updatedAt\":  \"2024-11-08T10:21:10.950683800Z\"\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\":  \"Device names do not exist:  THERMOMETER2\",\n  \"errorCode\":  400,\n  \"exceptionType\":  \"INVALID_PARAMETER\",\n  \"origin\":  \"POST /serviceregistry/system-discovery/register\"\n}\n</code></pre>"},{"location":"api/serviceregistry/system-discovery-generic-http/#lookup","title":"lookup","text":"<p>The service operation request requires an identity related header or certificate. The URI can contain an optional query parameter with the key \"verbose\" and a Boolean value. If verbose is true, detailed device information also returns (only if the provider supports it). The request may optionally include a SystemLookupRequest JSON encoded body.</p> <pre><code>POST /serviceregistry/system-discovery/lookup?verbose=false HTTP/1.1\nAuthorization:  Bearer &lt;identity-info&gt;\n\n{\n  \"systemNames\":  [\n  ],\n  \"addresses\":  [\n  ],\n  \"addressType\":  \"\",\n  \"metadataRequirementList\":  [\n  ],\n  \"versions\":  [\n  ],\n  \"deviceNames\":  [\n    \"THERMOMETER2\"\n  ]\n}\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and with a SystemLookupResponse JSON encoded body.</p> <pre><code>{\n  \"entries\":  [\n    {\n      \"name\":  \"TemperatureProvider1\",\n      \"metadata\":  {\n        \"scales\":  [\n          \"kelvin\",\n          \"celsius\"\n        ],\n        \"location\":  {\n          \"side\":  \"North\",\n          \"block\":  2\n        },\n        \"indoor\":  true\n      },\n      \"version\":  \"1.0.0\",\n      \"addresses\":  [\n        {\n          \"type\":  \"IPV4\",\n          \"address\":  \"192.168.56.116\"\n        },\n        {\n          \"type\":  \"HOSTNAME\",\n          \"address\":  \"tp2.greenhouse.com\"\n        }\n      ],\n      \"device\":  {\n        \"name\":  \"THERMOMETER2\"\n      },\n      \"createdAt\":  \"2025-02-27T18:32:45Z\",\n      \"updatedAt\":  \"2025-02-27T18:32:45Z\"\n    }\n  ],\n  \"count\":  1\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> Error if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\":  \"Invalid address type:  IPV5\",\n  \"errorCode\":  400,\n  \"exceptionType\":  \"INVALID_PARAMETER\",\n  \"origin\":  \"POST /serviceregistry/system-discovery/lookup\"\n}\n</code></pre>"},{"location":"api/serviceregistry/system-discovery-generic-http/#revoke","title":"revoke","text":"<p>The service operation request only requires an identity related header or certificate. The name of the system to be revoked will be identified during authentication.</p> <pre><code>DELETE /serviceregistry/system-discovery/revoke HTTP1.1\nAuthorization:  Bearer &lt;identity-info&gt;\n</code></pre> <p>The service operation responds with the status code <code>200</code> if called successfully and an existing system entity was removed and <code>204</code> if no matching entity was found. The success response does not contain any response body.</p> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. The error response also contains an ErrorResponse JSON encoded body.</p> <pre><code>{\n  \"errorMessage\":  \"No authorization header has been provided\",\n  \"errorCode\":  401,\n  \"exceptionType\":  \"AUTH\"\n}\n</code></pre>"},{"location":"api/serviceregistry/system-discovery-generic-mqtt/","title":"systemDiscovery IDD","text":"<p>generic_mqtt &amp; generic_mqtts </p>"},{"location":"api/serviceregistry/system-discovery-generic-mqtt/#overview","title":"Overview","text":"<p>This page describes the generic_mqtt and generic_mqtts service interface of systemDiscovery, which enables both application and Core/Support systems to lookup, register and revoke systems that are part of the Local Cloud.  System representation is mandatory for the base functionalities of a Local Cloud, e.g. the systems have to be registered in order to interact with each other.</p> <p>Hereby the Interface Design Description (IDD) is provided to the systemDiscovery \u2013 Service Description. For further details about how this service is meant to be used, please consult that document.</p>"},{"location":"api/serviceregistry/system-discovery-generic-mqtt/#interface-description","title":"Interface Description","text":""},{"location":"api/serviceregistry/system-discovery-generic-mqtt/#register","title":"register","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is a SystemRegistrationResponse.</p> <pre><code>Topic:  arrowhead/serviceregistry/system-discovery/register\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;identity-info&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": \"&lt;0|1|2&gt;\",\n   \"payload\": {\n     \"metadata\":  {\n       \"scales\":  [\"kelvin\", \"celsius\"],\n       \"location\":  {\"side\":  \"North\", \"block\":  2},\n       \"indoor\":  true\n     },\n     \"version\":  \"\",\n     \"addresses\":  [\n       \"192.168.56.116\",\n       \"tp2.greenhouse.com\"\n     ],\n     \"deviceName\":  \"THERMOMETER2\"\n   }\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully and the system entity is already existing or <code>201</code> if the entity was newly created. The response template payload is a SystemRegistrationResponse.</p> <pre><code>{\n  \"status\": 201,\n  \"traceId\": \"&lt;trace-id&gt;\",\n  \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n  \"payload\": {\n    \"name\": \"TemperatureProvider2\",\n    \"metadata\": {\n      \"scales\": [\n        \"kelvin\",\n        \"celsius\"\n      ],\n      \"location\": {\n        \"side\": \"North\",\n        \"block\": 2\n      },\n      \"indoor\": true\n    },\n    \"version\": \"1.0.0\",\n    \"addresses\": [\n      {\n        \"type\": \"IPV4\",\n        \"address\": \"192.168.56.116\"\n      },\n      {\n        \"type\": \"HOSTNAME\",\n        \"address\": \"tp2.greenhouse.com\"\n      }\n    ],\n    \"device\": {\n      \"name\": \"THERMOMETER2\",\n      \"metadata\": {\n        \"scales\": [\n          \"kelvin\",\n          \"celsius\"\n        ],\n        \"maxTemperature\": {\n          \"kelvin\": 310,\n          \"celsius\": 40\n        },\n        \"minTemperature\": {\n          \"kelvin\": 260,\n          \"celsius\": -10\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"81:ef:1a:44:7a:f5\"\n        }\n      ],\n      \"createdAt\": \"2024-11-04T01:53:02Z\",\n      \"updatedAt\": \"2024-11-04T01:53:02Z\"\n    },\n    \"createdAt\": \"2024-11-08T10:21:10.950683800Z\",\n    \"updatedAt\": \"2024-11-08T10:21:10.950683800Z\"\n  }\n}\n</code></pre> <p>The error codes are <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 400,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n   \"payload\": {\n      \"errorMessage\": \"Device names do not exist:  THERMOMETER2\",\n      \"errorCode\": 400,\n      \"exceptionType\": \"INVALID_PARAMETER\",\n      \"origin\": arrowhead/serviceregistry/system-discovery/register\n   }\n}\n</code></pre>"},{"location":"api/serviceregistry/system-discovery-generic-mqtt/#lookup","title":"lookup","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info and the payload is an optional SystemLookupRequest. The params can contain a KeyValuePair with the key \"verbose\" and a Boolean value. If verbose is true, detailed device information also returns (only if the provider supports it).</p> <pre><code>Topic:  arrowhead/serviceregistry/system-discovery/lookup\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;identity-info&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": \"&lt;0|1|2&gt;\",\n   \"params\": {\"verbose\": false},\n   \"payload\": {\n     \"systemNames\":  [\n     ],\n     \"addresses\":  [\n     ],\n     \"addressType\":  \"\",\n     \"metadataRequirementList\":  [\n     ],\n     \"versions\":  [\n     ],\n     \"deviceNames\":  [\n       \"THERMOMETER2\"\n     ]\n   }\n}   \n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully. The response template payload is a SystemLookupResponse.</p> <pre><code>{\n   \"status\": 200,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n   \"payload\": {\n     \"entries\":  [\n       {\n         \"name\":  \"TemperatureProvider1\",\n         \"metadata\":  {\n            \"scales\":  [\n              \"kelvin\",\n              \"celsius\"\n            ],\n            \"location\":  {\n              \"side\":  \"North\",\n              \"block\":  2\n            },\n            \"indoor\":  true\n         },\n         \"version\":  \"1.0.0\",\n         \"addresses\":  [\n           {\n             \"type\":  \"IPV4\",\n             \"address\":  \"192.168.56.116\"\n           },\n           {\n             \"type\":  \"HOSTNAME\",\n             \"address\":  \"tp2.greenhouse.com\"\n           }\n         ],\n         \"device\":  {\n           \"name\":  \"THERMOMETER2\"\n         },\n         \"createdAt\":  \"2025-02-27T18:32:45Z\",\n         \"updatedAt\":  \"2025-02-27T18:32:45Z\"\n       }\n     ],\n     \"count\":  1\n   }\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> Error if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 400,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n   \"payload\": {\n      \"errorMessage\": \"Invalid address type:  IPV5\",\n      \"errorCode\": 400,\n      \"exceptionType\": \"INVALID_PARAMETER\",\n      \"origin\": \"arrowhead/serviceregistry/system-discovery/lookup\"\n   }\n}\n\n</code></pre>"},{"location":"api/serviceregistry/system-discovery-generic-mqtt/#revoke","title":"revoke","text":"<p>The service operation request requires an MQTTRequestTemplate JSON encoded message in which the authentication is a proper identity info. The name of the system to be revoked will be identified during authentication.</p> <pre><code>Topic:  arrowhead/serviceregistry/system-discovery/revoke\n\n{\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"authentication\": \"&lt;identity-info&gt;\",\n   \"responseTopic\": \"&lt;response-topic&gt;\",\n   \"qosRequirement\": \"&lt;0|1|2&gt;\",\n   \"payload\": \"\"\n}\n</code></pre> <p>The service operation responds with an MQTTResponseTemplate JSON encoded message in which the status code is <code>200</code> if called successfully and an existing system entity was removed and <code>204</code> if no matching entity was found. </p> <pre><code>{\n   \"status\": 200,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\"\n}\n</code></pre> <p>The error codes are, <code>400</code> if the request is malformed, <code>401</code> if the requester authentication was unsuccessful, <code>403</code> if the authenticated requester has no permission and <code>500</code> if an unexpected error happens. In these cases the response template payload is an ErrorResponse JSON.</p> <pre><code>{\n   \"status\": 401,\n   \"traceId\": \"&lt;trace-id&gt;\",\n   \"receiver\": \"&lt;receiver-system-identifier&gt;\",\n   \"payload\": {\n      \"errorMessage\": \"No authentication info has been provided\",\n      \"errorCode\": 401,\n      \"exceptionType\": \"AUTH\"\n   }\n}\n</code></pre>"},{"location":"core_systems/authentication/","title":"Authentication","text":"<p>This core system provides, manages and validates system identities within an Eclipse Arrowhead Local Cloud (LC).</p> <p>Learn more:  Abstract System Description (SysD)</p>"},{"location":"core_systems/authentication/#services","title":"Services","text":""},{"location":"core_systems/authentication/#identity","title":"identity","text":"<p>The purpose of this service is to give, verify and invalidate a proof of identity token. Furthermore, it also allows a system to change its own credentials. The service is offered for both application and Core/Support Systems.</p> <p>Learn more:  Abstract Service Description (SD) generic_http (IDD) | generic_https (IDD) generic_mqtt (IDD) | generic_mqtts (IDD)  since: v5.0.0 </p> <p>login</p> <p>This service operation acquires a proof of identity token.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>logout</p> <p>This service operation invalidates a proof of identity token.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>change</p> <p>This service operation changes the requester system's own credentials.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>verify</p> <p>This service operation checks the validity of a provided token and acquires information about the verified system.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p>"},{"location":"core_systems/authentication/#generalmanagement","title":"generalManagement","text":"<p>Its purpose is to get some information about the hosting system's behavior, such as log entries and configuration settings. The service is offered for administrative Support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic_http (IDD) | generic_https (IDD) generic_mqtt (IDD) | generic_mqtts (IDD)  since: v5.0.0 </p> <p>get-log</p> <p>This service operation lists the log entries of the system that match the filtering requirements.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>get-config</p> <p>This service operation lists the current values of the specified configuration settings.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p>"},{"location":"core_systems/authentication/#identitymanagement","title":"identityManagement","text":"<p>Its purpose is to manage identities and active sessions in bulk. The different operations provide querying, creating, updating and removing functionalities. The service is offered for administrative Support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic_http (IDD) | generic_https (IDD) generic_mqtt (IDD) | generic_mqtts (IDD)  since: v5.0.0 </p> <p>identity-mgmt-query</p> <p>This service operation lists the identities that match the filtering requirements.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>identity-mgmt-create</p> <p>This service operation creates the specified identities.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>identity-mgmt-update</p> <p>This service operation updates the specified existing identities.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>identity-mgmt-remove</p> <p>This service operation removes the specified identities.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>identity-mgmt-session-query</p> <p>This service operation lists the active sessions that match the filtering requirements.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>identity-mgmt-session-close</p> <p>This service operation closes and the specified active sessions and invalidates the related tokens.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p>"},{"location":"core_systems/authentication/#configuration","title":"Configuration","text":"<p>The system configuration properties can be found in the <code>application.properties</code> file located at <code>/src/main/resources</code> folder.</p> <p>Note: During the build process this file is going to be built into the executable JAR, but also going to be copied next to the JAR file. Any modification in the configuration file located next to the executable JAR file will override the built in configuration property value.</p>"},{"location":"core_systems/authentication/#general-parameters","title":"General parameters","text":"<p>See the general configuration properties.</p> <p>Note: In case of the Authentication system the property authentication.policy has a special value <code>internal</code>, which means the system should use its own database during authentication. The property should not be changed.</p>"},{"location":"core_systems/authentication/#database-parameters","title":"Database parameters","text":"<p> spring.datasource.url</p> <p>Full connection URL to the database.</p> <p> spring.datasource.username</p> <p>Username to the database.</p> <p> spring.datasource.password</p> <p>Password to the database.</p> <p> spring.datasource.driver-class-name</p> <p>The driver provides the connection to the database and implements the protocol for transferring the query and result between client and database.</p> <p> spring.jpa.show-sql</p> <p>Set to <code>true</code> in order to log out the SQL queries.</p> <p> spring.jpa.properties.hibernate.format sql</p> <p>Set to <code>true</code> to log out SQL queries in pretty format. (Effective only when 'spring.jpa.show-sql' is 'true')</p> <p> spring.jpa.hibernate.ddl-auto</p> <p>Auto initialization of database tables. Value must be always 'none'.</p>"},{"location":"core_systems/authentication/#custom-parameters","title":"Custom parameters","text":"<p> authentication.secret.key</p> <p>The secret key which is used to prove to the Local Cloud's ServiceRegistry that this authentication is trusted. This secret key must be present in the ServiceRegistry authenticator.secret.keys structure.</p> <p> enable.management.filter</p> <p>Set to <code>true</code> to enable automatic authorization for management services.</p> <p> management.policy</p> <p>Defines the access policy for management services. Can be <code>sysop-only</code> (only systems with system operator permission can use them), <code>whitelist</code> (system operators and those dedicated systems that appear on the management.whitelist can use them) or <code>authorization</code> (system operators, whitelist members and those systems that have permission according to the ConsumerAuthorization system can use them).</p> <p> management.whitelist</p> <p>A list of system names (separated by comma) that can use management services if the management.policy is set to <code>whitelist</code> or <code>authorization</code>.</p> <p> identity.token.duration</p> <p>Validity period of the identity token in seconds (0 or negative value means hundred years).</p> <p> cleaner.job.interval</p> <p>Interval between execution times of the expired session cleaner job in milliseconds.</p>"},{"location":"core_systems/authentication/#logging-configuration","title":"Logging configuration","text":"<p>The logging configuration properties can be found in the <code>log4j2.xml</code> file located at <code>src/main/resources</code> folder.</p> <p>Note: During the build process this file is going to be built into the executable JAR, but it is also possible to override it by an external file. For that use the following command when starting the system:</p> <pre><code>java -jar arrowhead-authentication-5.x.x.jar\n     -Dlog4j.configurationFile=path-to-external-file\n</code></pre> <p> JDBC_LEVEL</p> <p>Set this to change the level of log messages in the database. Levels: <code>ALL</code>, <code>TRACE</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, <code>ERROR</code>, <code>FATAL</code>, <code>OFF</code>.</p> <p> CONSOLE_FILE_LEVEL</p> <p>Set this to change the level of log messages in console and the log file. Levels: <code>ALL</code>, <code>TRACE</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, <code>ERROR</code>, <code>FATAL</code>, <code>OFF</code>.</p> <p> LOG_DIR</p> <p>Set this to change the directory of log files.</p>"},{"location":"core_systems/authentication/#changelog","title":"Changelog","text":""},{"location":"core_systems/authentication/#v500","title":"v5.0.0","text":"<p>Related in CL-5.0.0</p> <ul> <li>general</li> <li>arrowhead-common-utils</li> <li>arrowhead-data-transfer-objects</li> <li>arrowhead-authentication</li> </ul>"},{"location":"core_systems/authorization/","title":"ConsumerAuthorization","text":"<p>This Core system manages and authorizes connections between various systems using authorization rules within an Eclipse Arrowhead Local Cloud (LC). It also provides various token generation functionalities that add an extra layer of security.</p> <p>Learn more:  Abstract System Description (SysD)</p>"},{"location":"core_systems/authorization/#services","title":"Services","text":""},{"location":"core_systems/authorization/#authorization","title":"authorization","text":"<p>The purpose of this service is to validate service consumption permissions and to lookup, grant and revoke those permissions. The service is offered for both application and Core/Support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic_http (IDD) | generic_https (IDD) generic_mqtt (IDD) | generic_mqtts (IDD)  since: v5.0.0 </p> <p>grant</p> <p>This service operation enables a provider to grant access to various consumers to its service. It can also be used by a publisher to grant access to subscribers to its event with a specific type.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>revoke</p> <p>This service operation enables a provider/publisher to remove existing authorization policies that were created by itself.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>lookup</p> <p>This service operation lists the requester-created authorization rules that match the filtering requirements.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>verify</p> <p>This service operation checks whether a consumer has access to a provider's specified service/service operation/event type.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p>"},{"location":"core_systems/authorization/#authorizationtoken","title":"authorizationToken","text":"<p>The purpose of this service is to generate and validate authorization tokens. The service is offered for both application and Core/Support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic_http (IDD) | generic_https (IDD) generic_mqtt (IDD) | generic_mqtts (IDD)  since: v5.0.0 </p> <p>generate</p> <p>Its purpose is to verify the requester\u2019s permissions and produce a token of defined type for the targeted service consumption.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>verify</p> <p>Its purpose is to check whether a given token is valid or not, is associated with the requester or not and to provide the belonged token details.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>get-public-key</p> <p>Its purpose is to provide the public key of the implementing system if any (necessary for the verification of some token types).</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>register-encryption-key</p> <p>Its purpose is to store an encryption key that can be used to encrypt the raw tokens generated for any service of the requester system.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>unregister-encryption-key</p> <p>Its purpose is to remove the encryption key belonged to the requester system.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p>"},{"location":"core_systems/authorization/#generalmanagement","title":"generalManagement","text":"<p>Its purpose is to get some information about the hosting system's behavior, such as log entries and configuration settings. The service is offered for administrative Support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic_http (IDD) | generic_https (IDD) generic_mqtt (IDD) | generic_mqtts (IDD)  since: v5.0.0 </p> <p>get-log</p> <p>This service operation lists the log entries of the system that match the filtering requirements.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>get-config</p> <p>This service operation lists the current values of the specified configuration settings.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p>"},{"location":"core_systems/authorization/#authorizationmanagement","title":"authorizationManagement","text":"<p>The purpose of this service is to manage (grant, revoke, query, check) authorization rules and validate service consumption permissions in bulk. The service is offered for Core and administrative Support systems.  </p> <p>Learn more:  Abstract Service Description (SD) generic_http (IDD) | generic_https (IDD) generic_mqtt (IDD) | generic_mqtts (IDD)  since: v5.0.0 </p> <p>grant-policies</p> <p>This service operation enables a system with proper rights to grant access to various consumers for various provider's services in bulk. It can also be used to grant access to subscribers for various publisher's events with a specific type in bulk.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>revoke-policies</p> <p>This service operation enables a system with proper rights to remove existing authorization policies in bulk without considering policy ownerships.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>query-policies</p> <p>This service operation lists the authorization rules that match the filtering requirements. This operation can be used to query both provider-owned and management level authorization policies.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>check-policies</p> <p>This service operation checks whether consumers have access to providers' specified service/service operation/event type.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p>"},{"location":"core_systems/authorization/#authorizationtokenmanagement","title":"authorizationTokenManagement","text":"<p>The purpose of this service is to manage (generate, revoke, query) authorization tokens in bulk. The service is offered for Core and administrative Support Systems.</p> <p>Learn more:  Abstract Service Description (SD) generic_http (IDD) | generic_https (IDD) generic_mqtt (IDD) | generic_mqtts (IDD)  since: v5.0.0 </p> <p>generate-tokens</p> <p>This service operation verifies the given consumer systems\u2019 permissions to the targeted service/service-operation/event type instance and produces expiring access tokens for them.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>query-tokens</p> <p>This service operation lists the access tokens that match the filtering requirements.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>revoke-tokens</p> <p>This service operation deletes the access token records associated with the given token references.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>add-encryption-keys</p> <p>This service operation saves and stores encryption key and algorithm identifier pairs for the given provider systems.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>remove-encryption-keys</p> <p>This service operation deletes the stored encryption key and algorithm identifier pairs associated with the given provider systems.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p>"},{"location":"core_systems/authorization/#configuration","title":"Configuration","text":"<p>The system configuration properties can be found in the <code>application.properties</code> file located at <code>/src/main/resources</code> folder.</p> <p>Note: During the build process this file is going to be built into the executable JAR, but also going to be copied next to the JAR file. Any modification in the configuration file located next to the executable JAR file will override the built in configuration property value.</p>"},{"location":"core_systems/authorization/#general-parameters","title":"General parameters","text":"<p>See the general configuration properties.</p>"},{"location":"core_systems/authorization/#database-parameters","title":"Database parameters","text":"<p> spring.datasource.url</p> <p>Full connection URL to the database.</p> <p> spring.datasource.username</p> <p>Username to the database.</p> <p> spring.datasource.password</p> <p>Password to the database.</p> <p> spring.datasource.driver-class-name</p> <p>The driver provides the connection to the database and implements the protocol for transferring the query and result between client and database.</p> <p> spring.jpa.show-sql</p> <p>Set to <code>true</code> in order to log out the SQL queries.</p> <p> spring.jpa.properties.hibernate.format sql</p> <p>Set to <code>true</code> to log out SQL queries in pretty format. (Effective only when 'spring.jpa.show-sql' is 'true')</p> <p> spring.jpa.hibernate.ddl-auto</p> <p>Auto initialization of database tables. Value must be always 'none'.</p>"},{"location":"core_systems/authorization/#custom-parameters","title":"Custom parameters","text":"<p> authenticator.credentials</p> <p>The credentials that this system will use for performing the login operation when the authentication policy is <code>outsourced</code>.</p> <pre><code>authenticator.credentials={\\\n    '&lt;credential-name&gt;': '&lt;credential-value&gt;' \\\n}\n</code></pre> <p> authenticator.secret.keys</p> <p>Secret key for the authenticator servers when authentication policy is <code>outsourced</code>. The authenticator servers are able to use authorization check services by providing an HMAC of their system name computed with the associated secret key.</p> <pre><code>authenticator.secret.keys={\\\n    '&lt;system-name&gt;': '&lt;secret-key&gt;' \\\n}\n</code></pre> <p> enable.management.filter</p> <p>Set to <code>true</code> to enable automatic authorization for management services.</p> <p> management.policy</p> <p>Defines the access policy for management services. Can be <code>sysop-only</code> (only systems with system operator permission can use them), <code>whitelist</code> (system operators and those dedicated systems that appear on the management.whitelist can use them) or <code>authorization</code> (system operators, whitelist members and those systems that have permission according to database-stored policies can use them).</p> <p> management.whitelist</p> <p>A list of system names (separated by comma) that can use management services if the management.policy is set to <code>whitelist</code> or <code>authorization</code>.</p> <p> enable.blacklist.filter</p> <p>Enable/disable automatic service requester system name verification against to cloud level blacklist. Can be <code>true</code> or <code>false</code>.</p> <p> force.blacklist.filter</p> <p>Whether or not the service requests should be refused when the blacklist server is not responding. Can be <code>true</code> or <code>false</code>.</p> <p> blacklist.check.exclude.list</p> <p>Comma-separated list that contains systems whose requests are served without checking the cloud level blacklist, even if blacklist is enabled.</p> <p> max.page.size</p> <p>Specifies the maximum number of records a page can contain in case of pageable service responses.</p> <p> token.max.age</p> <p>Determines after how long to delete the tokens from the database (in minutes).</p> <p> token.time.limit</p> <p>Specifies the default duration of time-limited tokens (simple time-limited and self-contained tokens) in seconds.</p> <p> simple.token.usage.limit</p> <p>Maximum token usage default in case of usage-limited simple tokens.</p> <p> unbounded.token.generation.whitelist</p> <p>Comma-separated list that contains the name of systems that can generate tokens for other systems by bypassing their authorization checks.</p> <p> simple.token.byte.size</p> <p>Simple token (time-limited, usage-limited) size in bytes. Cannot be less than 16!</p> <p> secret.cryptographer.key</p> <p>Sensitive data (consumer tokens, provider encryption keys) will be encrypted with this key before writing out into the database. Must be exactly 16 byte long!</p> <p> cleaner.job.interval</p> <p>Specifies how often (in miliseconds) to remove the expired and/or old tokens.</p>"},{"location":"core_systems/authorization/#logging-configuration","title":"Logging configuration","text":"<p>The logging configuration properties can be found in the <code>log4j2.xml</code> file located at <code>src/main/resources</code> folder.</p> <p>Note: During the build process this file is going to be built into the executable JAR, but it is also possible to override it by an external file. For that use the following command when starting the system:</p> <pre><code>java -jar arrowhead-consumer-authentication-5.x.x.jar\n     -Dlog4j.configurationFile=path-to-external-file\n</code></pre> <p> JDBC_LEVEL</p> <p>Set this to change the level of log messages in the database. Levels: <code>ALL</code>, <code>TRACE</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, <code>ERROR</code>, <code>FATAL</code>, <code>OFF</code>.</p> <p> CONSOLE_FILE_LEVEL</p> <p>Set this to change the level of log messages in console and the log file. Levels: <code>ALL</code>, <code>TRACE</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, <code>ERROR</code>, <code>FATAL</code>, <code>OFF</code>.</p> <p> LOG_DIR</p> <p>Set this to change the directory of log files.</p>"},{"location":"core_systems/authorization/#changelog","title":"Changelog","text":""},{"location":"core_systems/authorization/#v500","title":"v5.0.0","text":"<p>Related in CL-5.0.0</p> <ul> <li>general</li> <li>arrowhead-common-utils</li> <li>arrowhead-data-transfer-objects</li> <li>arrowhead-consumer-authorization</li> </ul>"},{"location":"core_systems/service_orchestration_dynamic/","title":"DynamicServiceOrchestration","text":"<p>This Core System exists to find matching service instances according to the consumer\u2019s specification within an Eclipse Arrowhead Local Cloud (LC) and optionally, in other Arrowhead clouds by collaborating with other core/support Systems. </p> <p>Learn more:  Abstract System Description (SysD)</p>"},{"location":"core_systems/service_orchestration_dynamic/#services","title":"Services","text":""},{"location":"core_systems/service_orchestration_dynamic/#serviceorchestration","title":"serviceOrchestration","text":"<p>The purpose of this service is to get matching service instances. The service is offered for both application and Core/Support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic_http (IDD) | generic_https (IDD) generic_mqtt (IDD) | generic_mqtts (IDD)  since: v5.0.0 </p> <p>pull</p> <p>This service operation performs the orchestration process and returns the matching service instances.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>subscribe</p> <p>This service operation creates a subscription that can be triggered anytime to perform the orchestration process and push the matching service instances for the subscriber.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>unsubscribe</p> <p>This service operation removes a subscription.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p>"},{"location":"core_systems/service_orchestration_dynamic/#generalmanagement","title":"generalManagement","text":"<p>Its purpose is to get some information about the hosting system\u2019s behavior, such as log entries and configuration settings. The service is offered for administrative Support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic_http (IDD) | generic_https (IDD) generic_mqtt (IDD) | generic_mqtts (IDD)  since: v5.0.0 </p> <p>get-log</p> <p>This service operation lists the log entries of the system that match the filtering requirements.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>get-config</p> <p>This service operation lists the current values of the specified configuration settings.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p>"},{"location":"core_systems/service_orchestration_dynamic/#serviceorchestrationpushmanagement","title":"serviceOrchestrationPushManagement","text":"<p>The purpose of the service is to handle the push orchestration related data and activities centrally and in bulk. The service is offered for administrative Support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic_http (IDD) | generic_https (IDD) generic_mqtt (IDD) | generic_mqtts (IDD)  since: v5.0.0 </p> <p>subscribe</p> <p>This service operation creates subscriptions in bulk for other consumer systems that can be triggered anytime to perform the orchestration process and push newly orchestrated matching service instances to the subscribed consumers.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>unsubscribe</p> <p>This service operation removes subscriptions in bulk.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>trigger</p> <p>This service operation initiates service orchestration processes based on consumer system names, subscription identifiers or a creator system name.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>query</p> <p>This service operation lists the existing subscriptions that match the filtering requirements.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p>"},{"location":"core_systems/service_orchestration_dynamic/#serviceorchestrationlockmanagement","title":"serviceOrchestrationLockManagement","text":"<p>The purpose of the service is to manage the orchestration locks, that allows to exclude service instances from being orchestrated.</p> <p>Learn more:  Abstract Service Description (SD) generic_http (IDD) | generic_https (IDD) generic_mqtt (IDD) | generic_mqtts (IDD)  since: v5.0.0 </p> <p>create</p> <p>This service operation creates orchestration lock records.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>query</p> <p>This service operation lists the existing lock records that match the filtering requirements.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>remove</p> <p>This service operation deletes the specified lock records.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p>"},{"location":"core_systems/service_orchestration_dynamic/#serviceorchestrationhistorymanagement","title":"serviceOrchestrationHistoryManagement","text":"<p>The purpose of the service is to gather information about the performed orchestration processes.</p> <p>Learn more:  Abstract Service Description (SD) generic_http (IDD) | generic_https (IDD) generic_mqtt (IDD) | generic_mqtts (IDD)  since: v5.0.0 </p> <p>query</p> <p>This service operation lists the existing orchestration job records that match the filtering requirements.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p>"},{"location":"core_systems/service_orchestration_dynamic/#configuration","title":"Configuration","text":"<p>The system configuration properties can be found in the <code>application.properties</code> file located at <code>/src/main/resources</code> folder.</p> <p>Note: During the build process this file is going to be built into the executable JAR, but also going to be copied next to the JAR file. Any modification in the configuration file located next to the executable JAR file will override the built in configuration property value.</p>"},{"location":"core_systems/service_orchestration_dynamic/#general-parameters","title":"General parameters","text":"<p>See the general configuration properties.</p>"},{"location":"core_systems/service_orchestration_dynamic/#database-parameters","title":"Database parameters","text":"<p> spring.datasource.url</p> <p>URL to the database.</p> <p> spring.datasource.username</p> <p>Username to the database.</p> <p> spring.datasource.password</p> <p>Password to the database.</p> <p> spring.datasource.driver-class-name</p> <p>The driver provides the connection to the database and implements the protocol for transferring the query and result between client and database.</p> <p> spring.jpa.show-sql</p> <p>Set to true in order to log out the SQL queries.</p> <p> spring.jpa.properties.hibernate.format sql</p> <p>Set to true to log out SQL queries in pretty format. (Effective only when 'spring.jpa.show-sql' is 'true')</p> <p> spring.jpa.hibernate.ddl-auto</p> <p>Auto initialization of database tables. Value must be always 'none'.</p>"},{"location":"core_systems/service_orchestration_dynamic/#custom-parameters","title":"Custom parameters","text":"<p> authenticator.credentials</p> <p>The credentials that this system will use for performing the login operation when the authentication policy is <code>outsourced</code>.</p> <pre><code>authenticator.credentials={\\\n    '&lt;credential-name&gt;': '&lt;credential-value&gt;' \\\n}\n</code></pre> <p> enable.blacklist.filter</p> <p>Enable/disable automatic service requester system name verification against to cloud level blacklist, and also the provider candidate system names during the orchestration process. Can be <code>true</code> or <code>false</code>.</p> <p> force.blacklist.filter</p> <p>Whether or not the service requests should be refused when the blacklist server is not responding, and whether the provider candidates should be dropped during the orchstration process or not. Can be <code>true</code> or <code>false</code>.</p> <p> enable.management.filter</p> <p>Enable or disable authorization for accessing the management services. Can be <code>true</code> of <code>false</code>.</p> <p> management.policy</p> <p>Way of authorizing the management service requester systems. Can be:</p> <ul> <li><code>sysop-only</code>, when the authenticated requester system has system-operator role that ensures overall management permission.</li> <li><code>whitelist</code>, sysop-only and when the authenticated requester system is whitelisted in the management.whitelist configuration property that ensures overall management permission.</li> <li><code>authorization</code>, sysop-only and whitelist and when the authenticated requester system has appropriate service permission according to the ConsumerAuthorization Core system.</li> </ul> <p> management.whitelist</p> <p>Name of the systems which can access to management services in case of <code>whitelist</code> policy is effective.</p> <pre><code>management.whitelist=&lt;system-name-a&gt;,&lt;system-name-b&gt;\n</code></pre> <p> enable.authorization</p> <p>Enable or disable consumer authorization cross-checking during the orchestration process.</p> <p> enable.translation</p> <p>Enable or disable automatic interface translation bridge creation between a consumer and a provider during the orchestration process.</p> <p> enable.qos</p> <p>Enable or disable Quality-of-Service cross-checking during the orchestration process.</p> <p> enable.intercloud</p> <p>Enable or disable automatic gatepath creation between a consumer and a provider from a neighbor cloud during the orchestration process.</p> <p> orchestration.history.max.age</p> <p>Specifies after how many days the orchestration history records can be automatically deleted.</p> <p> cleaner.job.interval</p> <p>Specifies in milisec, that how often the expired subscriptions and the orchestration history records can be automatically deleted and how often the expired orchestration locks can be released.</p> <p> push.orchestration.max.thread</p> <p>Specifies the maximum number of threads that can be allocated to process push orchestration tasks.</p>"},{"location":"core_systems/service_orchestration_dynamic/#changelog","title":"Changelog","text":""},{"location":"core_systems/service_orchestration_dynamic/#v500","title":"v5.0.0","text":"<p>Related in CL-5.0.0</p> <ul> <li>general</li> <li>arrowhead-common-utils</li> <li>arrowhead-data-transfer-objects</li> <li>arrowhead-serviceorchestration-dynamic</li> </ul>"},{"location":"core_systems/service_orchestration_flexible_store/","title":"Flexible-Store Service Orchestration","text":"<p>Coming soon.</p>"},{"location":"core_systems/service_orchestration_simple_store/","title":"Simple-Store Service Orchestration","text":"<p>Coming soon.</p>"},{"location":"core_systems/service_registry/","title":"ServiceRegistry","text":"<p>This Core system provides the data storage functionality for the information related to the currently and actively offered services within the Local Cloud. It also stores information about the systems that offer and/or can use the previously mentioned services, and optionally data about the devices on which those systems are running.</p> <p>Learn more:  Abstract System Description (SysD)</p>"},{"location":"core_systems/service_registry/#services","title":"Services","text":""},{"location":"core_systems/service_registry/#servicediscovery","title":"serviceDiscovery","text":"<p>The purpose of this service is to lookup, register and revoke provided services. The service is offered for both application and Core/Support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic_http (IDD) | generic_https (IDD) generic_mqtt (IDD) | generic_mqtts (IDD)  since: v5.0.0 </p> <p>register</p> <p>This service operation adds new service instance to the Local Cloud.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>revoke</p> <p>This service operation removes a service instance from the Local Cloud.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>lookup</p> <p>This service operation lists the service instances that match the filtering requirements.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p>"},{"location":"core_systems/service_registry/#systemdiscovery","title":"systemDiscovery","text":"<p>The purpose of this service is to lookup, register and revoke systems that are part of (or want to be part of) the Local Cloud. The service is offered for both application and Core/Support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic_http (IDD) | generic_https (IDD) generic_mqtt (IDD) | generic_mqtts (IDD)  since: v5.0.0 </p> <p>register</p> <p>This service operation adds new system to the Local Cloud.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>revoke</p> <p>This service operation removes a system from the Local Cloud.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>lookup</p> <p>This service operation lists the systems that match the filtering requirements.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p>"},{"location":"core_systems/service_registry/#devicediscovery","title":"deviceDiscovery","text":"<p>The purpose of this service is to lookup, register and revoke devices on which the Local Cloud\u2019s systems can run. The service is offered for both application and Core/Support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic_http (IDD) | generic_https (IDD) generic_mqtt (IDD) | generic_mqtts (IDD)  since: v5.0.0 </p> <p>register</p> <p>This service operation adds a new device to the Local Cloud.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>revoke</p> <p>This service operation removes a device from the Local Cloud.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>lookup</p> <p>This service operation lists the devices that match the filtering requirements.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p>"},{"location":"core_systems/service_registry/#generalmanagement","title":"generalManagement","text":"<p>Its purpose is to get some information about the hosting system\u2019s behavior, such as log entries and configuration settings. The service is offered for administrative Support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic_http (IDD) | generic_https (IDD) generic_mqtt (IDD) | generic_mqtts (IDD)  since: v5.0.0 </p> <p>get-log</p> <p>This service operation lists the log entries of the system that match the filtering requirements.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>get-config</p> <p>This service operation lists the current values of the specified configuration settings.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p>"},{"location":"core_systems/service_registry/#serviceregistrymanagement","title":"serviceRegistryManagement","text":"<p>Its purpose is to manage service definitions, service instances, interfaces, systems and devices in bulk. The different operations provide querying, registering, updating and unregistering functionalities. The service is offered for administrative Support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic_http (IDD) | generic_https (IDD) generic_mqtt (IDD) | generic_mqtts (IDD)  since: v5.0.0 </p> <p>device-query</p> <p>This service operation lists the devices that match the filtering requirements.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>device-create</p> <p>This service operation registers the specified devices.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>device-update</p> <p>This service operation updates the specified existing devices.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>device-remove</p> <p>This service operation revokes the specified devices.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>system-query</p> <p>This service operation lists the systems that match the filtering requirements.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>system-create</p> <p>This service operation registers the specified systems.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>system-update</p> <p>This service operation updates the specified existing systems.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>system-remove</p> <p>This service operation revokes the specified systems.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>service-definition-query</p> <p>This service operation lists the service definitions.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>service-definition-create</p> <p>This service operation registers the specified service definitions.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>service-definition-remove</p> <p>This service operation revokes the specified service definitions.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>service-query</p> <p>This service operation lists the service instances that match the filtering requirements.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>service-create</p> <p>This service operation registers the specified service instances.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>service-update</p> <p>This service operation updates the specified existing service instances.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>service-remove</p> <p>This service operation revokes the specified service instances.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>interface-template-query</p> <p>This service operation lists the interface templates that match the filtering requirements.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>interface-template-create</p> <p>This service operation registers the specified interface templates.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>interface-template-remove</p> <p>This service operation revokes the specified interface templates.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p>"},{"location":"core_systems/service_registry/#configuration","title":"Configuration","text":"<p>The system configuration properties can be found in the <code>application.properties</code> file located at <code>/src/main/resources</code> folder.</p> <p>Note: During the build process this file is going to be built into the executable JAR, but also going to be copied next to the JAR file. Any modification in the configuration file located next to the executable JAR file will override the built in configuration property value.</p>"},{"location":"core_systems/service_registry/#general-parameters","title":"General parameters","text":"<p>See the general configuration properties.</p>"},{"location":"core_systems/service_registry/#database-parameters","title":"Database parameters","text":"<p> spring.datasource.url</p> <p>URL to the database.</p> <p> spring.datasource.username</p> <p>Username to the database.</p> <p> spring.datasource.password</p> <p>Password to the database.</p> <p> spring.datasource.driver-class-name</p> <p>The driver provides the connection to the database and implements the protocol for transferring the query and result between client and database.</p> <p> spring.jpa.show-sql</p> <p>Set to true in order to log out the SQL queries.</p> <p> spring.jpa.properties.hibernate.format sql</p> <p>Set to true to log out SQL queries in pretty format. (Effective only when 'spring.jpa.show-sql' is 'true')</p> <p> spring.jpa.hibernate.ddl-auto</p> <p>Auto initialization of database tables. Value must be always 'none'.</p>"},{"location":"core_systems/service_registry/#custom-parameters","title":"Custom parameters","text":"<p> authenticator.credentials</p> <p>The credentials that this system will use for performing the login operation when the authentication policy is <code>outsourced</code>.</p> <pre><code>authenticator.credentials={\\\n    '&lt;credential-name&gt;': '&lt;credential-value&gt;' \\\n}\n</code></pre> <p> authenticator.secret.keys</p> <p>Secret key for the authenticator servers when authentication policy is <code>outsourced</code>. The authenticator servers are able to register their authentication-related services by providing an HMAC of their system name computed with the associated secret key.</p> <pre><code>authenticator.secret.keys={\\\n    '&lt;system-name&gt;': '&lt;secret-key&gt;' \\\n}\n</code></pre> <p> enable.blacklist.filter</p> <p>Enable/disable automatic service requester system name verification against to cloud level blacklist. Can be <code>true</code> or <code>false</code>.</p> <p> force.blacklist.filter</p> <p>Whether or not the service requests should be refused when the blacklist server is not responding. Can be <code>true</code> or <code>false</code>.</p> <p> blacklist.check.exclude.list</p> <p>Comma-separated list that contains systems whose requests are served without checking the cloud level blacklist, even if blacklist is enabled.</p> <p> enable.management.filter</p> <p>Enable or disable authorization for accessing the management services. Can be <code>true</code> of <code>false</code>.</p> <p> management.policy</p> <p>Way of authorizing the management service requester systems. Can be:</p> <ul> <li><code>sysop-only</code>, when the authenticated requester system has system-operator role that ensures overall management permission.</li> <li><code>whitelist</code>, sysop-only and when the authenticated requester system is whitelisted in the management.whitelist configuration property that ensures overall management permission.</li> <li><code>authorization</code>, sysop-only and whitelist and when the authenticated requester system has appropriate service permission according to the ConsumerAuthorization Core system.</li> </ul> <p> management.whitelist</p> <p>Name of the systems which can access to management services in case of <code>whitelist</code> policy is effective.</p> <pre><code>management.whitelist=&lt;system-name-a&gt;,&lt;system-name-b&gt;\n</code></pre> <p> service.discovery.policy</p> <p>Behavior of the service-discovery service. Can be:</p> <ul> <li><code>open</code>, every existing service is directly discoverable.</li> <li><code>restricted</code>, only the public core services are discoverable directly. The other ones must be orchestrated.</li> </ul> <p> service.discovery.direct.access</p> <p>Name of systems which always have direct access to the service-discovery service. Only Core or Support systems should be listed here.</p> <pre><code>service.discovery.direct.access=&lt;system-name-a&gt;,&lt;system-name-b&gt;\n</code></pre> <p> discovery.verbose</p> <p>Whether or not the service-discovery service should provide system and device details as well and the system-discovery service should provide device details as well. Can be <code>true</code> of <code>false</code>.</p> <p> service.discovery.interface.policy</p> <p>Way of handling non-existing service interfaces during service registration. Can be:</p> <ul> <li><code>restricted</code>, when only the already existing interface templates can be used.</li> <li><code>extendable</code>, when new interface template will be created with all the provided properties as mandatory properties.</li> <li><code>open</code>, when new interface template will be created without any further restrictions.</li> </ul> <p> allow.self.addressing</p> <p>Whether or not the registration of systems and devices with self-addressing IPv4, IPv6 and hostname addresses are allowed. In case of self-addressing addresses the IP packets cannot be directed from one device to another. Can be <code>true</code> of <code>false</code>.</p> <p> allow.non.routable.addressing</p> <p>Whether or not the registration of systems and devices with non-routable IPv4 and IPv6 addresses are allowed. In case of non-routable addresses the IP packets cannot be directed from one network to another. Can be <code>true</code> of <code>false</code>.</p> <p> service.address.alias</p> <p>Alias keys under which the service addresses can appear in the interface properties.</p> <pre><code>service.address.alias=&lt;alias-1&gt;,&lt;alias-2&gt;\n</code></pre> <p> max.page.size</p> <p>Specifies the maximum number of records a page can contain in case of pageable service responses.</p>"},{"location":"core_systems/service_registry/#logging-configuration","title":"Logging configuration","text":"<p>The logging configuration properties can be found in the <code>log4j2.xml</code> file located at <code>src/main/resources</code> folder.</p> <p>Note: During the build process this file is going to be built into the executable JAR, but it is also possible to override it by an external file. For that use the following command when starting the system:</p> <pre><code>java -jar arrowhead-serviceregistry-x.x.x.jar\n     -Dlog4j.configurationFile=path-to-external-file\n</code></pre> <p> JDBC_LEVEL</p> <p>Set this to change the level of log messages in the database. Levels: ALL, TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF.</p> <p> CONSOLE FILE LEVEL</p> <p>Set this to change the level of log messages in consol and the log file. Levels: ALL, TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF.</p> <p> LOG_DIR</p> <p>Set this to change the directory of log files.</p>"},{"location":"core_systems/service_registry/#changelog","title":"Changelog","text":""},{"location":"core_systems/service_registry/#v500","title":"v5.0.0","text":"<p>Related in CL-5.0.0</p> <ul> <li>general</li> <li>arrowhead-common-utils</li> <li>arrowhead-data-transfer-objects</li> <li>arrowhead-serviceregistry</li> </ul>"},{"location":"downloads/releases/","title":"Releases","text":""},{"location":"downloads/releases/#500","title":"5.0.0","text":"<p>Changelog: CL-5.0.0</p> Date System Name File 07/08/2025 ServiceRegistry AH-serviceregistry-5.0.0.zip 07/08/2025 DynamicServiceOrchestration AH-serviceorchestration-dynamic-5.0.0.zip 07/08/2025 ConsumerAuthorization AH-consumerauthorization-5.0.0.zip 07/08/2025 Authentication AH-authentication-5.0.0.zip 07/08/2025 Blacklist AH-blacklist-5.0.0.zip"},{"location":"downloads/test_builds/","title":"Test Builds","text":"<p>The purpose of test builds is to allow the community to test the release candidates and report possible issues before the official release of a new version.</p>"},{"location":"downloads/test_builds/#latest","title":"LATEST","text":"<p>No recent TESTBUILD is available.</p>"},{"location":"downloads/test_builds/#outdated","title":"OUTDATED","text":""},{"location":"downloads/test_builds/#500-testbuild-2","title":"5.0.0-TESTBUILD-2","text":"<p>Changelog: CL-5.0.0</p> Date System Name Download 20/06/2025 ServiceRegistry AH-serviceregistry-5.0.0-TESTBUILD-2.zip 20/06/2025 DynamicServiceOrchestration AH-serviceorchestration-dynamic-5.0.0-TESTBUILD-2.zip 20/06/2025 ConsumerAuthorization AH-consumerauthorization-5.0.0-TESTBUILD-2.zip 20/06/2025 Authentication AH-authentication-5.0.0-TESTBUILD-2.zip 20/06/2025 Blacklist AH-blacklist-5.0.0-TESTBUILD-2.zip"},{"location":"downloads/test_builds/#500-testbuild-1","title":"5.0.0-TESTBUILD-1","text":"<p>Changelog: CL-5.0.0</p> Date System Name Download 23/04/2025 ServiceRegistry AH-serviceregistry-5.0.0-TESTBUILD-1.zip 23/04/2025 DynamicServiceOrchestration AH-serviceorchestration-dynamic-5.0.0-TESTBUILD-1.zip 23/04/2025 Authentication AH-authentication-5.0.0-TESTBUILD-1.zip 23/04/2025 Blacklist AH-blacklist-5.0.0-TESTBUILD-1.zip"},{"location":"downloads/test_builds/#500-testbuild-0","title":"5.0.0-TESTBUILD-0","text":"<p>Changelog: CL-5.0.0</p> Date System Name Download 14/03/2025 ServiceRegistry AH-serviceregistry-5.0.0-TESTBUILD-0.zip"},{"location":"general/general_config_props/","title":"General Configuartion Properties","text":"<p>The following cofiguration properties are applied by (almost) every Core and Support system:</p> <p> authentication.policy</p> <p>Specifies the applied authentication policy. Can be <code>declared</code>, <code>certificate</code> or <code>outsourced</code>. Learn more about the authentication policies.</p> <p> server.address</p> <p>IP address of the server using HTTP(S) protocol (0.0.0.0 denotes all available IP addresses).</p> <p> server.port</p> <p>Port number of the server for HTTP(S) protocol.</p> <p> domain.name</p> <p>The address the system will use to register itself into the Local Cloud's ServiceRegistry.</p> <p> service.registry.address</p> <p>HTTP(S) Access address of the Local Cloud's ServiceRegistry system. In case of the ServiceRegistry itself, this property is not specified.</p> <p> service.registry.port</p> <p>HTTP(S) Access port of the Local Cloud's ServiceRegistry system. In case of the ServiceRegistry itself, this property is not specified.</p> <p> log.all.request.and.response</p> <p>Set to <code>true</code> in order to show all HTTP requests/responses in debug log.</p> <p> normalization.mode</p> <p>Specifies how to normalize device, system, service definition, service operation, interface template names and cloud identifiers in requests. In <code>simple</code> mode, normalization only removes starting and ending whitespaces and it is the requester's responsibility to make sure the various naming conventions are used. In <code>extended</code> mode, normalization tries to transform inputs to follow the appropriate naming convention.</p> <p> server.ssl.enabled</p> <p>Set to <code>true</code> in order to enable HTTPS mode.</p> <p> server.ssl.key-store-type</p> <p>Type of the key store. It should be PKCS12</p> <p> server.ssl.key-store</p> <p>Path to the key store.</p> <p> server.ssl.key-store-password</p> <p>Password to the key store.</p> <p> server.ssl.key-alias</p> <p>Alias name of the X.509 certificate.</p> <p> server.ssl.key-password</p> <p>Password to the certificate.</p> <p> server.ssl.client-auth</p> <p>Whether the clients of the system must send their certificate during service consumption or not. If authentication.policy is <code>certificate</code>, this property should be <code>need</code> which means that SSL client authentication is necessary. Otherwise, it should be <code>none</code>.</p> <p> server.ssl.trust-store-type</p> <p>Type of the trust store. It should be PKCS12.</p> <p> server.ssl.trust-store</p> <p>Path to the trust store.</p> <p> server.ssl.trust-store-password</p> <p>Password to the trust store.</p> <p> disable.hostname.verifier</p> <p>If <code>true</code>, HTTP client does not check whether the hostname is match one of the server's SAN (Subject Alternative Name) in its certificate. This should not be used in a production environment.</p> <p> mqtt.api.enabled</p> <p>If <code>true</code>, the services of the system can also be accessed via an MQTT broker.</p> <p> mqtt.broker.address</p> <p>Access address of the MQTT broker.</p> <p> mqtt.broker.port</p> <p>Access port of the MQTT broker.</p> <p> mqtt.client.password</p> <p>The system's password to gain access to the specified MQTT broker (the unique system name will be used as username during the login).</p>"},{"location":"general/changelogs/cl500/","title":"CL-5.0.0","text":"<p>Release date: 07/08/2025</p>"},{"location":"general/changelogs/cl500/#general","title":"general","text":"<p>This is the inital release of the 5th generation, which is not backward compatible with the 4th generation! Main conceptual chages:</p> <ul> <li>The reference implementation of 4th generation relied on an interconnected data storage between the Core and Supporting systems. This setup had to be changed due to the requirement for \u201cindependent working modes,\u201d therefore in the 5th generation each Core and Support system has its own database.</li> <li>The above described fundamental change also means that database record identifiers are no longer used to identify entities (system instances, service definitions, etc.). Entities have unique identifiers (names) at the cloud level.</li> <li>The previous authentication mechanism relied on X.509 certificates. In addition, the integration of various authentication mechanisms is supported by the introduction of the Authentication Core system. </li> </ul>"},{"location":"general/changelogs/cl500/#arrowhead-common-utils","title":"arrowhead-common-utils","text":"<p>Initial 5th generation release.</p>"},{"location":"general/changelogs/cl500/#arrowhead-data-transfer-objects","title":"arrowhead-data-transfer-objects","text":"<p>Initial 5th generation release.</p>"},{"location":"general/changelogs/cl500/#arrowhead-serviceregistry","title":"arrowhead-serviceregistry","text":"<p>Initial 5th generation release. Main changes compared to 4th generation:</p> <ul> <li>The system has its own database.</li> <li>Services are represented according to the service-operation design pattern.</li> <li>In addition to service and system data, device data registration is also possible.</li> <li>The interface representation of a service operation is much flexible and more expressive to ensure that translation support services could rely on the interface data stored by ServiceRegistry Core system.</li> <li>MQTT communication protocol support.</li> </ul>"},{"location":"general/changelogs/cl500/#arrowhead-serviceorchestration-dynamic","title":"arrowhead-serviceorchestration-dynamic","text":"<p>Initial 5th generation release. Main changes compared to 4th generation:</p> <ul> <li>The system has its own database.</li> <li>Push orchestration support.</li> <li>This system implements only the dynamic orchestration strategy.</li> <li>MQTT communication protocol support.</li> </ul>"},{"location":"general/changelogs/cl500/#arrowhead-consumer-authorization","title":"arrowhead-consumer-authorization","text":"<p>Initial 5th generation release. Main changes compared to 4th generation:</p> <ul> <li>The system has its own database.</li> <li>Policy based authorization is implemented (instead of the previous peer-to-peer based).</li> <li>Provider systems are allowed to define their own authorization policies with the stipulation that rules made by cloud operators (or higher entities) always have priority.</li> <li>Simple verifiable authorization tokens are used besides the self-contained tokens.</li> <li>MQTT communication protocol support.</li> </ul>"},{"location":"general/changelogs/cl500/#arrowhead-authentication","title":"arrowhead-authentication","text":"<p>Initial 5th generation release.</p> <ul> <li>This Core system did not exist before.</li> </ul>"},{"location":"general/changelogs/cl500/#arrowhead-blacklist","title":"arrowhead-blacklist","text":"<p>Initial 5th generation release.</p> <ul> <li>This Support system did not exist before.</li> </ul>"},{"location":"help/certificate-profiles/","title":"X.509 Certificate Profiles","text":"<p>X.509 is a certificate standard produced by the International Telecommunication Union - Telecommunication Standardization Sector (ITU-T) and is famously used by the TLS and DTLS protocols. </p>"},{"location":"help/certificate-profiles/#profile-hierarchy","title":"Profile Hierarchy","text":"<p>In brief, an X.509 certificate represents the identity of its owner. It records required inputs to a secure key exchange algorithm, as well as how the identity it represents is endorsed by a hierarchy of issuers.</p> <p>There are nine arrowhead certificate profiles defined and depicted in the following diagram:</p> <p></p> <p>The certificates must contain their profile identifiers as a Distinguished Name Qualifier (DN).</p> Profile Identifier Master <code>ma</code> Gate <code>ga</code> Organization <code>or</code> Local Cloud <code>lo</code> On-Boarding <code>on</code> Broker <code>br</code> Device <code>de</code> System <code>sy</code> Operator <code>op</code>"},{"location":"help/certificate-profiles/#master-profile","title":"Master Profile","text":"<p>A Master certificate exists to establish trust between organizations that may want to interconnect their Arrowhead systems. It does this by issuing Organization and Gate certificates. The former enables organizations to set up their own certificate hierarchies while sharing a common CA with other organizations. The latter kind enables all those organizations to trust a special kind of relay system, which facilitates negotiating connections between organizations.</p> <p>Issuer</p> <p>May be self-signed or issued by an RFC 5280-compliant CA. </p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>arrowhead.eu</code> DN Qualifier (DN) <code>ma</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Omit field if self-signed. Subject Key Identifier No Hash of subject public key. Basic Constraints Yes <code>cA: true</code>, <code>pathLenConstraint: 2</code> Key Usage Yes Bits <code>keyCertSign</code> and <code>cRLSign</code> must be set."},{"location":"help/certificate-profiles/#gate-profile","title":"Gate Profile","text":"<p>A Gate certificate is associated with a message relay or bus that exists to guarantee delivery of messages between the local clouds of distinct organizations. Its existence means that such messages can be sent over a secure transport.</p> <p>Issuer</p> <p>Must be issued by a Master certificate.</p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>&lt;relay-name&gt;.arrowhead.eu</code> DN Qualifier (DN) <code>ga</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Basic Constraints Yes <code>cA: false</code> Key Usage Yes Bits <code>digitalSignature</code> and <code>keyEncipherment</code> must be set. Extended Key Usage No Purposes <code>serverAuth</code> and <code>clientAuth</code> must be specified. Subject Alternative Name No At least one IP address, DNS name or other identifier through which the system can be reached."},{"location":"help/certificate-profiles/#organization-profile","title":"Organization Profile","text":"<p>An Organization certificate is maintained by a single organization, allowing it to manage the certificates of their own local clouds.</p> <p>Issuer</p> <p>Must be issued by a Master certificate.</p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>&lt;organization-name&gt;.arrowhead.eu</code> DN Qualifier (DN) <code>or</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Subject Key Identifier No Hash of subject public key. Basic Constraints Yes <code>cA: true</code>, <code>pathLenConstraint: 1</code> Key Usage Yes Bits <code>keyCertSign</code> and <code>cRLSign</code> must be set. <p>If the certificate will be used to automatically respond to CSRs (Certificate Signing Request) via a network application interface, the following must also be present:</p> Extension Critical Value Key Usage Yes Bits <code>digitalSignature</code> and <code>keyEncipherment</code> must be set in addititon. Extended Key Usage No Purposes <code>serverAuth</code> and <code>clientAuth</code> must be specified. Subject Alternative Name No At least one IP address, DNS name or other identifier to which CSRs can be sent."},{"location":"help/certificate-profiles/#local-cloud-profile","title":"Local Cloud Profile","text":"<p>A Local Cloud certificate is maintained by a single local cloud, enabling it to issue end entity certificates for on-boarding and on-boarded devices, as well as for systems and operators.</p> <p>Issuer</p> <p>Must be issued by an Organization certificate.</p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>&lt;cloud-name&gt;.&lt;organization-name&gt;.arrowhead.eu</code> DN Qualifier (DN) <code>lo</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Subject Key Identifier No Hash of subject public key. Basic Constraints Yes <code>cA: true</code>, <code>pathLenConstraint: 0</code> Key Usage Yes Bits <code>keyCertSign</code> and <code>cRLSign</code> must be set. <p>If the certificate will be used to automatically respond to CSRs (Certificate Signing Request) via a network application interface, the following must also be present:</p> Extension Critical Value Key Usage Yes Bits <code>digitalSignature</code> and <code>keyEncipherment</code> must be set in addititon. Extended Key Usage No Purposes <code>serverAuth</code> and <code>clientAuth</code> must be specified. Subject Alternative Name No At least one IP address, DNS name or other identifier to which CSRs can be sent."},{"location":"help/certificate-profiles/#on-boarding-profile","title":"On-Boarding Profile","text":"<p>An On-Boarding certificate allows for a device in an Arrowhead local cloud to request a new device certificate. It is used for both, either to provide new devices and/or to facilitate renewal of certificates as they are about to expire. Certificates adhering to this profile must only be provided to devices known or assumed to be trustworthy.</p> <p>Issuer</p> <p>Must be issued by a Local Cloud certificate.</p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>&lt;on-boarding-system-name&gt;.&lt;cloud-name&gt;.&lt;organization-name&gt;.arrowhead.eu</code> DN Qualifier (DN) <code>on</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Basic Constraints Yes <code>cA: false</code> Key Usage Yes Bits <code>digitalSignature</code> and <code>keyEncipherment</code> must be set. Extended Key Usage No Purposes <code>serverAuth</code> and <code>clientAuth</code> must be specified. Subject Alternative Name No At least one IP address, DNS name or other identifier through which the owning device can be reached."},{"location":"help/certificate-profiles/#device-profile","title":"Device Profile","text":"<p>A Device certificate allows for a device in an Arrowhead local cloud to request new system certificates. One system certificate is required for each system a given device intends to run. Certificates adhering to this profile must only be provided to devices known or assumed to be trustworthy.</p> <p>Issuer</p> <p>Must be issued by a Local Cloud certificate.</p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>&lt;device-name&gt;.&lt;cloud-name&gt;.&lt;organization-name&gt;.arrowhead.eu</code> DN Qualifier (DN) <code>de</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Basic Constraints Yes <code>cA: false</code> Key Usage Yes Bits <code>digitalSignature</code> and <code>keyEncipherment</code> must be set. Extended Key Usage No Purposes <code>serverAuth</code> and <code>clientAuth</code> must be specified. Subject Alternative Name No At least one IP address, DNS name or other identifier through which the device can be reached."},{"location":"help/certificate-profiles/#broker-profile","title":"Broker Profile","text":"<p>A Broker certificate is associated with a message broker that exists to guarantee delivery of messages between the systems within a Local Cloud when secured publish-subscribe communication strategy is required (like MQTT protocol).</p> <p>Issuer</p> <p>Must be issued by a Local Cloud certificate.</p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>&lt;broker-name&gt;.&lt;cloud-name&gt;.&lt;organization-name&gt;.arrowhead.eu</code> DN Qualifier (DN) <code>br</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Basic Constraints Yes <code>cA: false</code> Key Usage Yes Bits <code>digitalSignature</code> and <code>keyEncipherment</code> must be set. Extended Key Usage No Purposes <code>serverAuth</code> and <code>clientAuth</code> must be specified. Subject Alternative Name No At least one IP address, DNS name or other identifier through which the system can be reached."},{"location":"help/certificate-profiles/#system-profile","title":"System Profile","text":"<p>A System certificate allows for a device in an Arrowhead local cloud to provide the services associated with a particular system, and/or to act as a service consumer.</p> <p>Issuer</p> <p>Must be issued by a Local Cloud certificate.</p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>&lt;system-name&gt;.&lt;cloud-name&gt;.&lt;organization-name&gt;.arrowhead.eu</code> DN Qualifier (DN) <code>sy</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Basic Constraints Yes <code>cA: false</code> Key Usage Yes Bits <code>digitalSignature</code> and <code>keyEncipherment</code> must be set. Extended Key Usage No Purposes <code>serverAuth</code> and <code>clientAuth</code> must be specified. Subject Alternative Name No At least one IP address, DNS name or other identifier through which the system can be reached."},{"location":"help/certificate-profiles/#operator-profile","title":"Operator Profile","text":"<p>An Operator certificate allows for a human or computer operator to administer a particular Arrowhead Local Cloud.</p> <p>Issuer</p> <p>Must be issued by a Local Cloud certificate.</p> <p>Subject</p> <p>The subject field DN must contain the following attributes exactly once.</p> Attribute Type Value Common Name (CN) <code>&lt;operator-name&gt;.&lt;cloud-name&gt;.&lt;organization-name&gt;.arrowhead.eu</code> DN Qualifier (DN) <code>sy</code> <p>Extensions</p> <p>The following extensions must be used and configured as described:</p> Extension Critical Value Authority Key Identifier No Hash of issuer public key. Basic Constraints Yes <code>cA: false</code> Key Usage Yes Bits <code>digitalSignature</code> and <code>keyEncipherment</code> must be set. Extended Key Usage No Purposes <code>serverAuth</code> and <code>clientAuth</code> must be specified. Subject Alternative Name No At least one IP address, DNS name or other identifier through which the system can be reached."},{"location":"help/definitions/","title":"Definitions","text":""},{"location":"help/definitions/#primary","title":"Primary","text":""},{"location":"help/definitions/#local-cloud","title":"Local Cloud","text":"<p>A preferably private and protected network of loosely coupled collaborating systems, that are performing on a well-defined domain (such as a geographically bounded factory or any encapsulated group of automatization tasks).</p>"},{"location":"help/definitions/#microsystem-or-system","title":"Microsystem or System","text":"<p>An identifiable software instance that collaborates within a Local Cloud. A system can play a consumer role, a provider role or both.</p>"},{"location":"help/definitions/#microservice-or-service","title":"Microservice or Service","text":"<p>An identifiable set of service-operations that covers a well-definied scope of activities. </p>"},{"location":"help/definitions/#service-operation","title":"Service Operation","text":"<p>An individually identifiable component of a service, that can be consumed by a collaborating system. An operation performs a single physical or virtual action related to its service scope, while producing output data and possibly processing input data. </p>"},{"location":"help/definitions/#supplementary","title":"Supplementary","text":""},{"location":"help/definitions/#access-token","title":"Access Token","text":"<p>An experiable reference that points to or holds the access permission details of an authenticated system.</p>"},{"location":"help/definitions/#certificate","title":"Certificate","text":"<p>A digital certificiate that securely holds the identity of its owner and also can be used to encrypt the data transfer between the communicating parties.</p>"},{"location":"help/definitions/#consumer","title":"Consumer","text":"<p>A system that wants use services.</p>"},{"location":"help/definitions/#event","title":"Event","text":"<p>A short notification about a significant occurrence or change in state that is recognized within a system by itself and is boradcasted within the Local Cloud. The notification is not holding any other data, than an [event-type], a timestamp, a sender system reference and a small(!) payload if really necessary.</p>"},{"location":"help/definitions/#event-type","title":"Event-Type","text":"<p>A textual identifier that refers to the nature of a given event.</p>"},{"location":"help/definitions/#identity-info","title":"Identity Info","text":"<p>A self-declaration based identifier that is associated with a system considered as authenticated.</p>"},{"location":"help/definitions/#identity-token","title":"Identity Token","text":"<p>An experiable reference that points to an identifier that is associated with a system to be authenticated.</p>"},{"location":"help/definitions/#provider","title":"Provider","text":"<p>A system that offers services.</p>"},{"location":"help/faq/","title":"FAQ","text":""},{"location":"help/faq/#java-memory-usage","title":"Java Memory Usage","text":"<p>The Java heap is the area of memory used to store objects instantiated by the applications running on the Java Virtual Machine (JVM). The Maximum Java Heap Size (Xmx) is the maximum amount of memory that a Java application can use. Objects in the heap can be shared between threads. Each thread in a Java application has its own stack (Xss). The stack is also used to hold return addresses, function/method call arguments, etc. JVM also keeps track of metadata of the classes (MaxMetaspaceSize) which have been loaded separated from the main Java heap.</p>"},{"location":"help/faq/#deafult-memory-usage","title":"Deafult Memory Usage","text":"<p>The default values for <code>Xmx</code> is based on the physical memory of the machine. From Java 11 the <code>Xmx</code> value is 25% of the available memory with a maximum of 25 GB. However, where there is 2 GB or less of physical memory, the value set is 50% of available memory with a minimum value of 16 MB and a maximum value of 512 MB.</p> <p>The default value for <code>Xss</code> is 320 KB for 31-bit or 32-bit JVMs and 1024 KB for 64-bit JVMs.</p> <p>The <code>MaxMetaspaceSize</code> is unlimited by default.</p>"},{"location":"help/faq/#customized-memory-usage","title":"Customized Memory Usage","text":"<p>Use these java command-line parameters to control the memory usage:</p> <ul> <li>Use <code>-Xmx</code> to specify the maximum Java heap size</li> <li>Use <code>-Xms</code> to specify the initial/minimum Java heap size</li> <li>Use <code>-Xss</code> to set the Java thread stack size</li> <li>Use <code>-XX:MaxMetaspaceSize</code> to set the maximum size of the Metaspace.</li> </ul> <p>Example to specify the amount of memory the JVM should use when starting a core system:</p> <p><code>java -jar arrowhead-{core-system}-{version}.jar -Xms128M -Xmx1G</code></p> <p>JVM will startup with 128 megabytes of memory and will allow the process to use up to 1 gigabyte of memory</p> <p>Note: The higher traffic is expected, the more memory will be necessary. A lower Xmx value will cause a decrease in performance due to JVM has to force frequent garbage collections in order to free up space, also if the Xmx value is lower than the amount of live data, it might trigger OutOfMemoryError.</p> <p>Learn more</p>"},{"location":"help/faq/#mysql-connections","title":"MySQL Connections","text":"<p>If your Core Systems gets a Too many connections error when try to connect to the mysqld server at start up, this means that all available connections are in use by other clients.</p> <p>The number of connections permitted is controlled by the <code>max_connections</code> system variable. Its default value may vary from version to version. If you need to support more connections, you should set a larger value for this variable. See MySQL Reference.</p>"},{"location":"help/naming-convention/","title":"Naming Convention","text":"<p>Names of systems, services, operations, devices and interfaces are used in programing languages, URLs, DNS entries and file systems. Adopting a consistent naming convention across the community enhances interoperability among different programming environments and facilitates clearer interpretation by both humans and machines. Within the Arrowhead architecture, it is essential that key entities are clearly and distinctly identifiable through a well-defined and systematic naming strategy.</p> <p>Learn more from the Eclipse Arrowhead Naming Convention fundamental document.</p>"},{"location":"help/naming-convention/#entities","title":"Entities","text":"<p>Entity names could be maximum of 63 characters long and have to follow the below detailed naming style:</p> Entity Naming Style Example System PascalCase <code>ServiceRegistry</code> Service camelCase <code>serviceDiscovery</code> Service operation kebab-case <code>get-entries</code> Interface snake_case <code>generic_http</code> Device UPPER_SNAKE_CASE <code>MY_DEVICE</code>"},{"location":"help/naming-convention/#composite-identifiers","title":"Composite identifiers","text":"<p>Composite identifiers are made of multiple entity names and/or attributes delimited by <code>|</code>. Each part can be maximum of 63 characters long.</p> Identifier Nameing Style Example Service instance SystemName|serviceName|version <code>ServiceRegistry|serviceDiscovery|1.0.0</code> Cloud CloudName|OrganizationName <code>TestCloud|AitiaInc</code>"},{"location":"help/naming-convention/#special-cases","title":"Special cases","text":""},{"location":"help/naming-convention/#x509-certificates","title":"X.509 Certificates","text":"<p>The use of Common Name (CN) in X.509 Certificates - which is important in case of certificate authentication policy -  has limited capabilities. To overcome this issue, the common name parts in the certificates can follow the kebab styling and be delimited by <code>.</code> character. The common name will be transformed to the appropriate styling on code level, and from then on this transformed version will be processed.</p> System profile example Required CN <code>my-provider.my-cloud.my-company.arrowhead.eu</code> Transformed CN <code>MyProvider.MyCloud.MyCompany.arrowhead.eu</code> Retrieved System Name <code>MyProvider</code> Retrieved Cloud Identifier <code>MyCloud|MyCompany</code> Device profile example Required CN <code>my-device.my-cloud.my-company.arrowhead.eu</code> Transformed CN <code>MY_DEVICE.MyCloud.MyCompany.arrowhead.eu</code> Retrieved Device Name <code>MY_DEVICE</code> Retrieved Cloud Identifier <code>MyCloud|MyCompany</code>"},{"location":"help/tutorials/create-certificates/","title":"Create Certificates","text":"<p>Coming soon...</p>"},{"location":"help/tutorials/mosquitto-mqtt-broker/","title":"Mosquitto MQTT Broker","text":"<p>Eclipse Mosquitto is an open source (EPL/EDL licensed) message broker that implements the MQTT protocol and is a good choice to use in an Arrowhead Local Cloud when MQTT is required.</p>"},{"location":"help/tutorials/mosquitto-mqtt-broker/#install","title":"Install","text":"<p>For the installation possibilities please consult with their official site.</p>"},{"location":"help/tutorials/mosquitto-mqtt-broker/#access-control","title":"Access Control","text":"<p>In a properly secured Local Cloud, when MQTT is required, the access to the broker and topics should also be controlled. Connecting clients should be authenticated and reading/writing of topics for service providing should be limited to the actual service provider clients.</p>"},{"location":"help/tutorials/mosquitto-mqtt-broker/#client-authentication","title":"Client authentication","text":"<p>In order to set up client authentication a \"password file\" has to be created which contains user name and password combinations for the clients. </p> <ul> <li>It is recommended that Arrowhead Core Systems have unique credentials.</li> <li>It is recommended that service providing application systems have unique credentials.</li> <li>It is acceptable that application systems with service consumption purpose only, share a common credential.</li> </ul> <p>You can manage the users by using the <code>mosquitto_passwd</code> command (which comes with the broker installation).</p> <p>Create the password file with the first user:</p> <pre><code>mosquitto_passwd -c /etc/mosquitto/users &lt;username&gt;\n</code></pre> <p>You will be prompted to set a password and the <code>users</code> file will be created. Only the hashed version of the password is stored in the file.</p> <p>Add additional users to the file (without overwriting it):</p> <pre><code>mosquitto_passwd /etc/mosquitto/users &lt;username&gt;\n</code></pre> <p>Modify the broker configuration:</p> <p>The Mosquitto configuration file is usually located at <code>/etc/mosquitto/mosquitto.conf</code>. To enable password authentication add the following lines:</p> <pre><code>allow_anonymous false\npassword_file /etc/mosquitto/users\n</code></pre> <p>After making changes, always restart the broker!</p>"},{"location":"help/tutorials/mosquitto-mqtt-broker/#topic-read-control","title":"Topic read control","text":"<p>Having read or write access control on the topics used for service providing ensures that only the actual service providers are allowed</p> <ul> <li>to write to a publish kind service topic, and</li> <li>to read a request-response kind service topic.</li> </ul> <p>Create an access control file</p> <p>Create an <code>accesctrl</code> file under the <code>/etc/mosquitto</code> folder with a similar content:</p> <pre><code># Arrowhead Core Systems\n\nuser serviceregistry\ntopic read arrowhead/serviceregistry/system-discovery\ntopic read arrowhead/serviceregistry/service-discovery\n\n...\n\n# Publish kind service topics\n\nuser &lt;username_a&gt;\ntopic write &lt;its/specific/service/topic/&gt;\n\nuser &lt;username_b&gt;\ntopic write &lt;its/specific/service/topic/&gt;\n\n...\n\n# Request-response kind service topics\n\nuser &lt;username_c&gt;\ntopic read &lt;its/specific/service/topic/&gt;\n\nuser &lt;username_d&gt;\ntopic read &lt;its/specific/service/topic/&gt;\n\n...\n\n</code></pre> <p>Modify the broker configuration:</p> <p>The Mosquitto configuration file is usually located at <code>/etc/mosquitto/mosquitto.conf</code>. To enable topic access control add the following line:</p> <pre><code>acl_file /etc/mosquitto/accesctrl\n</code></pre> <p>After making changes, always restart the broker!</p>"},{"location":"help/tutorials/mosquitto-mqtt-broker/#ssl-with-arrowhead-certificate","title":"SSL with Arrowhead Certificate","text":"<p>Using Arrowhead compliant broker certificate makes your MQTT Broker part of your Local Cloud when secure network communication (SSL) is required. However the certificates in the default <code>PKCS#12</code> format (<code>broker.p12</code> file for example) can't be directly utilized by the Eclipse Mosquitto. It requires a separated CA certificate file, a public certificate file and a private key file what you can extract from your <code>PKCS#12</code> file with the help of the following openssl library commands:</p> <p>Extract the CA certificate:</p> <pre><code>openssl pkcs12 -in your-broker-certificate.p12 -cacerts -nokeys -out ca.crt\n</code></pre> <p>Now you can configure the <code>ca.crt</code> file as your broker's CA certificate.</p> <p>Extract the public certificate:</p> <pre><code>openssl pkcs12 -in your-broker-certificate.p12 -clcerts -nokeys -out public.crt\n</code></pre> <p>Now you can configure the <code>public.crt</code> file as your broker's public certificate.</p> <p>Extract the private key:</p> <pre><code>openssl pkcs12 -in your-broker-certificate.p12 -nocerts -out private.key\n</code></pre> <ul> <li>You may be prompted to enter the password for the <code>.p12</code> file.</li> <li>You will be prompted to add a passphrase to the extracted key.</li> </ul> <p>Now you can configure the <code>private.key</code> file as your broker's private key.</p> <p>Mosquitto will prompt for the private key password on startup. To avoid this (in secure environments), re-export the private key without a password:</p> <pre><code>openssl rsa -in private.key -out private.key\n</code></pre> <p>At the end of this process your Mosquitto configuration file should contain something similar:</p> <pre><code>cafile /path/to/ca.crt\ncertfile /path/to/public.crt\nkeyfile /path/to/private.key\n</code></pre> <p>After making changes, always restart the broker!</p>"},{"location":"help/tutorials/serviceregistry-http-demo/","title":"ServiceRegistry HTTP Demo","text":""},{"location":"help/tutorials/serviceregistry-http-demo/#recap","title":"Recap","text":"<p>In this demo, we will demonstrate through a concrete example how a system should use the ServiceRegistry endpoints.</p> <p></p> <p>Let's say, we have a greenhouse. Inside the greenhouse, there are plantations divided into blocks, and close to the blocks, THERMOMETHERs are placed. We can monitor the temperature of the blocks, using the Systems that run on the THERMOMETERs. If the temperature is too extreme, the Systems may send a warning to our office.</p> <p>There are two types of THERMOMETERs: indoor and outdoor THERMOMETERs, so we can even monitor the temperature outside the greenhouse.</p> <p></p> <p>In our office, there are different WEATHER_DISPLAYERs that can show various data about the weather, such as wind or temperature. The temperature data measured by the THERMOMETERs in the greenhouse is sent to these WEATHER_DISPLAYERs. We also have ALARMs, this way we are immediately informed about extreme temperatures.</p> <p>THERMOMETERs can provide information on temperature in Celsius, Fahrenheit or Kelvin scales, but not all THERMOMETERs are capable of sending data at all scales.</p> <p>The concrete entities used in our example can be mapped to ServiceRegistry entities as follows:</p> <p></p> <ul> <li>Devices: THERMOMETERs, WEATHER_DISPLAYERs and ALARMs</li> <li>Systems: TemperatureProviders running on the THERMOMETERs, TemperatureConsumers running on the WEATHER_DISPLAYERs, and AlertConsumers running on the ALARMs.</li> <li>Services: fahrenheitInfo, kelvinInfo, celsiusInfo, and alertService, provided by the TemperatureProviders and consumed by the TemperatureConsumers and the AlertConsumers</li> </ul> <p>We will demonstrate the usage of the endpoints via two examples: example 1 is about a provider system, and example 2 is about a consumer system.</p>"},{"location":"help/tutorials/serviceregistry-http-demo/#example-1-provider","title":"Example 1: Provider","text":"<p>In the following, we'll see how:</p> <ul> <li>a system called TemperatureProvider2, </li> <li>running on the device named THERMOMETER2,</li> <li>publishes its services: kelvinInfo, celsiusInfo and alertService</li> </ul> <p>after registering itself into the Local Cloud.</p>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-1-authentication","title":"Step 1: Authentication","text":"<p>First of all, the system should perform some kind of authentication. In this example the declared authentication strategy will be used.</p> <p>To perform this type of authentication, the system must provide an authentication header for each request. This should consist of the SYSTEM// prefix, followed by the name of the system. </p> <p>In our example, the authorization header will look like this:</p> <pre><code>-H 'Authorization: Bearer SYSTEM//TemperatureProvider2'\n</code></pre>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-2-lookup-devices","title":"Step 2: Lookup Devices","text":"<p>During registration, the system can specify which device it is running on. In this case, our device is called THERMOMETER2. Specifying the device is optional, but let's say, that in our example it is relevant to the operation of TemperatureProvider2. Therefore, the system first looks up if there is a device with name THERMOMETER2 in the Local Cloud, to make sure that the device it is running on is already registered. (Otherwise you must register the device first, as shown in example 2.)</p> <p>The request looks like this:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/device-discovery/lookup' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//TemperatureProvider2' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"deviceNames\": [\n    \"THERMOMETER2\"\n  ],\n  \"addresses\": [\n  ],\n  \"addressType\": \"\",\n  \"metadataRequirementList\": [\n  ]\n}'\n</code></pre> <p>Which leads to the following response from the ServiceRegistry:</p> <pre><code>{\n  \"entries\": [\n    {\n      \"name\": \"THERMOMETER2\",\n      \"metadata\": {\n        \"scales\": [\n          \"kelvin\",\n          \"celsius\"\n        ],\n        \"maxTemperature\": {\n          \"kelvin\": 310,\n          \"celsius\": 40\n        },\n        \"minTemperature\": {\n          \"kelvin\": 260,\n          \"celsius\": -10\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"81:ef:1a:44:7a:f5\"\n        }\n      ],\n      \"createdAt\": \"2024-11-04T01:53:02Z\",\n      \"updatedAt\": \"2024-11-04T01:53:02Z\"\n    }\n  ],\n  \"count\": 1\n}\n</code></pre> <p>Since we have an existing entity back, THERMOMETER2 is indeed a registered device.</p>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-3-register-system","title":"Step 3: Register System","text":"<p>Now we can perform the registration operation of our TemperatureProvider2 system.</p> <p>To register, we need to provide the following information about the system:</p> <ul> <li>metadata: It's totally up to us what we put into it. For TemperatureProvider2, we want to make sure, that it contains a list about the temperature scales that the system can manage (Kelvin and Celsius), a location in the greenhouse from which the system's device measures the temperature (North side, 2. block), and the type of the thermometer (indoor).</li> <li>version: Since there was no prior version of this system, we can leave this field empty. The ServiceRegistry will initialize this value to a default, which is 1.0.0.</li> <li>addresses: This is typically an IP address or a hostname for the system. In case of the TemperatureProvider2, we want to provide both. For IP address, we are using 192.168.56.116, and the hostname is tp2.greenhouse.com.</li> <li>device name: This can be left blank, but we will set it to the name of our device: THERMOMETER2.</li> </ul> <p>It is not necessary to specify the system name explicitly, because the ServiceRegistry extracts it from the authorization header.</p> <p>Based on the above, the request looks like this:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/system-discovery/register' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//TemperatureProvider2' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"metadata\": {\n    \"scales\": [ \"kelvin\", \"celsius\" ],\n    \"location\": { \"side\": \"North\", \"block\": 2 },\n    \"indoor\": true\n  },\n  \"version\": \"\",\n  \"addresses\": [\n    \"192.168.56.116\",\n    \"tp2.greenhouse.com\"\n  ],\n  \"deviceName\": \"THERMOMETER2\"\n}'\n</code></pre> <p>We receive the following response:</p> <pre><code>{\n  \"name\": \"TemperatureProvider2\",\n  \"metadata\": {\n    \"scales\": [\n      \"kelvin\",\n      \"celsius\"\n    ],\n    \"location\": {\n      \"side\": \"North\",\n      \"block\": 2\n    },\n    \"indoor\": true\n  },\n  \"version\": \"1.0.0\",\n  \"addresses\": [\n    {\n      \"type\": \"IPV4\",\n      \"address\": \"192.168.56.116\"\n    },\n    {\n      \"type\": \"HOSTNAME\",\n      \"address\": \"tp2.greenhouse.com\"\n    }\n  ],\n  \"device\": {\n    \"name\": \"THERMOMETER2\",\n    \"metadata\": {\n      \"scales\": [\n        \"kelvin\",\n        \"celsius\"\n      ],\n      \"maxTemperature\": {\n        \"kelvin\": 310,\n        \"celsius\": 40\n      },\n      \"minTemperature\": {\n        \"kelvin\": 260,\n        \"celsius\": -10\n      }\n    },\n    \"addresses\": [\n      {\n        \"type\": \"MAC\",\n        \"address\": \"81:ef:1a:44:7a:f5\"\n      }\n    ],\n    \"createdAt\": \"2024-11-04T01:53:02Z\",\n    \"updatedAt\": \"2024-11-04T01:53:02Z\"\n  },\n  \"createdAt\": \"2024-11-08T10:21:10.950683800Z\",\n  \"updatedAt\": \"2024-11-08T10:21:10.950683800Z\"\n}\n</code></pre>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-4-register-service-instances","title":"Step 4: Register Service Instances","text":"<p>The TemperatureProvider2 system that we have just registered provides three services in the Local Cloud:</p> <ul> <li>kelvinInfo: provides temperature information using the Kelvin scale,</li> <li>celsiusInfo: provides temperature information using the Celsius scale,</li> <li>alertService: sends an alert if the temperature is extreme (by default, these thresholds are 10 and 25 Celsius, but the consumer can overwrite them).</li> </ul> <p>We have to register these services one by one.</p> <p>1. kelvinInfo:  We have to provide the following information:</p> <ul> <li>service definition name: In this example, we use kelvinInfo, which is already an existing service definition stored in the Local Cloud. You can use a non-existing service definition as well, because in that case, the registration process will create it.</li> <li>version: We will use the default version, so we can leave this field blank.</li> <li>expires at: This is a timestamp in the future, when the service is no longer funtioning. For kelvinInfo, we set this to 01. 01. 2030. </li> <li>metadata: This can be customised depending on the service. For temperature information, we define the margin of error, which is 0.5 degree.</li> <li>interfaces: All the services use HTTP protocol, so we will go with the template named generic_http, that already exists in the Local Cloud. Note that in our case, the service discovery interface policy is set to restricted, which means that only already existing interface templates can be used. If you set this to extendable or open, you can use non-existent interface templates, and they will be created as well. The interface provided by the kelvinInfo service is the following:<ul> <li>GET tp2.greenhouse.com:8080/kelvin/query</li> </ul> </li> </ul> <p>Based on these specifications, the request looks like this:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/service-discovery/register' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//TemperatureProvider2' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"serviceDefinitionName\": \"kelvinInfo\",\n  \"version\": \"\",\n  \"expiresAt\": \"2030-01-01T00:00:00Z\",\n  \"metadata\": {\n    \"marginOfError\": 0.5\n  },\n  \"interfaces\": [\n    {\n      \"templateName\": \"generic_http\",\n      \"protocol\": \"http\",\n      \"policy\": \"NONE\",\n      \"properties\": {\n        \"accessAddresses\": [ \"192.168.56.116\", \"tp2.greenhouse.com\" ],\n        \"accessPort\": 8080,\n        \"basePath\": \"/kelvin\",\n        \"operations\": { \"query-temperature\": { \"method\": \"GET\", \"path\": \"/query\" } }\n      }\n    }\n  ]\n}'\n</code></pre> <p>After successful operation, we will receive the JSON object representation of the registered service:</p> <pre><code>{\n  \"instanceId\": \"TemperatureProvider2|kelvinInfo|1.0.0\",\n  \"provider\": {\n    \"name\": \"TemperatureProvider2\",\n    \"metadata\": {\n      \"scales\": [\n        \"kelvin\",\n        \"celsius\"\n      ],\n      \"location\": {\n        \"side\": \"North\",\n        \"block\": 2\n      },\n      \"indoor\": true\n    },\n    \"version\": \"1.0.0\",\n    \"addresses\": [\n      {\n        \"type\": \"IPV4\",\n        \"address\": \"192.168.56.116\"\n      },\n      {\n        \"type\": \"HOSTNAME\",\n        \"address\": \"tp2.greenhouse.com\"\n      }\n    ],\n    \"device\": {\n      \"name\": \"THERMOEMTER2\",\n      \"metadata\": {\n        \"scales\": [\n          \"kelvin\",\n          \"celsius\"\n        ],\n        \"maxTemperature\": {\n          \"kelvin\": 310,\n          \"celsius\": 40\n        },\n        \"minTemperature\": {\n          \"kelvin\": 260,\n          \"celsius\": -10\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"81:ef:1a:44:7a:f5\"\n        }\n      ],\n      \"createdAt\": \"2024-11-04T01:53:02Z\",\n      \"updatedAt\": \"2024-11-04T01:53:02Z\"\n    },\n    \"createdAt\": \"2024-11-08T10:21:11Z\",\n    \"updatedAt\": \"2024-11-08T10:21:11Z\"\n  },\n  \"serviceDefinition\": {\n    \"name\": \"kelvinInfo\",\n    \"createdAt\": \"2024-11-08T11:24:43Z\",\n    \"updatedAt\": \"2024-11-08T11:24:43Z\"\n  },\n  \"version\": \"1.0.0\",\n  \"expiresAt\": \"2030-01-01T00:00:00Z\",\n  \"metadata\": {\n    \"marginOfError\": 0.5\n  },\n  \"interfaces\": [\n    {\n      \"templateName\": \"generic_http\",\n      \"protocol\": \"http\",\n      \"policy\": \"NONE\",\n      \"properties\": {\n        \"accessAddresses\": [\n          \"192.168.56.116\",\n          \"tp2.greenhouse.com\"\n        ],\n        \"accessPort\": 8080,\n        \"operations\": {\n          \"query-temperature\": {\n            \"path\": \"/query\",\n            \"method\": \"GET\"\n          }\n        },\n        \"basePath\": \"/kelvin\"\n      }\n    }\n  ],\n  \"createdAt\": \"2024-11-19T12:00:07.959849300Z\",\n  \"updatedAt\": \"2024-11-19T12:00:07.959849300Z\"\n}\n</code></pre> <p>2. celsiusInfo:  The only difference with the kelvinInfo is the service definition name (celsiusInfo) and the interface (GET tp2.greenhouse.com:8080/celsius/query). All the other registation data will remain the same.</p> <p>So the request will look like this:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/service-discovery/register' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//TemperatureProvider2' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"serviceDefinitionName\": \"celsiusInfo\",\n  \"version\": \"\",\n  \"expiresAt\": \"2030-01-01T00:00:00Z\",\n  \"metadata\": {\n    \"marginOfError\": 0.5\n  },\n  \"interfaces\": [\n    {\n      \"templateName\": \"generic_http\",\n      \"protocol\": \"http\",\n      \"policy\": \"NONE\",\n      \"properties\": {\n        \"accessAddresses\": [ \"192.168.56.116\", \"tp2.greenhouse.com\" ],\n        \"accessPort\": 8080,\n        \"basePath\": \"/celsius\",\n        \"operations\": { \"query-temperature\": { \"method\": \"GET\", \"path\": \"/query\"} }\n      }\n    }\n  ]\n}'\n</code></pre> <p>The received response is the following:</p> <pre><code>{\n  \"instanceId\": \"TemperatureProvider2|celsiusInfo|1.0.0\",\n  \"provider\": {\n    \"name\": \"TemperatureProvider2\",\n    \"metadata\": {\n      \"scales\": [\n        \"kelvin\",\n        \"celsius\"\n      ],\n      \"location\": {\n        \"side\": \"North\",\n        \"block\": 2\n      },\n      \"indoor\": true\n    },\n    \"version\": \"1.0.0\",\n    \"addresses\": [\n      {\n        \"type\": \"IPV4\",\n        \"address\": \"192.168.56.116\"\n      },\n      {\n        \"type\": \"HOSTNAME\",\n        \"address\": \"tp2.greenhouse.com\"\n      }\n    ],\n    \"device\": {\n      \"name\": \"THERMOMETER2\",\n      \"metadata\": {\n        \"scales\": [\n          \"kelvin\",\n          \"celsius\"\n        ],\n        \"maxTemperature\": {\n          \"kelvin\": 310,\n          \"celsius\": 40\n        },\n        \"minTemperature\": {\n          \"kelvin\": 260,\n          \"celsius\": -10\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"81:ef:1a:44:7a:f5\"\n        }\n      ],\n      \"createdAt\": \"2024-11-04T01:53:02Z\",\n      \"updatedAt\": \"2024-11-04T01:53:02Z\"\n    },\n    \"createdAt\": \"2024-11-08T10:21:11Z\",\n    \"updatedAt\": \"2024-11-08T10:21:11Z\"\n  },\n  \"serviceDefinition\": {\n    \"name\": \"celsiusInfo\",\n    \"createdAt\": \"2024-10-24T21:48:36Z\",\n    \"updatedAt\": \"2024-10-24T21:48:36Z\"\n  },\n  \"version\": \"1.0.0\",\n  \"expiresAt\": \"2030-01-01T00:00:00Z\",\n  \"metadata\": {\n    \"marginOfError\": 0.5\n  },\n  \"interfaces\": [\n    {\n      \"templateName\": \"generic_http\",\n      \"protocol\": \"http\",\n      \"policy\": \"NONE\",\n      \"properties\": {\n        \"accessAddresses\": [\n          \"192.168.56.116\",\n          \"tp2.greenhouse.com\"\n        ],\n        \"accessPort\": 8080,\n        \"operations\": {\n          \"query-temperature\": {\n            \"path\": \"/query\",\n            \"method\": \"GET\"\n          }\n        },\n        \"basePath\": \"/celsius\"\n      }\n    }\n  ],\n  \"createdAt\": \"2024-11-19T16:56:06.439181300Z\",\n  \"updatedAt\": \"2024-11-19T16:56:06.439181300Z\"\n}\n</code></pre> <p>3. alertService: </p> <p>Our last service will be responsible for sending error messages. The registration data is the following:</p> <ul> <li>service definition name: In this case this is alertService.</li> <li>version: We will use the default version.</li> <li>expires at: The alertService expires a bit earlier than the previous ones, so we set this to 01. 01. 2027.</li> <li>metadata: For alert service, the maximum possible delay is given, which is 15 sec.</li> <li>interfaces: The interface's endpoints provided by the alert service are the following:<ul> <li>POST tp2.greenhouse.com:8000/alert/subscribe </li> <li>DELETE tp2.greenhouse.com:8000/alert/unsubscribe</li> <li>POST tp2.greenhouse.com:8000/alert/threshold</li> </ul> </li> </ul> <p>We will register this service with the following request:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/service-discovery/register' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//TemperatureProvider2' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"serviceDefinitionName\": \"alertService\",\n  \"version\": \"\",\n  \"expiresAt\": \"2027-01-01T00:00:00Z\",\n  \"metadata\": {\n    \"maxDelay\": { \"value\": 15, \"unit\": \"sec\" }\n  },\n  \"interfaces\": [\n    {\n      \"templateName\": \"generic_http\",\n      \"protocol\": \"http\",\n      \"policy\": \"NONE\",\n      \"properties\": {\n        \"accessAddresses\": [ \"192.168.56.116\", \"tp2.greenhouse.com\" ],\n        \"accessPort\": 8000,\n        \"basePath\": \"/alert\",\n        \"operations\": {\n          \"subscribe\": { \"method\": \"POST\", \"path\": \"/subscribe\" },\n          \"unsubscribe\": { \"method\": \"DELETE\", \"path\": \"/unsubscribe\" },\n          \"set-threshold\": { \"method\": \"POST\", \"path\": \"/threshold\" }\n        }\n      }\n    }\n  ]\n}'\n</code></pre> <p>The received answer:</p> <pre><code>{\n  \"instanceId\": \"TemperatureProvider2|alertService|1.0.0\",\n  \"provider\": {\n    \"name\": \"TemperatureProvider2\",\n    \"metadata\": {\n      \"scales\": [\n        \"kelvin\",\n        \"celsius\"\n      ],\n      \"location\": {\n        \"side\": \"North\",\n        \"block\": 2\n      },\n      \"indoor\": true\n    },\n    \"version\": \"1.0.0\",\n    \"addresses\": [\n      {\n        \"type\": \"IPV4\",\n        \"address\": \"192.168.56.116\"\n      },\n      {\n        \"type\": \"HOSTNAME\",\n        \"address\": \"tp2.greenhouse.com\"\n      }\n    ],\n    \"device\": {\n      \"name\": \"THERMOMETER2\",\n      \"metadata\": {\n        \"scales\": [\n          \"kelvin\",\n          \"celsius\"\n        ],\n        \"maxTemperature\": {\n          \"kelvin\": 310,\n          \"celsius\": 40\n        },\n        \"minTemperature\": {\n          \"kelvin\": 260,\n          \"celsius\": -10\n        }\n      },\n      \"addresses\": [\n        {\n          \"type\": \"MAC\",\n          \"address\": \"81:ef:1a:44:7a:f5\"\n        }\n      ],\n      \"createdAt\": \"2024-11-04T01:53:02Z\",\n      \"updatedAt\": \"2024-11-04T01:53:02Z\"\n    },\n    \"createdAt\": \"2024-11-08T10:21:11Z\",\n    \"updatedAt\": \"2024-11-08T10:21:11Z\"\n  },\n  \"serviceDefinition\": {\n    \"name\": \"alertService\",\n    \"createdAt\": \"2024-11-08T15:23:10Z\",\n    \"updatedAt\": \"2024-11-08T15:23:10Z\"\n  },\n  \"version\": \"1.0.0\",\n  \"expiresAt\": \"2027-01-01T00:00:00Z\",\n  \"metadata\": {\n    \"maxDelay\": {\n      \"value\": 15,\n      \"unit\": \"sec\"\n    }\n  },\n  \"interfaces\": [\n    {\n      \"templateName\": \"generic_http\",\n      \"protocol\": \"http\",\n      \"policy\": \"NONE\",\n      \"properties\": {\n        \"accessAddresses\": [\n          \"192.168.56.116\",\n          \"tp2.greenhouse.com\"\n        ],\n        \"accessPort\": 8000,\n        \"operations\": {\n          \"subscribe\": {\n            \"path\": \"/subscribe\",\n            \"method\": \"POST\"\n          },\n          \"unsubscribe\": {\n            \"path\": \"/unsubscribe\",\n            \"method\": \"DELETE\"\n          },\n          \"set-threshold\": {\n            \"path\": \"/threshold\",\n            \"method\": \"POST\"\n          }\n        },\n        \"basePath\": \"/alert\"\n      }\n    }\n  ],\n  \"createdAt\": \"2024-11-19T17:08:47.706960300Z\",\n  \"updatedAt\": \"2024-11-19T17:08:47.706960300Z\"\n}\n</code></pre>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-5-lookup-and-revoke-service","title":"Step 5: Lookup and Revoke Service","text":"<p>Let's say  we have decided to no longer provide TemperatureProvider2's  alertService. </p> <p>For deleting the service, we have to know the service instance ID, which was generated by the ServiceRegistry, when we registered our service into the Local Cloud. We can find out what the ID is, if we perform a lookup operation. Of course, if we know the ID, this step can be skipped.</p> <p>Since we know that the provider name is TemperatureProvider2, the service definition name is alertService, and the version was 1.0.0, we will send a lookup request with these filters. We will set the verbose flag to false, because we only need the service instance ID here, all the other additional data is unnecessary.</p> <p>Note that our case, the service discovery policy is set to OPEN. If the discovery policy is RESTRICTED, we will only retrieve the services that have the metadata key unrestrictedDiscovery, and this is set to true.</p> <p>The lookup request looks like this:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/service-discovery/lookup?verbose=false' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//TemperatureProvider2' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"instanceIds\": [\n  ],\n  \"providerNames\": [\n    \"TemperatureProvider2\"\n  ],\n  \"serviceDefinitionNames\": [\n    \"alertService\"\n  ],\n  \"versions\": [\n    \"1.0.0\"\n  ],\n  \"alivesAt\": \"\",\n  \"metadataRequirementsList\": [\n  ],\n  \"interfaceTemplateNames\": [\n  ],\n  \"interfacePropertyRequirementsList\": [\n  ],\n  \"policies\": [\n  ]\n}'\n</code></pre> <p>The lookup response:</p> <pre><code>{\n  \"entries\": [\n    {\n      \"instanceId\": \"TemperatureProvider2|alertService|1.0.0\",\n      \"provider\": {\n        \"name\": \"TemperatureProvider2\",\n        \"metadata\": {\n          \"scales\": [\n            \"kelvin\",\n            \"celsius\"\n          ],\n          \"location\": {\n            \"side\": \"North\",\n            \"block\": 2\n          },\n          \"indoor\": true\n        },\n        \"version\": \"1.0.0\",\n        \"addresses\": [\n          {\n            \"type\": \"IPV4\",\n            \"address\": \"192.168.56.116\"\n          },\n          {\n            \"type\": \"HOSTNAME\",\n            \"address\": \"tp2.greenhouse.com\"\n          }\n        ],\n        \"device\": {\n          \"name\": \"THERMOMETER2\"\n        },\n        \"createdAt\": \"2024-11-08T10:21:11Z\",\n        \"updatedAt\": \"2024-11-08T10:21:11Z\"\n      },\n      \"serviceDefinition\": {\n        \"name\": \"alertService\",\n        \"createdAt\": \"2024-11-08T15:23:10Z\",\n        \"updatedAt\": \"2024-11-08T15:23:10Z\"\n      },\n      \"version\": \"1.0.0\",\n      \"expiresAt\": \"2025-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"maxDelay\": {\n          \"value\": 15,\n          \"unit\": \"sec\"\n        }\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic_http\",\n          \"protocol\": \"http\",\n          \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\n              \"192.168.56.116\",\n              \"tp2.greenhouse.com\"\n            ],\n            \"accessPort\": 8000,\n            \"operations\": {\n              \"subscribe\": {\n                \"path\": \"/subscribe\",\n                \"method\": \"POST\"\n              },\n              \"unsubscribe\": {\n                \"path\": \"/unsubscribe\",\n                \"method\": \"DELETE\"\n              },\n              \"set-threshold\": {\n                \"path\": \"/threshold\",\n                \"method\": \"POST\"\n              }\n            },\n            \"basePath\": \"/alert\"\n          }\n        }\n      ],\n      \"createdAt\": \"2024-11-19T17:08:48Z\",\n      \"updatedAt\": \"2024-11-19T17:08:48Z\"\n    }\n  ],\n  \"count\": 1\n}\n</code></pre> <p>Since there was exactly one response, we learned that the service instance id is TemperatureProvider2|alertService|1.0.0. We can revoke the service by sending the following request:</p> <pre><code>curl -X 'DELETE' \\\n  'http://localhost:8443/serviceregistry/service-discovery/revoke/TemperatureProvider2%7CalertService%7C1.0.0' \\\n  -H 'accept: */*' \\\n  -H 'Authorization: Bearer SYSTEM//TemperatureProvider2'\n</code></pre> <p>Note, the service instance id contains pipes (|) as separator characters, which has special meanings on some operation systems. Because of that, the pipe has to be encoded as %7C, that is why we used these in the URL.</p> <p>This operation only works, if the service we are deleting is associated with our system. Otherwise, the following error message will be received:</p> <pre><code>{\n  \"errorMessage\": \"Revoking other systems' service is forbidden\",\n  \"errorCode\": 403,\n  \"exceptionType\": \"FORBIDDEN\",\n  \"origin\": \"DELETE /serviceregistry/service-discovery/revoke/TemperatureProvider2|alertService|1.0.0\"\n}\n</code></pre>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-6-revoke-system","title":"Step 6:  Revoke System","text":"<p>Maybe later we want to revoke the TemperatureProvider2 because we will not use it anymore. We can remove the system from the Local Cloud by using the revoke system operation:</p> <pre><code>curl -X 'DELETE' \\\n  'http://localhost:8443/serviceregistry/system-discovery/revoke' \\\n  -H 'accept: */*' \\\n  -H 'Authorization: Bearer SYSTEM//TemperatureProvider2'\n</code></pre> <p>The ServiceRegistry will delete our system.</p>"},{"location":"help/tutorials/serviceregistry-http-demo/#example-2-consumer","title":"Example 2: Consumer","text":"<p>In this example, we'll see how:</p> <ul> <li>a system called TemperatureConsumer1, </li> <li>running on the device named WEATHER_DISPLAYER1,</li> <li>looks up for available kelvinInfo services,</li> </ul> <p>after registering itself and its device into the Local Cloud.</p>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-1-authentication_1","title":"Step 1: Authentication","text":"<p>Similar to the providers's authentication, we will use self declared authentication, and use the following authorization header:</p> <pre><code>-H 'Authorization: Bearer SYSTEM//TemperatureConsumer1'\n</code></pre>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-2-register-and-revoke-device","title":"Step 2: Register and Revoke Device","text":"<p>Before registrating the system, we will register our device, because it doesn't exist in the Local Cloud yet. We provide the following information about the device:</p> <ul> <li>name: WEATHER_DISPLAYER1</li> <li>metadata: We specify here that the displayer type is digital, and it is capable to display data about temperature and wind.</li> <li>addresses: The device has a MAC address, which is 57:2a:b8:ff:c8:f1.</li> </ul> <p>The request will look like this:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/device-discovery/register' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//TemperatureConsumer1' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"WEATHER_DISPLAYER1\",\n  \"metadata\": {\n    \"type\": \"digital\",\n    \"displayedData\": [ \"wind\", \"temperature\" ]\n  },\n  \"addresses\": [\n    \"57:2a:b8:ff:c8:f1\"\n  ]\n}'\n</code></pre> <p>After successful registration, we receive the following response:</p> <pre><code>{\n  \"name\": \"WEATHER_DISPLAYER1\",\n  \"metadata\": {\n    \"type\": \"digital\",\n    \"displayedData\": [\n      \"wind\",\n      \"temperature\" \n    ]\n  },\n  \"addresses\": [\n    {\n      \"type\": \"MAC\",\n      \"address\": \"57:2a:b8:ff:c8:f1\"\n    }\n  ],\n  \"createdAt\": \"2024-11-10T15:36:53.720922100Z\",\n  \"updatedAt\": \"2024-11-10T15:36:53.720922100Z\"\n}\n</code></pre> <p>If for some reason we want to delete this device in the future, we can do this by sending the following request:</p> <pre><code>curl -X 'DELETE' \\\n  'http://localhost:8443/serviceregistry/device-discovery/revoke/WEATHER_DISPLAYER1' \\\n  -H 'accept: */*' \\\n  -H 'Authorization: Bearer SYSTEM//TemperatureConsumer1'\n</code></pre> <p>Note that this operation will only be successful, if no system is connected to the device anymore. Otherwise you will get the following error message:</p> <pre><code>{\n  \"errorMessage\": \"At least one system is assigned to this device\",\n  \"errorCode\": 423,\n  \"exceptionType\": \"LOCKED\",\n  \"origin\": \"DELETE /serviceregistry/device-discovery/revoke/WEATHER_DISPLAYER1\"\n}\n</code></pre> <p>In this example, we will not delete the device yet, because TemperatureConsumer1 runs on it.</p>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-3-register-system_1","title":"Step 3: Register System","text":"<p>Now, that we registered the device, we will register the system too with the following data:</p> <ul> <li>metadata: The system uses Kelvin, Celsius and Fahrenheit scales. It is placed indoor and is located in room 14. </li> <li>version: This is the second version of this system. We can set it to 2, the ServiceRegistry will normalize it later according to semantic versioning.</li> <li>addresses: We specify an IP address (192.168.49.1) and the hostname (tc1.greenhouse.com).</li> <li>device name: This will be WEATHER_DISPLAYER1, which we registered earlier.</li> </ul> <p>The registation request:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/system-discovery/register' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//TemperatureConsumer1' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"metadata\": {\n    \"scales\": [ \"kelvin\", \"celsius\", \"fahrenheit\" ],\n    \"location\": { \"room\": 14 },\n    \"indoor\": true\n  },\n  \"version\": \"2\",\n  \"addresses\": [\n    \"192.168.49.1\",\n    \"tc1.greenhouse.com\"\n  ],\n  \"deviceName\": \"WEATHER_DISPLAYER1\"\n}'\n</code></pre> <p>Here is the response we received:</p> <pre><code>{\n  \"name\": \"TemperatureConsumer1\",\n  \"metadata\": {\n    \"scales\": [\n      \"kelvin\",\n      \"celsius\",\n      \"fahrenheit\"\n    ],\n    \"location\": {\n      \"room\": 14\n    },\n    \"indoor\": true\n  },\n  \"version\": \"2.0.0\",\n  \"addresses\": [\n    {\n      \"type\": \"IPV4\",\n      \"address\": \"192.168.49.1\"\n    },\n    {\n      \"type\": \"HOSTNAME\",\n      \"address\": \"tc1.greenhouse.com\"\n    }\n  ],\n  \"device\": {\n    \"name\": \"WEATHER_DISPLAYER1\",\n    \"metadata\": {\n      \"type\": \"digital\",\n      \"displayedData\": [ \n        \"wind\",\n        \"temperature\" \n      ]\n    },\n    \"addresses\": [\n      {\n        \"type\": \"MAC\",\n        \"address\": \"57:2a:b8:ff:c8:f1\"\n      }\n    ],\n    \"createdAt\": \"2024-11-10T15:36:54Z\",\n    \"updatedAt\": \"2024-11-10T15:36:54Z\"\n  },\n  \"createdAt\": \"2024-11-10T16:05:55.973663300Z\",\n  \"updatedAt\": \"2024-11-10T16:05:55.973663300Z\"\n}\n</code></pre>"},{"location":"help/tutorials/serviceregistry-http-demo/#step-4-lookup-services","title":"Step 4: Lookup Services","text":"<p>Let's say that the TemperatureConsumer1 wants to consume the kelvinInfo service. We have to perform a lookup operation to find out the service instances registered into the Local Cloud with the corresponding service definition name. We are looking for services, that will not expire until 31. december 2025, and the margin of error is not higher than 1 degree.</p> <p>We will use the following filters during lookup:</p> <ul> <li>Service definition names: We are looking for services named kelvinInfo.</li> <li>Alives at: This should be the UTC string representation of 31. 12. 2025.</li> <li>Metadata requirements list: As specified, the margin of error sould be less than or equals to 1. However, the service might not contain this metadata, if the measured temperature is always perfectly accurate. In this case, there has to be a reliabe flag which is set to true. So we will have two metadata requirements, one is a limit for the margin of error metadata, and the other one is to check the reliable flag. </li> </ul> <p>We will set the verbose parameter to true, because we want all the possible details about the services, so we can make an optimal decision, which one to consume.</p> <p>As mentioned in example 1, the service discovery policy here is set to OPEN. If the discovery policy is RESTRICTED, we may face some restrictions.</p> <p>The request looks like this:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8443/serviceregistry/service-discovery/lookup?verbose=true' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer SYSTEM//TemperatureConsumer1' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"instanceIds\": [\n  ],\n  \"providerNames\": [\n  ],\n  \"serviceDefinitionNames\": [\n    \"kelvinInfo\"\n  ],\n  \"versions\": [\n  ],\n  \"alivesAt\": \"2025-12-31T00:00:00Z\",\n  \"metadataRequirementsList\": [\n    {\n      \"marginOfError\": { \"op\": \"LESS_THAN_OR_EQUALS_TO\", \"value\": 1}\n    },\n    {\n      \"reliable\": true\n    }\n  ],\n  \"interfaceTemplateNames\": [\n  ],\n  \"interfacePropertyRequirementsList\": [\n  ],\n  \"policies\": [\n  ]\n}'\n</code></pre> <p>The result contains two entities, TemperatureProvider2|kelvinInfo|1.0.0 and TemperatureProvider1|kelvinInfo|1.0.0:</p> <pre><code>{\n  \"entries\": [\n    {\n      \"instanceId\": \"TemperatureProvider2|kelvinInfo|1.0.0\",\n      \"provider\": {\n        \"name\": \"TemperatureProvider2\",\n        \"metadata\": {\n          \"scales\": [\n            \"kelvin\",\n            \"celsius\"\n          ],\n          \"location\": {\n            \"side\": \"North\",\n            \"block\": 2\n          },\n          \"indoor\": true\n        },\n        \"version\": \"1.0.0\",\n        \"addresses\": [\n          {\n            \"type\": \"IPV4\",\n            \"address\": \"192.168.56.116\"\n          },\n          {\n            \"type\": \"HOSTNAME\",\n            \"address\": \"tp2.greenhouse.com\"\n          }\n        ],\n        \"device\": {\n          \"name\": \"THERMOMETER2\",\n          \"metadata\": {\n            \"scales\": [\n              \"kelvin\",\n              \"celsius\"\n            ],\n            \"maxTemperature\": {\n              \"kelvin\": 310,\n              \"celsius\": 40\n            },\n            \"minTemperature\": {\n              \"kelvin\": 260,\n              \"celsius\": -10\n            }\n          },\n          \"addresses\": [\n            {\n              \"type\": \"MAC\",\n              \"address\": \"81:ef:1a:44:7a:f5\"\n            }\n          ],\n          \"createdAt\": \"2024-11-04T01:53:02Z\",\n          \"updatedAt\": \"2024-11-04T01:53:02Z\"\n        },\n        \"createdAt\": \"2024-11-08T10:21:11Z\",\n        \"updatedAt\": \"2024-11-08T10:21:11Z\"\n      },\n      \"serviceDefinition\": {\n        \"name\": \"kelvinInfo\",\n        \"createdAt\": \"2024-11-08T11:24:43Z\",\n        \"updatedAt\": \"2024-11-08T11:24:43Z\"\n      },\n      \"version\": \"1.0.0\",\n      \"expiresAt\": \"2030-01-01T00:00:00Z\",\n      \"metadata\": {\n        \"marginOfError\": 0.5\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic_http\",\n          \"protocol\": \"http\",\n          \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\n              \"192.168.56.116\",\n              \"tp2.greenhouse.com\"\n            ],\n            \"accessPort\": 8080,\n            \"operations\": {\n              \"query-temperature\": {\n                \"path\": \"/query\",\n                \"method\": \"GET\"\n              }\n            },\n            \"basePath\": \"/kelvin\"\n          }\n        }\n      ],\n      \"createdAt\": \"2024-11-10T14:24:13Z\",\n      \"updatedAt\": \"2024-11-10T22:43:19Z\"\n    },\n    {\n      \"instanceId\": \"TemperatureProvider1|kelvinInfo|1.0.0\",\n      \"provider\": {\n        \"name\": \"TemperatureProvider1\",\n        \"metadata\": {\n          \"scales\": [\n            \"kelvin\"\n          ],\n          \"location\": {\n            \"side\": \"East\",\n            \"block\": 2\n          },\n          \"indoor\": false\n        },\n        \"version\": \"1.0.0\",\n        \"addresses\": [\n          {\n            \"type\": \"IPV4\",\n            \"address\": \"192.168.56.110\"\n          },\n          {\n            \"type\": \"HOSTNAME\",\n            \"address\": \"tp1.greenhouse.com\"\n          }\n        ],\n        \"createdAt\": \"2024-11-10T16:15:23Z\",\n        \"updatedAt\": \"2024-11-10T16:15:23Z\"\n      },\n      \"serviceDefinition\": {\n        \"name\": \"kelvinInfo\",\n        \"createdAt\": \"2024-11-08T11:24:43Z\",\n        \"updatedAt\": \"2024-11-08T11:24:43Z\"\n      },\n      \"version\": \"1.0.0\",\n      \"expiresAt\": \"2030-05-31T00:00:00Z\",\n      \"metadata\": {\n        \"reliable\": true\n      },\n      \"interfaces\": [\n        {\n          \"templateName\": \"generic_http\",\n          \"protocol\": \"http\",\n          \"policy\": \"NONE\",\n          \"properties\": {\n            \"accessAddresses\": [\n              \"192.168.56.110\",\n              \"tp1.greenhouse.com\"\n            ],\n            \"accessPort\": 8080,\n            \"operations\": {\n              \"query-temperature\": {\n                \"path\": \"/info\",\n                \"method\": \"GET\"\n              }\n            },\n            \"basePath\": \"/kelvin\"\n          }\n        }\n      ],\n      \"createdAt\": \"2024-11-10T21:08:21Z\",\n      \"updatedAt\": \"2024-11-10T22:43:19Z\"\n    }\n  ],\n  \"count\": 2\n}\n</code></pre> <p>Now we are free to choose, which instance of kelvinInfo service to consume.</p>"},{"location":"home/contribute/","title":"Contribute","text":""},{"location":"home/contribute/#eclipse-contributor-agreement","title":"Eclipse Contributor Agreement","text":"<p>Since Arrowhead project is governed within the Eclipse Foundation, the authors of any contribution must agree and accept the Eclipse Contributor Agreement (\"ECA\").</p> <p>Technically it means that contributors need an Eclipse Fundation Account which makes possible to submit a signed ECA! GitHub Pull Requests could be accepted only when all the authors own an Eclipse Foundation Account with the signed ECA!</p>"},{"location":"home/contribute/#eca-verification","title":"ECA verification","text":"<p>The existence of the signed ECA is verified based on the authors commits. Your local Git client should hold and push the commits with the same email address like the Eclipse Foundation Account was created with. When the email address is different, than the verification process will fail and the Pull Request is not possible to merge. </p>"},{"location":"home/contribute/#configuring-git-client","title":"Configuring Git client","text":"<p>Use the command below to configure your git client globally:</p> <p><code>$ git config --global user.email anybody@example.com</code></p> <p>Whithout the <code>--global</code> flag you can set the email address only for that specific project where the command was executed.</p>"},{"location":"home/contribute/#way-of-contributing","title":"Way of contributing","text":"<p>1) Fork (and not clone) the project repository.</p> <ul> <li>Working with forks</li> </ul> <p>2) Create a new branch in your fork and from the <code>development</code> branch for your contribution.</p> <p>(Creating and pushing new branches within a cloned repository is allowed only for official Committers)</p> <p>3) Take care of coding clean!</p> <ul> <li>Stick to the Implementation Structure</li> <li>Clean coding in Java</li> <li>A short summary of Java coding best practices</li> </ul> <p>4) Make sure you have a working contribution</p> <ul> <li>Write unit tests</li> <li>Run several test scenario</li> </ul> <p>5) Make sure you are not using restricted third party library</p> <ul> <li>Build the project with <code>mvn clean install -P license-check -DskipTests</code>. After the project build has been finished, you will find a summary about the used libraries in the <code>\\target\\dash\\summary</code> file. Look for your newly added libraries and make sure they are not restricted. </li> </ul> <p>6) Synchronize the <code>development</code> branch in your fork and merge it into your contribution branch </p> <p>7) Rise a Pull Request from your fork to the <code>development</code> branch of the original project repository.</p> <ul> <li>Creating a pull request from a fork</li> </ul> <p>8) Wait for the review.</p> <ul> <li>Pull requests with ECA issue, merge conflict, unit test issues or running issues will be closed without review</li> </ul> <p>9) Deal with the requested fixes if any.</p> <p>10) When your Pull Request is approved, then it will be merged by a committer and will be contained by the coming release</p>"},{"location":"home/getting_started/","title":"Getting Started","text":""},{"location":"home/getting_started/#download-executables","title":"Download Executables","text":""},{"location":"home/getting_started/#requirements","title":"Requirements","text":"<ul> <li>Make sure you have the proper version of Java installed.</li> <li>Make sure you have the proper version of MySQL installed.</li> </ul> <p>See details here.</p> <p>Hint: MySQL connections configuration</p>"},{"location":"home/getting_started/#download-and-prepare","title":"Download and prepare","text":"<ul> <li>Go to releases and download the<code>.zip</code> files for the choosen systems.</li> <li>Unzip the files.</li> <li>Go to the <code>database</code> folder and execute <code>mysql -u {username} -p &lt; create_empty_db.sql</code> command in order to create the database.</li> </ul>"},{"location":"home/getting_started/#start-the-core-systems","title":"Start the core systems","text":"<ul> <li> <p>Make sure you have the proper values in the configuration file before starting the required core systems.</p> <p>The system configuration properties can be found in the <code>application.properties</code> file which is located next to the executable <code>.jar</code> file of the system. Look for the configuration possibilities in the system descriptions (example). </p> </li> <li> <p>Execute <code>java -jar arrowhead-{core-system}-{version}.jar</code> from the same folder.</p> </li> <li>Note that always the ServiceRegistry Core System has to be started first. The other ones should be started only when ServiceRegistry is up and running.</li> </ul>"},{"location":"home/getting_started/#docker","title":"Docker","text":"<p>Coming soon...</p>"},{"location":"home/getting_started/#compile-code","title":"Compile Code","text":"<p>Coming soon...</p>"},{"location":"home/implementation/","title":"Implementation","text":""},{"location":"home/implementation/#technology-stack","title":"Technology Stack","text":"<p>Programming Language: Java 21</p> <p>Why java? Because it is platform-independent as much as possible. When a computer has the Java Runtime Environment (JRE) installed, a Java program can run on it. Most types of computers are compatible with a JRE including PCs running on Windows, Macintosh computers, Unix or Linux computers, and large mainframe computers.</p> <p>Programming Framework: Spring-Boot 3.3.0</p> <p>Why Spring? Because it brings together years of wisdom in the form of design patterns. Spring has a long history of innovation, adoption, and standardization. Over the years, it's become mature enough to become a default solution for most common problems faced in the development of large scale enterprise applications.</p> <p>Building Tool: Maven 3.5+</p> <p>Why Maven? Because it is one of the most popular build tools in Java, designed to take much of the hard work out of the build process. Maven uses a declarative approach, where the project structure and contents are described, rather than the task-based approach used in Ant or in traditional make files, for example.</p> <p>Database Management System: MySQL 5.7+</p> <p>Why MySQL? Beacuse it was developed for speed, and maintains a reputation for being fast, even if this may come at the expense of some additional features. It is also known for its reliability, backed by a large community of programmers that have put the code through tough testing over the years. </p>"},{"location":"home/implementation/#implementation-structure","title":"Implementation structure","text":""},{"location":"home/implementation/#hardware-requirements","title":"Hardware Requirements","text":"<p>The hardware requirements really depend on the expected workload. Faster CPU / more cores / more RAM is likely to lead to improved performance.</p>"},{"location":"home/implementation/#database","title":"Database","text":"<p>Minimum: 1 CPU Core, 600 MB RAM, 1 GB Disk space  Recommended: 2 CPU Cores, 4 GB RAM, 2+ GB Disk space (depending on the expected amount of data to be stored)</p>"},{"location":"home/implementation/#java-runtime-environment-jre","title":"Java Runtime Environment (JRE)","text":"<p>Disk space: ~150 MB</p>"},{"location":"home/implementation/#core-system","title":"Core system","text":"<p>Minimum (per system): 1 CPU Core, 128 MB RAM + ~100 MB RAM for the JVM, 100 MB Disk space  Recommended (per system): 4 CPU Cores, 2 GB RAM, 100 MB Disk space</p> <p>Hint: customize the memory usage</p> <p>Note: Please take into consideration, that the above mentioned requirements are reflecting the native deployment. If you use any additional containerization (like Docker, Kubernetes, etc..) or any virtualization, then more resources will be needed for the same performance. </p>"},{"location":"home/welcome/","title":"Welcome","text":"<p>This site provides all the specification, description and example what is necessary for dealing with the java-spring implementation of Eclipse Arrowhead Framework.</p> <p> eclipse-arrowhead/java-spring</p>"},{"location":"home/welcome/#what-is-it","title":"What is it?","text":"<p>The Eclipse Arrowhead Framework is addressing IoT based automation and digitalisation. The generic concept is based on the principles of Service Oriented Architectures, and aims at enabling all of its users to work in a common and unified approach \u2013 leading towards high levels of interoperability. The approach taken is that the information exchange of elements in the Internet of Things is abstracted to loosely coupled services. This is to enable IoT interoperability in-between almost any IoT elements.</p> <p>The smallest unit of governance within the Arrowhead Framework is related to a Local Cloud, which in general is a closed, local industrial network. Each Local Cloud is recommended to host the core systems within its network: creating the minimal supported functionality needed to enable collaboration and information exchange between the various systems within the Local Cloud. The four recommended core system for each Local Cloud are the ServiceRegistry, a ...ServiceOrchestration system (the actual name contains the implemented orchestration strategy), the ConsumerAuthorization and the Authentication.</p> <p>In addition to the recommended core systems, a number of additional, supporting core systems and services are provided to enable the design, engineering, operation and maintenance of IoT-based automation system of systems.</p>"},{"location":"home/welcome/#learn-more","title":"Learn more","text":"<p> arrowhead technology eclipse governance</p>"},{"location":"support_systems/blacklist/","title":"Blacklist","text":"<p>This Support system makes it possible for systems with operator role or proper permissions to ban other systems from the Local Cloud. </p> <p>There are operations that provide some information about the blacklist. These are available for every system.</p> <p>Learn more:  Abstract System Description (SysD)</p>"},{"location":"support_systems/blacklist/#services","title":"Services","text":""},{"location":"support_systems/blacklist/#blacklistdiscovery","title":"blacklistDiscovery","text":"<p>The purpose of blacklistDiscovery is to provide information about the blacklist. This service is offered for both Application and Core/Support systems. </p> <p>Learn more:  Abstract Service Description (SD) generic_http (IDD) | generic_https (IDD) generic_mqtt (IDD) | generic_mqtts (IDD)  since: v5.0.0</p> <p>lookup</p> <p>This service operation returns the blacklist entries that are in force and apply to the requester. Note that lookup is enabled even if the requester is blacklisted.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>check</p> <p>This service operation allows systems to check whether another system is blacklisted.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p>"},{"location":"support_systems/blacklist/#blacklistmanagement","title":"blacklistManagement","text":"<p>Its purpose is to manage (query, create and remove) blacklist entries in bulk. The service is offered for administrative Support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic_http (IDD) | generic_https (IDD) generic_mqtt (IDD) | generic_mqtts (IDD)  since: v5.0.0 </p> <p>query</p> <p>This service operation returns existing blacklist entries according to the given filters.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>create</p> <p>This service operation creates active blacklist entries in bulk.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>remove</p> <p>This service operation inactivates every entry that applies to the specified systems. Note that this will not remove the entry from the database.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p>"},{"location":"support_systems/blacklist/#generalmanagement","title":"generalManagement","text":"<p>Its purpose is to get some information about the hosting system\u2019s behavior, such as log entries and configuration settings. The service is offered for administrative Support systems.</p> <p>Learn more:  Abstract Service Description (SD) generic_http (IDD) | generic_https (IDD) generic_mqtt (IDD) | generic_mqtts (IDD)  since: v5.0.0 </p> <p>get-log</p> <p>This service operation lists the log entries of the system that matches the filtering requirements.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p> <p>get-config</p> <p>This service operation lists the current values of the specified configuration settings.</p> <p> Example: generic_http | generic_https  Example: generic_mqtt | generic_mqtts</p>"},{"location":"support_systems/blacklist/#configuration","title":"Configuration","text":"<p>The system configuration properties can be found in the <code>application.properties</code> file located at <code>/src/main/resources</code> folder.</p> <p>Note: During the build process this file is going to be built into the executable JAR, but also going to be copied next to the JAR file. Any modification in the configuration file located next to the executable JAR file will override the built in configuration property value.</p>"},{"location":"support_systems/blacklist/#general-parameters","title":"General parameters","text":"<p>See the general configuration properties.</p>"},{"location":"support_systems/blacklist/#database-parameters","title":"Database parameters","text":"<p> spring.datasource.url</p> <p>URL to the database.</p> <p> spring.datasource.username</p> <p>Username to the database.</p> <p> spring.datasource.password</p> <p>Password to the database.</p> <p> spring.datasource.driver-class-name</p> <p>The driver provides the connection to the database and implements the protocol for transferring the query and result between client and database.</p> <p> spring.jpa.show-sql</p> <p>Set to true in order to log out the SQL queries.</p> <p> spring.jpa.properties.hibernate.format sql</p> <p>Set to true to log out SQL queries in pretty format. (Effective only when 'spring.jpa.show-sql' is 'true')</p> <p> spring.jpa.hibernate.ddl-auto</p> <p>Auto initialization of database tables. Value must be always 'none'.</p>"},{"location":"support_systems/blacklist/#custom-parameters","title":"Custom parameters","text":"<p> enable.management.filter</p> <p>Enable or disable authorization for accessing the management services. Can be <code>true</code> of <code>false</code>.</p> <p> management.policy</p> <p>Way of authorizing the management service requester systems. Can be:</p> <ul> <li><code>sysop-only</code>, when the authenticated requester system has system-operator role that ensures overall management permission.</li> <li><code>whitelist</code>, sysop-only and when the authenticated requester system is whitelisted in the management.whitelist configuration property that ensures overall management permission.</li> <li><code>authorization</code>, sysop-only and whitelist and when the authenticated requester system has appropriate service permission according to the ConsumerAuthorization Core system.</li> </ul> <p> management.whitelist</p> <p>Name of the systems which can access to management services in case of <code>whitelist</code> policy is effective.</p> <p> max.page.size</p> <p>Specifies the maximum number of records a page can contain in case of pageable service responses.</p> <p> whitelist</p> <p>Name of the systems that cannot be blacklisted. By starting the application, existing blacklist records belonging to these systems will be inactivated as well.</p>"},{"location":"support_systems/blacklist/#logging-configuration","title":"Logging configuration","text":"<p>The logging configuration properties can be found in the <code>log4j2.xml</code> file located at <code>src/main/resources</code> folder.</p> <p>Note: During the build process this file is going to be built into the executable JAR, but it is also possible to override it by an external file. For that use the following command when starting the system:</p> <pre><code>java -jar arrowhead-blacklist-x.x.x.jar\n     -Dlog4j.configurationFile=path-to-external-file\n</code></pre> <p> JDBC_LEVEL</p> <p>Set this to change the level of log messages in the database. Levels: ALL, TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF.</p> <p> CONSOLE FILE LEVEL</p> <p>Set this to change the level of log messages in consol and the log file. Levels: ALL, TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF.</p> <p> LOG_DIR</p> <p>Set this to change the directory of log files.</p>"},{"location":"support_systems/blacklist/#changelog","title":"Changelog","text":""},{"location":"support_systems/blacklist/#v500","title":"v5.0.0","text":"<p>Related in CL-5.0.0</p> <ul> <li>general</li> <li>arrowhead-common-utils</li> <li>arrowhead-data-transfer-objects</li> <li>arrowhead-blacklist</li> </ul>"},{"location":"support_systems/configuration/","title":"Configuration","text":"<p>Coming soon...</p>"},{"location":"support_systems/qos_evaluator/","title":"QoS Evaluator","text":"<p>Coming soon...</p>"},{"location":"support_systems/translation_manager/","title":"Translation Manager","text":"<p>Coming soon...</p>"}]}